pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = c_longdouble;
pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const int_fast16_t = i16;
pub const int_fast32_t = i32;
pub const int_fast64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = u16;
pub const uint_fast32_t = u32;
pub const uint_fast64_t = u64;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __darwin_intptr_t = c_long;
pub const __darwin_natural_t = c_uint;
pub const __darwin_ct_rune_t = c_int;
pub const __mbstate_t = extern union {
    __mbstate8: [128]u8,
    _mbstateL: c_longlong,
};
pub const __darwin_mbstate_t = __mbstate_t;
pub const __darwin_ptrdiff_t = c_long;
pub const __darwin_size_t = c_ulong;
pub const __builtin_va_list = [*c]u8;
pub const __darwin_va_list = __builtin_va_list;
pub const __darwin_wchar_t = c_int;
pub const __darwin_rune_t = __darwin_wchar_t;
pub const __darwin_wint_t = c_int;
pub const __darwin_clock_t = c_ulong;
pub const __darwin_socklen_t = __uint32_t;
pub const __darwin_ssize_t = c_long;
pub const __darwin_time_t = c_long;
pub const __darwin_blkcnt_t = __int64_t;
pub const __darwin_blksize_t = __int32_t;
pub const __darwin_dev_t = __int32_t;
pub const __darwin_fsblkcnt_t = c_uint;
pub const __darwin_fsfilcnt_t = c_uint;
pub const __darwin_gid_t = __uint32_t;
pub const __darwin_id_t = __uint32_t;
pub const __darwin_ino64_t = __uint64_t;
pub const __darwin_ino_t = __darwin_ino64_t;
pub const __darwin_mach_port_name_t = __darwin_natural_t;
pub const __darwin_mach_port_t = __darwin_mach_port_name_t;
pub const __darwin_mode_t = __uint16_t;
pub const __darwin_off_t = __int64_t;
pub const __darwin_pid_t = __int32_t;
pub const __darwin_sigset_t = __uint32_t;
pub const __darwin_suseconds_t = __int32_t;
pub const __darwin_uid_t = __uint32_t;
pub const __darwin_useconds_t = __uint32_t;
pub const __darwin_uuid_t = [16]u8;
pub const __darwin_uuid_string_t = [37]u8;
pub const struct___darwin_pthread_handler_rec = extern struct {
    __routine: ?*const fn (?*anyopaque) callconv(.C) void,
    __arg: ?*anyopaque,
    __next: [*c]struct___darwin_pthread_handler_rec,
};
pub const struct__opaque_pthread_attr_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_cond_t = extern struct {
    __sig: c_long,
    __opaque: [40]u8,
};
pub const struct__opaque_pthread_condattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_mutex_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_mutexattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_once_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_rwlock_t = extern struct {
    __sig: c_long,
    __opaque: [192]u8,
};
pub const struct__opaque_pthread_rwlockattr_t = extern struct {
    __sig: c_long,
    __opaque: [16]u8,
};
pub const struct__opaque_pthread_t = extern struct {
    __sig: c_long,
    __cleanup_stack: [*c]struct___darwin_pthread_handler_rec,
    __opaque: [8176]u8,
};
pub const __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const __darwin_pthread_key_t = c_ulong;
pub const __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub const __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const __darwin_pthread_t = [*c]struct__opaque_pthread_t;
pub const u_int8_t = u8;
pub const u_int16_t = c_ushort;
pub const u_int32_t = c_uint;
pub const u_int64_t = c_ulonglong;
pub const register_t = i64;
pub const user_addr_t = u_int64_t;
pub const user_size_t = u_int64_t;
pub const user_ssize_t = i64;
pub const user_long_t = i64;
pub const user_ulong_t = u_int64_t;
pub const user_time_t = i64;
pub const user_off_t = i64;
pub const syscall_arg_t = u_int64_t;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub const GLenum = c_uint;
pub const GLbitfield = c_uint;
pub const GLuint = c_uint;
pub const GLint = c_int;
pub const GLsizei = c_int;
pub const GLboolean = u8;
pub const GLbyte = i8;
pub const GLshort = c_short;
pub const GLubyte = u8;
pub const GLushort = c_ushort;
pub const GLulong = c_ulong;
pub const GLfloat = f32;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub const GLvoid = anyopaque;
pub const GLint64EXT = i64;
pub const GLuint64EXT = u64;
pub const GLint64 = GLint64EXT;
pub const GLuint64 = GLuint64EXT;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const GLchar = u8;
pub const GLeglImageOES = ?*anyopaque;
pub extern fn glAccum(op: GLenum, value: GLfloat) void;
pub extern fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern fn glAreTexturesResident(n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) GLboolean;
pub extern fn glArrayElement(i: GLint) void;
pub extern fn glBegin(mode: GLenum) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: [*c]const GLubyte) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glCallList(list: GLuint) void;
pub extern fn glCallLists(n: GLsizei, @"type": GLenum, lists: ?*const anyopaque) void;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glClearDepth(depth: GLclampd) void;
pub extern fn glClearIndex(c: GLfloat) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glClipPlane(plane: GLenum, equation: [*c]const GLdouble) void;
pub extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glColor3bv(v: [*c]const GLbyte) void;
pub extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glColor3dv(v: [*c]const GLdouble) void;
pub extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glColor3fv(v: [*c]const GLfloat) void;
pub extern fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glColor3iv(v: [*c]const GLint) void;
pub extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glColor3sv(v: [*c]const GLshort) void;
pub extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glColor3uiv(v: [*c]const GLuint) void;
pub extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glColor3usv(v: [*c]const GLushort) void;
pub extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern fn glColor4bv(v: [*c]const GLbyte) void;
pub extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern fn glColor4dv(v: [*c]const GLdouble) void;
pub extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glColor4fv(v: [*c]const GLfloat) void;
pub extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern fn glColor4iv(v: [*c]const GLint) void;
pub extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern fn glColor4sv(v: [*c]const GLshort) void;
pub extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern fn glColor4ubv(v: [*c]const GLubyte) void;
pub extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern fn glColor4uiv(v: [*c]const GLuint) void;
pub extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern fn glColor4usv(v: [*c]const GLushort) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern fn glColorPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, @"type": GLenum) void;
pub extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRange(zNear: GLclampd, zFar: GLclampd) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glDisableClientState(array: GLenum) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawBuffer(mode: GLenum) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, @"type": GLenum, indices: ?*const anyopaque) void;
pub extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glEdgeFlag(flag: GLboolean) void;
pub extern fn glEdgeFlagPointer(stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glEdgeFlagv(flag: [*c]const GLboolean) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glEnableClientState(array: GLenum) void;
pub extern fn glEnd() void;
pub extern fn glEndList() void;
pub extern fn glEvalCoord1d(u: GLdouble) void;
pub extern fn glEvalCoord1dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord1f(u: GLfloat) void;
pub extern fn glEvalCoord1fv(u: [*c]const GLfloat) void;
pub extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern fn glEvalCoord2dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern fn glEvalCoord2fv(u: [*c]const GLfloat) void;
pub extern fn glEvalMesh1(mode: GLenum, @"i1": GLint, @"i2": GLint) void;
pub extern fn glEvalMesh2(mode: GLenum, @"i1": GLint, @"i2": GLint, j1: GLint, j2: GLint) void;
pub extern fn glEvalPoint1(i: GLint) void;
pub extern fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern fn glFeedbackBuffer(size: GLsizei, @"type": GLenum, buffer: [*c]GLfloat) void;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern fn glFogfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glFogi(pname: GLenum, param: GLint) void;
pub extern fn glFogiv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn glGenLists(range: GLsizei) GLuint;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glGetBooleanv(pname: GLenum, params: [*c]GLboolean) void;
pub extern fn glGetClipPlane(plane: GLenum, equation: [*c]GLdouble) void;
pub extern fn glGetDoublev(pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetError() GLenum;
pub extern fn glGetFloatv(pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetIntegerv(pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetLightfv(light: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetLightiv(light: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetMapdv(target: GLenum, query: GLenum, v: [*c]GLdouble) void;
pub extern fn glGetMapfv(target: GLenum, query: GLenum, v: [*c]GLfloat) void;
pub extern fn glGetMapiv(target: GLenum, query: GLenum, v: [*c]GLint) void;
pub extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetPixelMapfv(map: GLenum, values: [*c]GLfloat) void;
pub extern fn glGetPixelMapuiv(map: GLenum, values: [*c]GLuint) void;
pub extern fn glGetPixelMapusv(map: GLenum, values: [*c]GLushort) void;
pub extern fn glGetPointerv(pname: GLenum, params: [*c]?*anyopaque) void;
pub extern fn glGetPolygonStipple(mask: [*c]GLubyte) void;
pub extern fn glGetString(name: GLenum) [*c]const GLubyte;
pub extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, @"type": GLenum, pixels: ?*anyopaque) void;
pub extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glIndexMask(mask: GLuint) void;
pub extern fn glIndexPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glIndexd(c: GLdouble) void;
pub extern fn glIndexdv(c: [*c]const GLdouble) void;
pub extern fn glIndexf(c: GLfloat) void;
pub extern fn glIndexfv(c: [*c]const GLfloat) void;
pub extern fn glIndexi(c: GLint) void;
pub extern fn glIndexiv(c: [*c]const GLint) void;
pub extern fn glIndexs(c: GLshort) void;
pub extern fn glIndexsv(c: [*c]const GLshort) void;
pub extern fn glIndexub(c: GLubyte) void;
pub extern fn glIndexubv(c: [*c]const GLubyte) void;
pub extern fn glInitNames() void;
pub extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glIsList(list: GLuint) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern fn glLightModelfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern fn glLightModeliv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glLightfv(light: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glLightiv(light: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glListBase(base: GLuint) void;
pub extern fn glLoadIdentity() void;
pub extern fn glLoadMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadMatrixf(m: [*c]const GLfloat) void;
pub extern fn glLoadName(name: GLuint) void;
pub extern fn glLogicOp(opcode: GLenum) void;
pub extern fn glMap1d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap1f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) void;
pub extern fn glMap2d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap2f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) void;
pub extern fn glMapGrid1d(un: GLint, @"u1": GLdouble, @"u2": GLdouble) void;
pub extern fn glMapGrid1f(un: GLint, @"u1": GLfloat, @"u2": GLfloat) void;
pub extern fn glMapGrid2d(un: GLint, @"u1": GLdouble, @"u2": GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern fn glMapGrid2f(un: GLint, @"u1": GLfloat, @"u2": GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glMaterialfv(face: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glMaterialiv(face: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glMatrixMode(mode: GLenum) void;
pub extern fn glMultMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultMatrixf(m: [*c]const GLfloat) void;
pub extern fn glNewList(list: GLuint, mode: GLenum) void;
pub extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern fn glNormal3bv(v: [*c]const GLbyte) void;
pub extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern fn glNormal3dv(v: [*c]const GLdouble) void;
pub extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern fn glNormal3fv(v: [*c]const GLfloat) void;
pub extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern fn glNormal3iv(v: [*c]const GLint) void;
pub extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern fn glNormal3sv(v: [*c]const GLshort) void;
pub extern fn glNormalPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn glPassThrough(token: GLfloat) void;
pub extern fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: [*c]const GLfloat) void;
pub extern fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: [*c]const GLuint) void;
pub extern fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: [*c]const GLushort) void;
pub extern fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern fn glPointSize(size: GLfloat) void;
pub extern fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glPolygonStipple(mask: [*c]const GLubyte) void;
pub extern fn glPopAttrib() void;
pub extern fn glPopClientAttrib() void;
pub extern fn glPopMatrix() void;
pub extern fn glPopName() void;
pub extern fn glPrioritizeTextures(n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) void;
pub extern fn glPushAttrib(mask: GLbitfield) void;
pub extern fn glPushClientAttrib(mask: GLbitfield) void;
pub extern fn glPushMatrix() void;
pub extern fn glPushName(name: GLuint) void;
pub extern fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glRasterPos2dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glRasterPos2fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern fn glRasterPos2iv(v: [*c]const GLint) void;
pub extern fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern fn glRasterPos2sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRasterPos3dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glRasterPos3fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glRasterPos3iv(v: [*c]const GLint) void;
pub extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glRasterPos3sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glRasterPos4dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glRasterPos4fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glRasterPos4iv(v: [*c]const GLint) void;
pub extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glRasterPos4sv(v: [*c]const GLshort) void;
pub extern fn glReadBuffer(mode: GLenum) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*anyopaque) void;
pub extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern fn glRectdv(v1: [*c]const GLdouble, v2: [*c]const GLdouble) void;
pub extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern fn glRectfv(v1: [*c]const GLfloat, v2: [*c]const GLfloat) void;
pub extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern fn glRectiv(v1: [*c]const GLint, v2: [*c]const GLint) void;
pub extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern fn glRectsv(v1: [*c]const GLshort, v2: [*c]const GLshort) void;
pub extern fn glRenderMode(mode: GLenum) GLint;
pub extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glSelectBuffer(size: GLsizei, buffer: [*c]GLuint) void;
pub extern fn glShadeModel(mode: GLenum) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glTexCoord1d(s: GLdouble) void;
pub extern fn glTexCoord1dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord1f(s: GLfloat) void;
pub extern fn glTexCoord1fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord1i(s: GLint) void;
pub extern fn glTexCoord1iv(v: [*c]const GLint) void;
pub extern fn glTexCoord1s(s: GLshort) void;
pub extern fn glTexCoord1sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern fn glTexCoord2dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern fn glTexCoord2fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern fn glTexCoord2iv(v: [*c]const GLint) void;
pub extern fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern fn glTexCoord2sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glTexCoord3dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glTexCoord3fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern fn glTexCoord3iv(v: [*c]const GLint) void;
pub extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glTexCoord3sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glTexCoord4dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glTexCoord4fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glTexCoord4iv(v: [*c]const GLint) void;
pub extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glTexCoord4sv(v: [*c]const GLshort) void;
pub extern fn glTexCoordPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexEnviv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern fn glTexGendv(coord: GLenum, pname: GLenum, params: [*c]const GLdouble) void;
pub extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern fn glVertex2dv(v: [*c]const GLdouble) void;
pub extern fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern fn glVertex2fv(v: [*c]const GLfloat) void;
pub extern fn glVertex2i(x: GLint, y: GLint) void;
pub extern fn glVertex2iv(v: [*c]const GLint) void;
pub extern fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern fn glVertex2sv(v: [*c]const GLshort) void;
pub extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertex3dv(v: [*c]const GLdouble) void;
pub extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex3fv(v: [*c]const GLfloat) void;
pub extern fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glVertex3iv(v: [*c]const GLint) void;
pub extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertex3sv(v: [*c]const GLshort) void;
pub extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertex4dv(v: [*c]const GLdouble) void;
pub extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertex4fv(v: [*c]const GLfloat) void;
pub extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glVertex4iv(v: [*c]const GLint) void;
pub extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertex4sv(v: [*c]const GLshort) void;
pub extern fn glVertexPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub const struct_GLUnurbs = opaque {};
pub const GLUnurbs = struct_GLUnurbs;
pub const struct_GLUquadric = opaque {};
pub const GLUquadric = struct_GLUquadric;
pub const struct_GLUtesselator = opaque {};
pub const GLUtesselator = struct_GLUtesselator;
pub const GLUnurbsObj = struct_GLUnurbs;
pub const GLUquadricObj = struct_GLUquadric;
pub const GLUtesselatorObj = struct_GLUtesselator;
pub const GLUtriangulatorObj = struct_GLUtesselator;
pub extern fn gluBeginCurve(nurb: ?*GLUnurbs) void;
pub extern fn gluBeginPolygon(tess: ?*GLUtesselator) void;
pub extern fn gluBeginSurface(nurb: ?*GLUnurbs) void;
pub extern fn gluBeginTrim(nurb: ?*GLUnurbs) void;
pub extern fn gluBuild1DMipmapLevels(target: GLenum, internalFormat: GLint, width: GLsizei, format: GLenum, @"type": GLenum, level: GLint, base: GLint, max: GLint, data: ?*const anyopaque) GLint;
pub extern fn gluBuild1DMipmaps(target: GLenum, internalFormat: GLint, width: GLsizei, format: GLenum, @"type": GLenum, data: ?*const anyopaque) GLint;
pub extern fn gluBuild2DMipmapLevels(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, level: GLint, base: GLint, max: GLint, data: ?*const anyopaque) GLint;
pub extern fn gluBuild2DMipmaps(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, data: ?*const anyopaque) GLint;
pub extern fn gluBuild3DMipmapLevels(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, @"type": GLenum, level: GLint, base: GLint, max: GLint, data: ?*const anyopaque) GLint;
pub extern fn gluBuild3DMipmaps(target: GLenum, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, @"type": GLenum, data: ?*const anyopaque) GLint;
pub extern fn gluCheckExtension(extName: [*c]const GLubyte, extString: [*c]const GLubyte) GLboolean;
pub extern fn gluCylinder(quad: ?*GLUquadric, base: GLdouble, top: GLdouble, height: GLdouble, slices: GLint, stacks: GLint) void;
pub extern fn gluDeleteNurbsRenderer(nurb: ?*GLUnurbs) void;
pub extern fn gluDeleteQuadric(quad: ?*GLUquadric) void;
pub extern fn gluDeleteTess(tess: ?*GLUtesselator) void;
pub extern fn gluDisk(quad: ?*GLUquadric, inner: GLdouble, outer: GLdouble, slices: GLint, loops: GLint) void;
pub extern fn gluEndCurve(nurb: ?*GLUnurbs) void;
pub extern fn gluEndPolygon(tess: ?*GLUtesselator) void;
pub extern fn gluEndSurface(nurb: ?*GLUnurbs) void;
pub extern fn gluEndTrim(nurb: ?*GLUnurbs) void;
pub extern fn gluErrorString(@"error": GLenum) [*c]const GLubyte;
pub extern fn gluGetNurbsProperty(nurb: ?*GLUnurbs, property: GLenum, data: [*c]GLfloat) void;
pub extern fn gluGetString(name: GLenum) [*c]const GLubyte;
pub extern fn gluGetTessProperty(tess: ?*GLUtesselator, which: GLenum, data: [*c]GLdouble) void;
pub extern fn gluLoadSamplingMatrices(nurb: ?*GLUnurbs, model: [*c]const GLfloat, perspective: [*c]const GLfloat, view: [*c]const GLint) void;
pub extern fn gluLookAt(eyeX: GLdouble, eyeY: GLdouble, eyeZ: GLdouble, centerX: GLdouble, centerY: GLdouble, centerZ: GLdouble, upX: GLdouble, upY: GLdouble, upZ: GLdouble) void;
pub extern fn gluNewNurbsRenderer() ?*GLUnurbs;
pub extern fn gluNewQuadric() ?*GLUquadric;
pub extern fn gluNewTess() ?*GLUtesselator;
pub extern fn gluNextContour(tess: ?*GLUtesselator, @"type": GLenum) void;
pub extern fn gluNurbsCallback(nurb: ?*GLUnurbs, which: GLenum, CallBackFunc: ?*const fn (...) callconv(.C) void) void;
pub extern fn gluNurbsCallbackData(nurb: ?*GLUnurbs, userData: ?*GLvoid) void;
pub extern fn gluNurbsCallbackDataEXT(nurb: ?*GLUnurbs, userData: ?*GLvoid) void;
pub extern fn gluNurbsCurve(nurb: ?*GLUnurbs, knotCount: GLint, knots: [*c]GLfloat, stride: GLint, control: [*c]GLfloat, order: GLint, @"type": GLenum) void;
pub extern fn gluNurbsProperty(nurb: ?*GLUnurbs, property: GLenum, value: GLfloat) void;
pub extern fn gluNurbsSurface(nurb: ?*GLUnurbs, sKnotCount: GLint, sKnots: [*c]GLfloat, tKnotCount: GLint, tKnots: [*c]GLfloat, sStride: GLint, tStride: GLint, control: [*c]GLfloat, sOrder: GLint, tOrder: GLint, @"type": GLenum) void;
pub extern fn gluOrtho2D(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble) void;
pub extern fn gluPartialDisk(quad: ?*GLUquadric, inner: GLdouble, outer: GLdouble, slices: GLint, loops: GLint, start: GLdouble, sweep: GLdouble) void;
pub extern fn gluPerspective(fovy: GLdouble, aspect: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn gluPickMatrix(x: GLdouble, y: GLdouble, delX: GLdouble, delY: GLdouble, viewport: [*c]GLint) void;
pub extern fn gluProject(objX: GLdouble, objY: GLdouble, objZ: GLdouble, model: [*c]const GLdouble, proj: [*c]const GLdouble, view: [*c]const GLint, winX: [*c]GLdouble, winY: [*c]GLdouble, winZ: [*c]GLdouble) GLint;
pub extern fn gluPwlCurve(nurb: ?*GLUnurbs, count: GLint, data: [*c]GLfloat, stride: GLint, @"type": GLenum) void;
pub extern fn gluQuadricCallback(quad: ?*GLUquadric, which: GLenum, CallBackFunc: ?*const fn (...) callconv(.C) void) void;
pub extern fn gluQuadricDrawStyle(quad: ?*GLUquadric, draw: GLenum) void;
pub extern fn gluQuadricNormals(quad: ?*GLUquadric, normal: GLenum) void;
pub extern fn gluQuadricOrientation(quad: ?*GLUquadric, orientation: GLenum) void;
pub extern fn gluQuadricTexture(quad: ?*GLUquadric, texture: GLboolean) void;
pub extern fn gluScaleImage(format: GLenum, wIn: GLsizei, hIn: GLsizei, typeIn: GLenum, dataIn: ?*const anyopaque, wOut: GLsizei, hOut: GLsizei, typeOut: GLenum, dataOut: ?*GLvoid) GLint;
pub extern fn gluSphere(quad: ?*GLUquadric, radius: GLdouble, slices: GLint, stacks: GLint) void;
pub extern fn gluTessBeginContour(tess: ?*GLUtesselator) void;
pub extern fn gluTessBeginPolygon(tess: ?*GLUtesselator, data: ?*GLvoid) void;
pub extern fn gluTessCallback(tess: ?*GLUtesselator, which: GLenum, CallBackFunc: ?*const fn (...) callconv(.C) void) void;
pub extern fn gluTessEndContour(tess: ?*GLUtesselator) void;
pub extern fn gluTessEndPolygon(tess: ?*GLUtesselator) void;
pub extern fn gluTessNormal(tess: ?*GLUtesselator, valueX: GLdouble, valueY: GLdouble, valueZ: GLdouble) void;
pub extern fn gluTessProperty(tess: ?*GLUtesselator, which: GLenum, data: GLdouble) void;
pub extern fn gluTessVertex(tess: ?*GLUtesselator, location: [*c]GLdouble, data: ?*GLvoid) void;
pub extern fn gluUnProject(winX: GLdouble, winY: GLdouble, winZ: GLdouble, model: [*c]const GLdouble, proj: [*c]const GLdouble, view: [*c]const GLint, objX: [*c]GLdouble, objY: [*c]GLdouble, objZ: [*c]GLdouble) GLint;
pub extern fn gluUnProject4(winX: GLdouble, winY: GLdouble, winZ: GLdouble, clipW: GLdouble, model: [*c]const GLdouble, proj: [*c]const GLdouble, view: [*c]const GLint, nearPlane: GLdouble, farPlane: GLdouble, objX: [*c]GLdouble, objY: [*c]GLdouble, objZ: [*c]GLdouble, objW: [*c]GLdouble) GLint;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLBLENDCOLORPROC = ?*const fn (GLclampf, GLclampf, GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLBLENDEQUATIONPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFOGCOORDDPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDFPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLWINDOWPOS2DPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const GLintptr = ptrdiff_t;
pub const GLsizeiptr = ptrdiff_t;
pub const PFNGLBEGINQUERYPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBUFFERDATAPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDELETEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLENDQUERYPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGENBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLMAPBUFFERPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPBUFFERPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLATTACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMPILESHADERPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPROC = ?*const fn () callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLDELETEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETESHADERPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDETACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDRAWBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMFVPROC = ?*const fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMIVPROC = ?*const fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISPROGRAMPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSHADERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLINKPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLUNIFORM1FPROC = ?*const fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2FPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3IPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4IPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUSEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCLAMPCOLORPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLEARBUFFERFIPROC = ?*const fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERFVPROC = ?*const fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARBUFFERIVPROC = ?*const fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?*const fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORMASKIPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLDISABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGETBOOLEANI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETSTRINGIPROC = ?*const fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLISENABLEDIPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLUNIFORM1UIPROC = ?*const fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?*const fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGER64I_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?*const fn (GLclampf) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLsizei, ?*GLvoid) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*GLvoid) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?*const fn (GLenum, ?*const GLvoid, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?*const fn (GLenum, GLenum, ?*const GLvoid, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const GLDEBUGPROCAMD = ?*const fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?*const fn (GLDEBUGPROCAMD, ?*anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDELETENAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENNAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLISNAMEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?*const fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGENPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?*const fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?*const fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERANGLEPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORANGLEPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYANGLEPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESANGLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLENDQUERYANGLEPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGENQUERIESANGLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVANGLEPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVANGLEPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISQUERYANGLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLQUERYCOUNTERANGLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLCOPYTEXTURELEVELSAPPLEPROC = ?*const fn (GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLFINISHFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLGENFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSETFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLTESTFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTOBJECTAPPLEPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCLIENTWAITSYNCAPPLEPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLDELETESYNCAPPLEPROC = ?*const fn (GLsync) callconv(.C) void;
pub const PFNGLFENCESYNCAPPLEPROC = ?*const fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLGETINTEGER64VAPPLEPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETSYNCIVAPPLEPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLISSYNCAPPLEPROC = ?*const fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLWAITSYNCAPPLEPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const GLfixed = c_int;
pub const PFNGLCLEARDEPTHFPROC = ?*const fn (GLclampf) callconv(.C) void;
pub const PFNGLDEPTHRANGEFPROC = ?*const fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSHADERBINARYPROC = ?*const fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLBUFFERSTORAGEPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const struct__cl_context = opaque {};
pub const cl_context = ?*struct__cl_context;
pub const struct__cl_event = opaque {};
pub const cl_event = ?*struct__cl_event;
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?*const fn (cl_context, cl_event, GLbitfield) callconv(.C) GLsync;
pub const PFNGLCLEARBUFFERDATAPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLIPCONTROLPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLAMPCOLORARBPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?*const fn (GLintptr) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const GLDEBUGPROCARB = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?*const fn (GLDEBUGPROCARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREUNITPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?*const fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCREATEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEQUERIESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATETEXTURESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?*const fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLDRAWBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLPROGRAMBINARYPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMDVPROC = ?*const fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DPROC = ?*const fn (GLint, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DPROC = ?*const fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?*const fn (GLuint, GLint, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?*const fn (GLint, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?*const fn (GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEPROC = ?*const fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTERPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTERPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLHISTOGRAMPROC = ?*const fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMINMAXPROC = ?*const fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMAPBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?*const fn (GLint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?*const fn (GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?*const fn (GLint, [*c]GLushort) callconv(.C) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLBEGINQUERYARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLENDQUERYARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGENQUERIESARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISQUERYARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETNCOLORTABLEARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNMAPDVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNMINMAXARBPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?*const fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLREADNPIXELSARBPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?*const fn (GLclampf) callconv(.C) void;
pub const PFNGLBINDSAMPLERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDELETESAMPLERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENSAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISSAMPLERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?*const fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?*const fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?*const fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLMEMORYBARRIERPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const GLcharARB = u8;
pub const GLhandleARB = c_uint;
pub const PFNGLATTACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLCOMPILESHADERARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?*const fn () callconv(.C) GLhandleARB;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?*const fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLDELETEOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLDETACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub const PFNGLGETHANDLEARBPROC = ?*const fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLGETINFOLOGARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETUNIFORMFVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLLINKPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1FARBPROC = ?*const fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IARBPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2FARBPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3IARBPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4IARBPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?*const fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?*const fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?*const fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLNAMEDSTRINGARBPROC = ?*const fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLDELETESYNCPROC = ?*const fn (GLsync) callconv(.C) void;
pub const PFNGLFENCESYNCPROC = ?*const fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLGETINTEGER64VPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETSYNCIVPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLISSYNCPROC = ?*const fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTEXBUFFERARBPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKIPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREVIEWPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLQUERYCOUNTERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETUNIFORMINDICESPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBLENDARBPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLWEIGHTBVARBPROC = ?*const fn (GLint, [*c]GLbyte) callconv(.C) void;
pub const PFNGLWEIGHTDVARBPROC = ?*const fn (GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTFVARBPROC = ?*const fn (GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTIVARBPROC = ?*const fn (GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLWEIGHTSVARBPROC = ?*const fn (GLint, [*c]GLshort) callconv(.C) void;
pub const PFNGLWEIGHTUBVARBPROC = ?*const fn (GLint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLWEIGHTUIVARBPROC = ?*const fn (GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLWEIGHTUSVARBPROC = ?*const fn (GLint, [*c]GLushort) callconv(.C) void;
pub const GLintptrARB = ptrdiff_t;
pub const GLsizeiptrARB = ptrdiff_t;
pub const PFNGLBINDBUFFERARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBUFFERDATAARBPROC = ?*const fn (GLenum, GLsizeiptrARB, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*anyopaque) callconv(.C) void;
pub const PFNGLISBUFFERARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLMAPBUFFERARBPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPBUFFERARBPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLBINDPROGRAMARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISPROGRAMARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLCOLORP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLclampd) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?*const fn (GLuint, GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETFLOATI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSCISSORARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2DARBPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?*const fn (GLuint) callconv(.C) GLuint;
pub const PFNGLPASSTEXCOORDATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSAMPLEMAPATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLARRAYOBJECTATIPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?*const fn (GLsizei, ?*const anyopaque, GLenum) callconv(.C) GLuint;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?*const fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?*const fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?*const fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) GLintptr;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLBLENDCOLOREXTPROC = ?*const fn (GLclampf, GLclampf, GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEEXTPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLIPCONTROLEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?*const fn (GLint, GLsizei) callconv(.C) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?*const fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLLABELOBJECTEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?*const fn (GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXPOPEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLDISCARDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLBEGINQUERYEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLENDQUERYEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGENQUERIESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETINTEGER64VEXTPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISQUERYEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLQUERYCOUNTEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLBLENDEQUATIONSEPARATEIEXTPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIEXTPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOLORMASKIEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLDISABLEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLISENABLEDIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const GLeglClientBufferEXT = ?*anyopaque;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFOGCOORDDEXTPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDFEXTPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVEXTPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIEXTPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVEXTPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLIGHTENVIEXTPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIEXTPROC = ?*const fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLHISTOGRAMEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMINMAXEXTPROC = ?*const fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLINDEXFUNCEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMAPBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?*const fn (GLenum, [*c]GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWBUFFERSINDEXEDEXTPROC = ?*const fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLREADBUFFERINDEXEDEXTPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?*const fn (GLuint, GLboolean) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLREADNPIXELSEXTPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLBEGINSCENEEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDSCENEEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLISSEMAPHOREEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?*const fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?*const fn (GLuint) callconv(.C) GLsizei;
pub const PFNGLTEXPAGECOMMITMENTEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIEXTPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDTEXTUREEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTEXTURESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTEXTUREEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTUREVIEWEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINDARRAYSETEXTPROC = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const PFNGLCREATEARRAYSETEXTPROC = ?*const fn () callconv(.C) ?*const anyopaque;
pub const PFNGLDELETEARRAYSETSEXTPROC = ?*const fn (GLsizei, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDPARAMETEREXTPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?*const fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLSETINVARIANTEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLSHADEROP1EXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP2EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP3EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSWIZZLEEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, ?*anyopaque) callconv(.C) void;
pub const PFNGLVARIANTBVEXTPROC = ?*const fn (GLuint, [*c]GLbyte) callconv(.C) void;
pub const PFNGLVARIANTDVEXTPROC = ?*const fn (GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVARIANTFVEXTPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLVARIANTIVEXTPROC = ?*const fn (GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLVARIANTSVEXTPROC = ?*const fn (GLuint, [*c]GLshort) callconv(.C) void;
pub const PFNGLVARIANTUBVEXTPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLVARIANTUIVEXTPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLVARIANTUSVEXTPROC = ?*const fn (GLuint, [*c]GLushort) callconv(.C) void;
pub const PFNGLWRITEMASKEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?*const fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?*const fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?*const fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREHANDLEIMGPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64IMGPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VIMGPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLSYNCTEXTUREINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?*const fn (GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?*const fn ([*c]GLuint) callconv(.C) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?*const fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?*const fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLTEXSCISSORFUNCINTELPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLTEXSCISSORINTELPROC = ?*const fn (GLenum, GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?*const fn () callconv(.C) void;
pub const GLDEBUGPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?*const fn (GLDEBUGPROC, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?*const fn (?*anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELPROC = ?*const fn (?*anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPUSHDEBUGGROUPPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLREADNPIXELSPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLBUFFERREGIONENABLEDPROC = ?*const fn () callconv(.C) GLuint;
pub const PFNGLDELETEBUFFERREGIONPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERREGIONPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint) callconv(.C) void;
pub const PFNGLNEWBUFFERREGIONPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLREADBUFFERREGIONPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?*const fn () callconv(.C) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?*const fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLsync;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSTEREOPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSTEREOPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLENVPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLBLENDBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBLENDPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESTATESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESTATESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?*const fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?*const fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?*const fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGETSTAGEINDEXNVPROC = ?*const fn (GLenum) callconv(.C) GLushort;
pub const PFNGLISCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSTATENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?*const fn (GLuint, GLuint, [*c]?*const anyopaque, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLSTATECAPTURENVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATANVPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDRAWBUFFERSNVPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDNVPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const GLVULKANPROCNV = ?*const fn () callconv(.C) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?*const fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?*const fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub const PFNGLSIGNALVKFENCENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLEVALMAPSNVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLFINISHFENCENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGENFENCESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETFENCEIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFENCENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSETFENCENVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLTESTFENCENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERNVPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64NVPROC = ?*const fn (GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const GLhalf = c_ushort;
pub const PFNGLCOLOR3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLCOLOR4HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLCOLOR4HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLFOGCOORDHNVPROC = ?*const fn (GLhalf) callconv(.C) void;
pub const PFNGLFOGCOORDHVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?*const fn (GLenum, GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?*const fn (GLenum, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?*const fn (GLenum, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?*const fn (GLenum, GLhalf, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?*const fn (GLenum, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLNORMAL3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLNORMAL3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD1HNVPROC = ?*const fn (GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD2HNVPROC = ?*const fn (GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD4HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEX2HNVPROC = ?*const fn (GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLVERTEX2HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEX3HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLVERTEX3HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEX4HNVPROC = ?*const fn (GLhalf, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLVERTEX4HVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?*const fn (GLuint, GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?*const fn (GLuint, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?*const fn (GLuint, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?*const fn (GLuint, GLhalf, GLhalf, GLhalf, GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?*const fn (GLuint, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?*const fn (GLhalf) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?*const fn ([*c]const GLhalf) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?*const fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?*const fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOPYPATHNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDELETEPATHSNVPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLGENPATHSNVPROC = ?*const fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHLENGTHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?*const fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?*const fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLISPATHNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHCOLORGENNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHFOGGENNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?*const fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, [*c]GLuint) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHRANGENVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHSNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHPARAMETERFNVPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERINVPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLPATHSTRINGNVPROC = ?*const fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHTEXGENNVPROC = ?*const fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTALONGPATHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?*const fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPIXELDATARANGENVPROC = ?*const fn (GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOLYGONMODENVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLREADBUFFERNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?*const fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERNVPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?*const fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?*const fn (GLuint, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const GLvdpauSurfaceNV = GLintptr;
pub const PFNGLVDPAUFININVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLVDPAUINITNVPROC = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVDPAUISSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?*const fn (GLuint, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?*const fn (GLsizei) callconv(.C) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLINDEXFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLNORMALFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDPROGRAMNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGENPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?*const fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISPROGRAMNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLOADPROGRAMNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLTRACKMATRIXNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?*const fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDFNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDISABLEINVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEINVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFLOATI_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLISENABLEDINVPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLSCISSORARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDNVPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVNVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEOESPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONOESPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAOESPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIOESPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIOESPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIOESPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIOESPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOLORMASKIOESPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLDISABLEIOESPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIOESPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLISENABLEDIOESPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDFRAMEBUFFEROESPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEROESPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSOESPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLDELETEFRAMEBUFFERSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEROESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPOESPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFEROESPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEROESPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLRENDERBUFFERSTORAGEOESPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYOESPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLPROGRAMBINARYOESPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVOESPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLMAPBUFFEROESPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPBUFFEROESPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLCURRENTPALETTEMATRIXOESPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTEROESPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLWEIGHTPOINTEROESPROC = ?*const fn (GLint, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGOESPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLCLEARDEPTHFOESPROC = ?*const fn (GLclampf) callconv(.C) void;
pub const PFNGLCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?*const fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLFRUSTUMFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLORTHOFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVOESPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVOESPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVOESPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEROESPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEOESPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETTEXGENFVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLTEXGENFOESPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENIOESPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXGENIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXGENXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREVIEWOESPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYOESPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYOESPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.C) void;
pub const PFNGLALPHAFUNCQCOMPROC = ?*const fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLDISABLEDRIVERCONTROLQCOMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEDRIVERCONTROLQCOMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETDRIVERCONTROLSQCOMPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLEXTGETBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETRENDERBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLEXTGETTEXTURESQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ?*const fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETPROGRAMSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETSHADERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTISPROGRAMBINARYQCOMPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLENDTILINGQCOMPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLSTARTTILINGQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.C) void;
pub const GLclampx = c_int;
pub const PFNGLALPHAFUNCXPROC = ?*const fn (GLenum, GLclampx) callconv(.C) void;
pub const PFNGLCLEARCOLORXPROC = ?*const fn (GLclampx, GLclampx, GLclampx, GLclampx) callconv(.C) void;
pub const PFNGLCLEARDEPTHXPROC = ?*const fn (GLclampx) callconv(.C) void;
pub const PFNGLCOLOR4XPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDEPTHRANGEXPROC = ?*const fn (GLclampx, GLclampx) callconv(.C) void;
pub const PFNGLFOGXPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXVPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFRUSTUMFPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRUSTUMXPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLINEWIDTHXPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLLOADMATRIXXPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTMATRIXXPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLORTHOFPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLORTHOXPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEXPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLROTATEXPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEXPROC = ?*const fn (GLclampx, GLboolean) callconv(.C) void;
pub const PFNGLSCALEXPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTRANSLATEXPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEFPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEXPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFIXEDVPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXENVXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEPOINTEROESPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLERRORSTRINGREGALPROC = ?*const fn (GLenum) callconv(.C) [*c]const GLchar;
pub const PFNGLGETEXTENSIONREGALPROC = ?*const fn ([*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLISSUPPORTEDREGALPROC = ?*const fn ([*c]const GLchar) callconv(.C) GLboolean;
pub const GLLOGPROCREGAL = ?*const fn (GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.C) void;
pub const PFNGLLOGMESSAGECALLBACKREGALPROC = ?*const fn (GLLOGPROCREGAL) callconv(.C) void;
pub const PFNGLGETPROCADDRESSREGALPROC = ?*const fn ([*c]const GLchar) callconv(.C) ?*anyopaque;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFOGFUNCSGISPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLINTERLEAVEDTEXTURECOORDSETSSGISPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLSELECTTEXTURECOORDSETSGISPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSELECTTEXTURESGISPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSELECTTEXTURETRANSFORMSGISPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMULTISAMPLESUBRECTPOSSGISPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?*const fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLISASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPOLLASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLADDRESSSPACEPROC = ?*const fn (GLenum, GLbitfield) callconv(.C) void;
pub const PFNGLDATAPIPEPROC = ?*const fn (GLenum) callconv(.C) GLint;
pub const PFNGLFLUSHRASTERSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFOGLAYERSSGIXPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFOGLAYERSSGIXPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREFOGSGIXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?*const fn (GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLALLOCMPEGPREDICTORSSGIXPROC = ?*const fn (GLsizei, GLsizei, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEMPEGPREDICTORSSGIXPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENMPEGPREDICTORSSGIXPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMPEGPARAMETERFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMPEGPARAMETERIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMPEGPREDICTORSGIXPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMPEGQUANTTABLEUBVPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLISMPEGPREDICTORSGIXPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLMPEGPREDICTORSGIXPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLMPEGQUANTTABLEUBVPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLSWAPMPEGPREDICTORSSGIXPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETNONLINLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNONLINMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNONLINLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLNONLINMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLDEFORMSGIXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLMESHBREADTHSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLMESHSTRIDESGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGETVECTOROPERATIONSGIXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLVECTOROPERATIONSGIXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLAREVERTEXARRAYSRESIDENTSGIXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDVERTEXARRAYSGIXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSSGIXPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSSGIXPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYSGIXPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPRIORITIZEVERTEXARRAYSSGIXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFSGIPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERISGIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMSGIPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?*const fn (GLbyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?*const fn (GLshort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?*const fn (GLubyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?*const fn (GLushort) callconv(.C) void;
pub const PFNGLREADVIDEOPIXELSSUNPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?*const fn (GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?*const fn (GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLADDSWAPHINTRECTWINPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var __glewCopyTexSubImage3D: PFNGLCOPYTEXSUBIMAGE3DPROC;
pub extern var __glewDrawRangeElements: PFNGLDRAWRANGEELEMENTSPROC;
pub extern var __glewTexImage3D: PFNGLTEXIMAGE3DPROC;
pub extern var __glewTexSubImage3D: PFNGLTEXSUBIMAGE3DPROC;
pub extern var __glewActiveTexture: PFNGLACTIVETEXTUREPROC;
pub extern var __glewClientActiveTexture: PFNGLCLIENTACTIVETEXTUREPROC;
pub extern var __glewCompressedTexImage1D: PFNGLCOMPRESSEDTEXIMAGE1DPROC;
pub extern var __glewCompressedTexImage2D: PFNGLCOMPRESSEDTEXIMAGE2DPROC;
pub extern var __glewCompressedTexImage3D: PFNGLCOMPRESSEDTEXIMAGE3DPROC;
pub extern var __glewCompressedTexSubImage1D: PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC;
pub extern var __glewCompressedTexSubImage2D: PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC;
pub extern var __glewCompressedTexSubImage3D: PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC;
pub extern var __glewGetCompressedTexImage: PFNGLGETCOMPRESSEDTEXIMAGEPROC;
pub extern var __glewLoadTransposeMatrixd: PFNGLLOADTRANSPOSEMATRIXDPROC;
pub extern var __glewLoadTransposeMatrixf: PFNGLLOADTRANSPOSEMATRIXFPROC;
pub extern var __glewMultTransposeMatrixd: PFNGLMULTTRANSPOSEMATRIXDPROC;
pub extern var __glewMultTransposeMatrixf: PFNGLMULTTRANSPOSEMATRIXFPROC;
pub extern var __glewMultiTexCoord1d: PFNGLMULTITEXCOORD1DPROC;
pub extern var __glewMultiTexCoord1dv: PFNGLMULTITEXCOORD1DVPROC;
pub extern var __glewMultiTexCoord1f: PFNGLMULTITEXCOORD1FPROC;
pub extern var __glewMultiTexCoord1fv: PFNGLMULTITEXCOORD1FVPROC;
pub extern var __glewMultiTexCoord1i: PFNGLMULTITEXCOORD1IPROC;
pub extern var __glewMultiTexCoord1iv: PFNGLMULTITEXCOORD1IVPROC;
pub extern var __glewMultiTexCoord1s: PFNGLMULTITEXCOORD1SPROC;
pub extern var __glewMultiTexCoord1sv: PFNGLMULTITEXCOORD1SVPROC;
pub extern var __glewMultiTexCoord2d: PFNGLMULTITEXCOORD2DPROC;
pub extern var __glewMultiTexCoord2dv: PFNGLMULTITEXCOORD2DVPROC;
pub extern var __glewMultiTexCoord2f: PFNGLMULTITEXCOORD2FPROC;
pub extern var __glewMultiTexCoord2fv: PFNGLMULTITEXCOORD2FVPROC;
pub extern var __glewMultiTexCoord2i: PFNGLMULTITEXCOORD2IPROC;
pub extern var __glewMultiTexCoord2iv: PFNGLMULTITEXCOORD2IVPROC;
pub extern var __glewMultiTexCoord2s: PFNGLMULTITEXCOORD2SPROC;
pub extern var __glewMultiTexCoord2sv: PFNGLMULTITEXCOORD2SVPROC;
pub extern var __glewMultiTexCoord3d: PFNGLMULTITEXCOORD3DPROC;
pub extern var __glewMultiTexCoord3dv: PFNGLMULTITEXCOORD3DVPROC;
pub extern var __glewMultiTexCoord3f: PFNGLMULTITEXCOORD3FPROC;
pub extern var __glewMultiTexCoord3fv: PFNGLMULTITEXCOORD3FVPROC;
pub extern var __glewMultiTexCoord3i: PFNGLMULTITEXCOORD3IPROC;
pub extern var __glewMultiTexCoord3iv: PFNGLMULTITEXCOORD3IVPROC;
pub extern var __glewMultiTexCoord3s: PFNGLMULTITEXCOORD3SPROC;
pub extern var __glewMultiTexCoord3sv: PFNGLMULTITEXCOORD3SVPROC;
pub extern var __glewMultiTexCoord4d: PFNGLMULTITEXCOORD4DPROC;
pub extern var __glewMultiTexCoord4dv: PFNGLMULTITEXCOORD4DVPROC;
pub extern var __glewMultiTexCoord4f: PFNGLMULTITEXCOORD4FPROC;
pub extern var __glewMultiTexCoord4fv: PFNGLMULTITEXCOORD4FVPROC;
pub extern var __glewMultiTexCoord4i: PFNGLMULTITEXCOORD4IPROC;
pub extern var __glewMultiTexCoord4iv: PFNGLMULTITEXCOORD4IVPROC;
pub extern var __glewMultiTexCoord4s: PFNGLMULTITEXCOORD4SPROC;
pub extern var __glewMultiTexCoord4sv: PFNGLMULTITEXCOORD4SVPROC;
pub extern var __glewSampleCoverage: PFNGLSAMPLECOVERAGEPROC;
pub extern var __glewBlendColor: PFNGLBLENDCOLORPROC;
pub extern var __glewBlendEquation: PFNGLBLENDEQUATIONPROC;
pub extern var __glewBlendFuncSeparate: PFNGLBLENDFUNCSEPARATEPROC;
pub extern var __glewFogCoordPointer: PFNGLFOGCOORDPOINTERPROC;
pub extern var __glewFogCoordd: PFNGLFOGCOORDDPROC;
pub extern var __glewFogCoorddv: PFNGLFOGCOORDDVPROC;
pub extern var __glewFogCoordf: PFNGLFOGCOORDFPROC;
pub extern var __glewFogCoordfv: PFNGLFOGCOORDFVPROC;
pub extern var __glewMultiDrawArrays: PFNGLMULTIDRAWARRAYSPROC;
pub extern var __glewMultiDrawElements: PFNGLMULTIDRAWELEMENTSPROC;
pub extern var __glewPointParameterf: PFNGLPOINTPARAMETERFPROC;
pub extern var __glewPointParameterfv: PFNGLPOINTPARAMETERFVPROC;
pub extern var __glewPointParameteri: PFNGLPOINTPARAMETERIPROC;
pub extern var __glewPointParameteriv: PFNGLPOINTPARAMETERIVPROC;
pub extern var __glewSecondaryColor3b: PFNGLSECONDARYCOLOR3BPROC;
pub extern var __glewSecondaryColor3bv: PFNGLSECONDARYCOLOR3BVPROC;
pub extern var __glewSecondaryColor3d: PFNGLSECONDARYCOLOR3DPROC;
pub extern var __glewSecondaryColor3dv: PFNGLSECONDARYCOLOR3DVPROC;
pub extern var __glewSecondaryColor3f: PFNGLSECONDARYCOLOR3FPROC;
pub extern var __glewSecondaryColor3fv: PFNGLSECONDARYCOLOR3FVPROC;
pub extern var __glewSecondaryColor3i: PFNGLSECONDARYCOLOR3IPROC;
pub extern var __glewSecondaryColor3iv: PFNGLSECONDARYCOLOR3IVPROC;
pub extern var __glewSecondaryColor3s: PFNGLSECONDARYCOLOR3SPROC;
pub extern var __glewSecondaryColor3sv: PFNGLSECONDARYCOLOR3SVPROC;
pub extern var __glewSecondaryColor3ub: PFNGLSECONDARYCOLOR3UBPROC;
pub extern var __glewSecondaryColor3ubv: PFNGLSECONDARYCOLOR3UBVPROC;
pub extern var __glewSecondaryColor3ui: PFNGLSECONDARYCOLOR3UIPROC;
pub extern var __glewSecondaryColor3uiv: PFNGLSECONDARYCOLOR3UIVPROC;
pub extern var __glewSecondaryColor3us: PFNGLSECONDARYCOLOR3USPROC;
pub extern var __glewSecondaryColor3usv: PFNGLSECONDARYCOLOR3USVPROC;
pub extern var __glewSecondaryColorPointer: PFNGLSECONDARYCOLORPOINTERPROC;
pub extern var __glewWindowPos2d: PFNGLWINDOWPOS2DPROC;
pub extern var __glewWindowPos2dv: PFNGLWINDOWPOS2DVPROC;
pub extern var __glewWindowPos2f: PFNGLWINDOWPOS2FPROC;
pub extern var __glewWindowPos2fv: PFNGLWINDOWPOS2FVPROC;
pub extern var __glewWindowPos2i: PFNGLWINDOWPOS2IPROC;
pub extern var __glewWindowPos2iv: PFNGLWINDOWPOS2IVPROC;
pub extern var __glewWindowPos2s: PFNGLWINDOWPOS2SPROC;
pub extern var __glewWindowPos2sv: PFNGLWINDOWPOS2SVPROC;
pub extern var __glewWindowPos3d: PFNGLWINDOWPOS3DPROC;
pub extern var __glewWindowPos3dv: PFNGLWINDOWPOS3DVPROC;
pub extern var __glewWindowPos3f: PFNGLWINDOWPOS3FPROC;
pub extern var __glewWindowPos3fv: PFNGLWINDOWPOS3FVPROC;
pub extern var __glewWindowPos3i: PFNGLWINDOWPOS3IPROC;
pub extern var __glewWindowPos3iv: PFNGLWINDOWPOS3IVPROC;
pub extern var __glewWindowPos3s: PFNGLWINDOWPOS3SPROC;
pub extern var __glewWindowPos3sv: PFNGLWINDOWPOS3SVPROC;
pub extern var __glewBeginQuery: PFNGLBEGINQUERYPROC;
pub extern var __glewBindBuffer: PFNGLBINDBUFFERPROC;
pub extern var __glewBufferData: PFNGLBUFFERDATAPROC;
pub extern var __glewBufferSubData: PFNGLBUFFERSUBDATAPROC;
pub extern var __glewDeleteBuffers: PFNGLDELETEBUFFERSPROC;
pub extern var __glewDeleteQueries: PFNGLDELETEQUERIESPROC;
pub extern var __glewEndQuery: PFNGLENDQUERYPROC;
pub extern var __glewGenBuffers: PFNGLGENBUFFERSPROC;
pub extern var __glewGenQueries: PFNGLGENQUERIESPROC;
pub extern var __glewGetBufferParameteriv: PFNGLGETBUFFERPARAMETERIVPROC;
pub extern var __glewGetBufferPointerv: PFNGLGETBUFFERPOINTERVPROC;
pub extern var __glewGetBufferSubData: PFNGLGETBUFFERSUBDATAPROC;
pub extern var __glewGetQueryObjectiv: PFNGLGETQUERYOBJECTIVPROC;
pub extern var __glewGetQueryObjectuiv: PFNGLGETQUERYOBJECTUIVPROC;
pub extern var __glewGetQueryiv: PFNGLGETQUERYIVPROC;
pub extern var __glewIsBuffer: PFNGLISBUFFERPROC;
pub extern var __glewIsQuery: PFNGLISQUERYPROC;
pub extern var __glewMapBuffer: PFNGLMAPBUFFERPROC;
pub extern var __glewUnmapBuffer: PFNGLUNMAPBUFFERPROC;
pub extern var __glewAttachShader: PFNGLATTACHSHADERPROC;
pub extern var __glewBindAttribLocation: PFNGLBINDATTRIBLOCATIONPROC;
pub extern var __glewBlendEquationSeparate: PFNGLBLENDEQUATIONSEPARATEPROC;
pub extern var __glewCompileShader: PFNGLCOMPILESHADERPROC;
pub extern var __glewCreateProgram: PFNGLCREATEPROGRAMPROC;
pub extern var __glewCreateShader: PFNGLCREATESHADERPROC;
pub extern var __glewDeleteProgram: PFNGLDELETEPROGRAMPROC;
pub extern var __glewDeleteShader: PFNGLDELETESHADERPROC;
pub extern var __glewDetachShader: PFNGLDETACHSHADERPROC;
pub extern var __glewDisableVertexAttribArray: PFNGLDISABLEVERTEXATTRIBARRAYPROC;
pub extern var __glewDrawBuffers: PFNGLDRAWBUFFERSPROC;
pub extern var __glewEnableVertexAttribArray: PFNGLENABLEVERTEXATTRIBARRAYPROC;
pub extern var __glewGetActiveAttrib: PFNGLGETACTIVEATTRIBPROC;
pub extern var __glewGetActiveUniform: PFNGLGETACTIVEUNIFORMPROC;
pub extern var __glewGetAttachedShaders: PFNGLGETATTACHEDSHADERSPROC;
pub extern var __glewGetAttribLocation: PFNGLGETATTRIBLOCATIONPROC;
pub extern var __glewGetProgramInfoLog: PFNGLGETPROGRAMINFOLOGPROC;
pub extern var __glewGetProgramiv: PFNGLGETPROGRAMIVPROC;
pub extern var __glewGetShaderInfoLog: PFNGLGETSHADERINFOLOGPROC;
pub extern var __glewGetShaderSource: PFNGLGETSHADERSOURCEPROC;
pub extern var __glewGetShaderiv: PFNGLGETSHADERIVPROC;
pub extern var __glewGetUniformLocation: PFNGLGETUNIFORMLOCATIONPROC;
pub extern var __glewGetUniformfv: PFNGLGETUNIFORMFVPROC;
pub extern var __glewGetUniformiv: PFNGLGETUNIFORMIVPROC;
pub extern var __glewGetVertexAttribPointerv: PFNGLGETVERTEXATTRIBPOINTERVPROC;
pub extern var __glewGetVertexAttribdv: PFNGLGETVERTEXATTRIBDVPROC;
pub extern var __glewGetVertexAttribfv: PFNGLGETVERTEXATTRIBFVPROC;
pub extern var __glewGetVertexAttribiv: PFNGLGETVERTEXATTRIBIVPROC;
pub extern var __glewIsProgram: PFNGLISPROGRAMPROC;
pub extern var __glewIsShader: PFNGLISSHADERPROC;
pub extern var __glewLinkProgram: PFNGLLINKPROGRAMPROC;
pub extern var __glewShaderSource: PFNGLSHADERSOURCEPROC;
pub extern var __glewStencilFuncSeparate: PFNGLSTENCILFUNCSEPARATEPROC;
pub extern var __glewStencilMaskSeparate: PFNGLSTENCILMASKSEPARATEPROC;
pub extern var __glewStencilOpSeparate: PFNGLSTENCILOPSEPARATEPROC;
pub extern var __glewUniform1f: PFNGLUNIFORM1FPROC;
pub extern var __glewUniform1fv: PFNGLUNIFORM1FVPROC;
pub extern var __glewUniform1i: PFNGLUNIFORM1IPROC;
pub extern var __glewUniform1iv: PFNGLUNIFORM1IVPROC;
pub extern var __glewUniform2f: PFNGLUNIFORM2FPROC;
pub extern var __glewUniform2fv: PFNGLUNIFORM2FVPROC;
pub extern var __glewUniform2i: PFNGLUNIFORM2IPROC;
pub extern var __glewUniform2iv: PFNGLUNIFORM2IVPROC;
pub extern var __glewUniform3f: PFNGLUNIFORM3FPROC;
pub extern var __glewUniform3fv: PFNGLUNIFORM3FVPROC;
pub extern var __glewUniform3i: PFNGLUNIFORM3IPROC;
pub extern var __glewUniform3iv: PFNGLUNIFORM3IVPROC;
pub extern var __glewUniform4f: PFNGLUNIFORM4FPROC;
pub extern var __glewUniform4fv: PFNGLUNIFORM4FVPROC;
pub extern var __glewUniform4i: PFNGLUNIFORM4IPROC;
pub extern var __glewUniform4iv: PFNGLUNIFORM4IVPROC;
pub extern var __glewUniformMatrix2fv: PFNGLUNIFORMMATRIX2FVPROC;
pub extern var __glewUniformMatrix3fv: PFNGLUNIFORMMATRIX3FVPROC;
pub extern var __glewUniformMatrix4fv: PFNGLUNIFORMMATRIX4FVPROC;
pub extern var __glewUseProgram: PFNGLUSEPROGRAMPROC;
pub extern var __glewValidateProgram: PFNGLVALIDATEPROGRAMPROC;
pub extern var __glewVertexAttrib1d: PFNGLVERTEXATTRIB1DPROC;
pub extern var __glewVertexAttrib1dv: PFNGLVERTEXATTRIB1DVPROC;
pub extern var __glewVertexAttrib1f: PFNGLVERTEXATTRIB1FPROC;
pub extern var __glewVertexAttrib1fv: PFNGLVERTEXATTRIB1FVPROC;
pub extern var __glewVertexAttrib1s: PFNGLVERTEXATTRIB1SPROC;
pub extern var __glewVertexAttrib1sv: PFNGLVERTEXATTRIB1SVPROC;
pub extern var __glewVertexAttrib2d: PFNGLVERTEXATTRIB2DPROC;
pub extern var __glewVertexAttrib2dv: PFNGLVERTEXATTRIB2DVPROC;
pub extern var __glewVertexAttrib2f: PFNGLVERTEXATTRIB2FPROC;
pub extern var __glewVertexAttrib2fv: PFNGLVERTEXATTRIB2FVPROC;
pub extern var __glewVertexAttrib2s: PFNGLVERTEXATTRIB2SPROC;
pub extern var __glewVertexAttrib2sv: PFNGLVERTEXATTRIB2SVPROC;
pub extern var __glewVertexAttrib3d: PFNGLVERTEXATTRIB3DPROC;
pub extern var __glewVertexAttrib3dv: PFNGLVERTEXATTRIB3DVPROC;
pub extern var __glewVertexAttrib3f: PFNGLVERTEXATTRIB3FPROC;
pub extern var __glewVertexAttrib3fv: PFNGLVERTEXATTRIB3FVPROC;
pub extern var __glewVertexAttrib3s: PFNGLVERTEXATTRIB3SPROC;
pub extern var __glewVertexAttrib3sv: PFNGLVERTEXATTRIB3SVPROC;
pub extern var __glewVertexAttrib4Nbv: PFNGLVERTEXATTRIB4NBVPROC;
pub extern var __glewVertexAttrib4Niv: PFNGLVERTEXATTRIB4NIVPROC;
pub extern var __glewVertexAttrib4Nsv: PFNGLVERTEXATTRIB4NSVPROC;
pub extern var __glewVertexAttrib4Nub: PFNGLVERTEXATTRIB4NUBPROC;
pub extern var __glewVertexAttrib4Nubv: PFNGLVERTEXATTRIB4NUBVPROC;
pub extern var __glewVertexAttrib4Nuiv: PFNGLVERTEXATTRIB4NUIVPROC;
pub extern var __glewVertexAttrib4Nusv: PFNGLVERTEXATTRIB4NUSVPROC;
pub extern var __glewVertexAttrib4bv: PFNGLVERTEXATTRIB4BVPROC;
pub extern var __glewVertexAttrib4d: PFNGLVERTEXATTRIB4DPROC;
pub extern var __glewVertexAttrib4dv: PFNGLVERTEXATTRIB4DVPROC;
pub extern var __glewVertexAttrib4f: PFNGLVERTEXATTRIB4FPROC;
pub extern var __glewVertexAttrib4fv: PFNGLVERTEXATTRIB4FVPROC;
pub extern var __glewVertexAttrib4iv: PFNGLVERTEXATTRIB4IVPROC;
pub extern var __glewVertexAttrib4s: PFNGLVERTEXATTRIB4SPROC;
pub extern var __glewVertexAttrib4sv: PFNGLVERTEXATTRIB4SVPROC;
pub extern var __glewVertexAttrib4ubv: PFNGLVERTEXATTRIB4UBVPROC;
pub extern var __glewVertexAttrib4uiv: PFNGLVERTEXATTRIB4UIVPROC;
pub extern var __glewVertexAttrib4usv: PFNGLVERTEXATTRIB4USVPROC;
pub extern var __glewVertexAttribPointer: PFNGLVERTEXATTRIBPOINTERPROC;
pub extern var __glewUniformMatrix2x3fv: PFNGLUNIFORMMATRIX2X3FVPROC;
pub extern var __glewUniformMatrix2x4fv: PFNGLUNIFORMMATRIX2X4FVPROC;
pub extern var __glewUniformMatrix3x2fv: PFNGLUNIFORMMATRIX3X2FVPROC;
pub extern var __glewUniformMatrix3x4fv: PFNGLUNIFORMMATRIX3X4FVPROC;
pub extern var __glewUniformMatrix4x2fv: PFNGLUNIFORMMATRIX4X2FVPROC;
pub extern var __glewUniformMatrix4x3fv: PFNGLUNIFORMMATRIX4X3FVPROC;
pub extern var __glewBeginConditionalRender: PFNGLBEGINCONDITIONALRENDERPROC;
pub extern var __glewBeginTransformFeedback: PFNGLBEGINTRANSFORMFEEDBACKPROC;
pub extern var __glewBindFragDataLocation: PFNGLBINDFRAGDATALOCATIONPROC;
pub extern var __glewClampColor: PFNGLCLAMPCOLORPROC;
pub extern var __glewClearBufferfi: PFNGLCLEARBUFFERFIPROC;
pub extern var __glewClearBufferfv: PFNGLCLEARBUFFERFVPROC;
pub extern var __glewClearBufferiv: PFNGLCLEARBUFFERIVPROC;
pub extern var __glewClearBufferuiv: PFNGLCLEARBUFFERUIVPROC;
pub extern var __glewColorMaski: PFNGLCOLORMASKIPROC;
pub extern var __glewDisablei: PFNGLDISABLEIPROC;
pub extern var __glewEnablei: PFNGLENABLEIPROC;
pub extern var __glewEndConditionalRender: PFNGLENDCONDITIONALRENDERPROC;
pub extern var __glewEndTransformFeedback: PFNGLENDTRANSFORMFEEDBACKPROC;
pub extern var __glewGetBooleani_v: PFNGLGETBOOLEANI_VPROC;
pub extern var __glewGetFragDataLocation: PFNGLGETFRAGDATALOCATIONPROC;
pub extern var __glewGetStringi: PFNGLGETSTRINGIPROC;
pub extern var __glewGetTexParameterIiv: PFNGLGETTEXPARAMETERIIVPROC;
pub extern var __glewGetTexParameterIuiv: PFNGLGETTEXPARAMETERIUIVPROC;
pub extern var __glewGetTransformFeedbackVarying: PFNGLGETTRANSFORMFEEDBACKVARYINGPROC;
pub extern var __glewGetUniformuiv: PFNGLGETUNIFORMUIVPROC;
pub extern var __glewGetVertexAttribIiv: PFNGLGETVERTEXATTRIBIIVPROC;
pub extern var __glewGetVertexAttribIuiv: PFNGLGETVERTEXATTRIBIUIVPROC;
pub extern var __glewIsEnabledi: PFNGLISENABLEDIPROC;
pub extern var __glewTexParameterIiv: PFNGLTEXPARAMETERIIVPROC;
pub extern var __glewTexParameterIuiv: PFNGLTEXPARAMETERIUIVPROC;
pub extern var __glewTransformFeedbackVaryings: PFNGLTRANSFORMFEEDBACKVARYINGSPROC;
pub extern var __glewUniform1ui: PFNGLUNIFORM1UIPROC;
pub extern var __glewUniform1uiv: PFNGLUNIFORM1UIVPROC;
pub extern var __glewUniform2ui: PFNGLUNIFORM2UIPROC;
pub extern var __glewUniform2uiv: PFNGLUNIFORM2UIVPROC;
pub extern var __glewUniform3ui: PFNGLUNIFORM3UIPROC;
pub extern var __glewUniform3uiv: PFNGLUNIFORM3UIVPROC;
pub extern var __glewUniform4ui: PFNGLUNIFORM4UIPROC;
pub extern var __glewUniform4uiv: PFNGLUNIFORM4UIVPROC;
pub extern var __glewVertexAttribI1i: PFNGLVERTEXATTRIBI1IPROC;
pub extern var __glewVertexAttribI1iv: PFNGLVERTEXATTRIBI1IVPROC;
pub extern var __glewVertexAttribI1ui: PFNGLVERTEXATTRIBI1UIPROC;
pub extern var __glewVertexAttribI1uiv: PFNGLVERTEXATTRIBI1UIVPROC;
pub extern var __glewVertexAttribI2i: PFNGLVERTEXATTRIBI2IPROC;
pub extern var __glewVertexAttribI2iv: PFNGLVERTEXATTRIBI2IVPROC;
pub extern var __glewVertexAttribI2ui: PFNGLVERTEXATTRIBI2UIPROC;
pub extern var __glewVertexAttribI2uiv: PFNGLVERTEXATTRIBI2UIVPROC;
pub extern var __glewVertexAttribI3i: PFNGLVERTEXATTRIBI3IPROC;
pub extern var __glewVertexAttribI3iv: PFNGLVERTEXATTRIBI3IVPROC;
pub extern var __glewVertexAttribI3ui: PFNGLVERTEXATTRIBI3UIPROC;
pub extern var __glewVertexAttribI3uiv: PFNGLVERTEXATTRIBI3UIVPROC;
pub extern var __glewVertexAttribI4bv: PFNGLVERTEXATTRIBI4BVPROC;
pub extern var __glewVertexAttribI4i: PFNGLVERTEXATTRIBI4IPROC;
pub extern var __glewVertexAttribI4iv: PFNGLVERTEXATTRIBI4IVPROC;
pub extern var __glewVertexAttribI4sv: PFNGLVERTEXATTRIBI4SVPROC;
pub extern var __glewVertexAttribI4ubv: PFNGLVERTEXATTRIBI4UBVPROC;
pub extern var __glewVertexAttribI4ui: PFNGLVERTEXATTRIBI4UIPROC;
pub extern var __glewVertexAttribI4uiv: PFNGLVERTEXATTRIBI4UIVPROC;
pub extern var __glewVertexAttribI4usv: PFNGLVERTEXATTRIBI4USVPROC;
pub extern var __glewVertexAttribIPointer: PFNGLVERTEXATTRIBIPOINTERPROC;
pub extern var __glewDrawArraysInstanced: PFNGLDRAWARRAYSINSTANCEDPROC;
pub extern var __glewDrawElementsInstanced: PFNGLDRAWELEMENTSINSTANCEDPROC;
pub extern var __glewPrimitiveRestartIndex: PFNGLPRIMITIVERESTARTINDEXPROC;
pub extern var __glewTexBuffer: PFNGLTEXBUFFERPROC;
pub extern var __glewFramebufferTexture: PFNGLFRAMEBUFFERTEXTUREPROC;
pub extern var __glewGetBufferParameteri64v: PFNGLGETBUFFERPARAMETERI64VPROC;
pub extern var __glewGetInteger64i_v: PFNGLGETINTEGER64I_VPROC;
pub extern var __glewVertexAttribDivisor: PFNGLVERTEXATTRIBDIVISORPROC;
pub extern var __glewBlendEquationSeparatei: PFNGLBLENDEQUATIONSEPARATEIPROC;
pub extern var __glewBlendEquationi: PFNGLBLENDEQUATIONIPROC;
pub extern var __glewBlendFuncSeparatei: PFNGLBLENDFUNCSEPARATEIPROC;
pub extern var __glewBlendFunci: PFNGLBLENDFUNCIPROC;
pub extern var __glewMinSampleShading: PFNGLMINSAMPLESHADINGPROC;
pub extern var __glewGetGraphicsResetStatus: PFNGLGETGRAPHICSRESETSTATUSPROC;
pub extern var __glewGetnCompressedTexImage: PFNGLGETNCOMPRESSEDTEXIMAGEPROC;
pub extern var __glewGetnTexImage: PFNGLGETNTEXIMAGEPROC;
pub extern var __glewGetnUniformdv: PFNGLGETNUNIFORMDVPROC;
pub extern var __glewMultiDrawArraysIndirectCount: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC;
pub extern var __glewMultiDrawElementsIndirectCount: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC;
pub extern var __glewSpecializeShader: PFNGLSPECIALIZESHADERPROC;
pub extern var __glewTbufferMask3DFX: PFNGLTBUFFERMASK3DFXPROC;
pub extern var __glewDebugMessageCallbackAMD: PFNGLDEBUGMESSAGECALLBACKAMDPROC;
pub extern var __glewDebugMessageEnableAMD: PFNGLDEBUGMESSAGEENABLEAMDPROC;
pub extern var __glewDebugMessageInsertAMD: PFNGLDEBUGMESSAGEINSERTAMDPROC;
pub extern var __glewGetDebugMessageLogAMD: PFNGLGETDEBUGMESSAGELOGAMDPROC;
pub extern var __glewBlendEquationIndexedAMD: PFNGLBLENDEQUATIONINDEXEDAMDPROC;
pub extern var __glewBlendEquationSeparateIndexedAMD: PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC;
pub extern var __glewBlendFuncIndexedAMD: PFNGLBLENDFUNCINDEXEDAMDPROC;
pub extern var __glewBlendFuncSeparateIndexedAMD: PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC;
pub extern var __glewNamedRenderbufferStorageMultisampleAdvancedAMD: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC;
pub extern var __glewRenderbufferStorageMultisampleAdvancedAMD: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC;
pub extern var __glewFramebufferSamplePositionsfvAMD: PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC;
pub extern var __glewGetFramebufferParameterfvAMD: PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC;
pub extern var __glewGetNamedFramebufferParameterfvAMD: PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC;
pub extern var __glewNamedFramebufferSamplePositionsfvAMD: PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC;
pub extern var __glewVertexAttribParameteriAMD: PFNGLVERTEXATTRIBPARAMETERIAMDPROC;
pub extern var __glewMultiDrawArraysIndirectAMD: PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC;
pub extern var __glewMultiDrawElementsIndirectAMD: PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC;
pub extern var __glewDeleteNamesAMD: PFNGLDELETENAMESAMDPROC;
pub extern var __glewGenNamesAMD: PFNGLGENNAMESAMDPROC;
pub extern var __glewIsNameAMD: PFNGLISNAMEAMDPROC;
pub extern var __glewQueryObjectParameteruiAMD: PFNGLQUERYOBJECTPARAMETERUIAMDPROC;
pub extern var __glewBeginPerfMonitorAMD: PFNGLBEGINPERFMONITORAMDPROC;
pub extern var __glewDeletePerfMonitorsAMD: PFNGLDELETEPERFMONITORSAMDPROC;
pub extern var __glewEndPerfMonitorAMD: PFNGLENDPERFMONITORAMDPROC;
pub extern var __glewGenPerfMonitorsAMD: PFNGLGENPERFMONITORSAMDPROC;
pub extern var __glewGetPerfMonitorCounterDataAMD: PFNGLGETPERFMONITORCOUNTERDATAAMDPROC;
pub extern var __glewGetPerfMonitorCounterInfoAMD: PFNGLGETPERFMONITORCOUNTERINFOAMDPROC;
pub extern var __glewGetPerfMonitorCounterStringAMD: PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC;
pub extern var __glewGetPerfMonitorCountersAMD: PFNGLGETPERFMONITORCOUNTERSAMDPROC;
pub extern var __glewGetPerfMonitorGroupStringAMD: PFNGLGETPERFMONITORGROUPSTRINGAMDPROC;
pub extern var __glewGetPerfMonitorGroupsAMD: PFNGLGETPERFMONITORGROUPSAMDPROC;
pub extern var __glewSelectPerfMonitorCountersAMD: PFNGLSELECTPERFMONITORCOUNTERSAMDPROC;
pub extern var __glewSetMultisamplefvAMD: PFNGLSETMULTISAMPLEFVAMDPROC;
pub extern var __glewTexStorageSparseAMD: PFNGLTEXSTORAGESPARSEAMDPROC;
pub extern var __glewTextureStorageSparseAMD: PFNGLTEXTURESTORAGESPARSEAMDPROC;
pub extern var __glewStencilOpValueAMD: PFNGLSTENCILOPVALUEAMDPROC;
pub extern var __glewTessellationFactorAMD: PFNGLTESSELLATIONFACTORAMDPROC;
pub extern var __glewTessellationModeAMD: PFNGLTESSELLATIONMODEAMDPROC;
pub extern var __glewBlitFramebufferANGLE: PFNGLBLITFRAMEBUFFERANGLEPROC;
pub extern var __glewRenderbufferStorageMultisampleANGLE: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC;
pub extern var __glewDrawArraysInstancedANGLE: PFNGLDRAWARRAYSINSTANCEDANGLEPROC;
pub extern var __glewDrawElementsInstancedANGLE: PFNGLDRAWELEMENTSINSTANCEDANGLEPROC;
pub extern var __glewVertexAttribDivisorANGLE: PFNGLVERTEXATTRIBDIVISORANGLEPROC;
pub extern var __glewBeginQueryANGLE: PFNGLBEGINQUERYANGLEPROC;
pub extern var __glewDeleteQueriesANGLE: PFNGLDELETEQUERIESANGLEPROC;
pub extern var __glewEndQueryANGLE: PFNGLENDQUERYANGLEPROC;
pub extern var __glewGenQueriesANGLE: PFNGLGENQUERIESANGLEPROC;
pub extern var __glewGetQueryObjecti64vANGLE: PFNGLGETQUERYOBJECTI64VANGLEPROC;
pub extern var __glewGetQueryObjectivANGLE: PFNGLGETQUERYOBJECTIVANGLEPROC;
pub extern var __glewGetQueryObjectui64vANGLE: PFNGLGETQUERYOBJECTUI64VANGLEPROC;
pub extern var __glewGetQueryObjectuivANGLE: PFNGLGETQUERYOBJECTUIVANGLEPROC;
pub extern var __glewGetQueryivANGLE: PFNGLGETQUERYIVANGLEPROC;
pub extern var __glewIsQueryANGLE: PFNGLISQUERYANGLEPROC;
pub extern var __glewQueryCounterANGLE: PFNGLQUERYCOUNTERANGLEPROC;
pub extern var __glewGetTranslatedShaderSourceANGLE: PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC;
pub extern var __glewCopyTextureLevelsAPPLE: PFNGLCOPYTEXTURELEVELSAPPLEPROC;
pub extern var __glewDrawElementArrayAPPLE: PFNGLDRAWELEMENTARRAYAPPLEPROC;
pub extern var __glewDrawRangeElementArrayAPPLE: PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC;
pub extern var __glewElementPointerAPPLE: PFNGLELEMENTPOINTERAPPLEPROC;
pub extern var __glewMultiDrawElementArrayAPPLE: PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC;
pub extern var __glewMultiDrawRangeElementArrayAPPLE: PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC;
pub extern var __glewDeleteFencesAPPLE: PFNGLDELETEFENCESAPPLEPROC;
pub extern var __glewFinishFenceAPPLE: PFNGLFINISHFENCEAPPLEPROC;
pub extern var __glewFinishObjectAPPLE: PFNGLFINISHOBJECTAPPLEPROC;
pub extern var __glewGenFencesAPPLE: PFNGLGENFENCESAPPLEPROC;
pub extern var __glewIsFenceAPPLE: PFNGLISFENCEAPPLEPROC;
pub extern var __glewSetFenceAPPLE: PFNGLSETFENCEAPPLEPROC;
pub extern var __glewTestFenceAPPLE: PFNGLTESTFENCEAPPLEPROC;
pub extern var __glewTestObjectAPPLE: PFNGLTESTOBJECTAPPLEPROC;
pub extern var __glewBufferParameteriAPPLE: PFNGLBUFFERPARAMETERIAPPLEPROC;
pub extern var __glewFlushMappedBufferRangeAPPLE: PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC;
pub extern var __glewRenderbufferStorageMultisampleAPPLE: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC;
pub extern var __glewResolveMultisampleFramebufferAPPLE: PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC;
pub extern var __glewGetObjectParameterivAPPLE: PFNGLGETOBJECTPARAMETERIVAPPLEPROC;
pub extern var __glewObjectPurgeableAPPLE: PFNGLOBJECTPURGEABLEAPPLEPROC;
pub extern var __glewObjectUnpurgeableAPPLE: PFNGLOBJECTUNPURGEABLEAPPLEPROC;
pub extern var __glewClientWaitSyncAPPLE: PFNGLCLIENTWAITSYNCAPPLEPROC;
pub extern var __glewDeleteSyncAPPLE: PFNGLDELETESYNCAPPLEPROC;
pub extern var __glewFenceSyncAPPLE: PFNGLFENCESYNCAPPLEPROC;
pub extern var __glewGetInteger64vAPPLE: PFNGLGETINTEGER64VAPPLEPROC;
pub extern var __glewGetSyncivAPPLE: PFNGLGETSYNCIVAPPLEPROC;
pub extern var __glewIsSyncAPPLE: PFNGLISSYNCAPPLEPROC;
pub extern var __glewWaitSyncAPPLE: PFNGLWAITSYNCAPPLEPROC;
pub extern var __glewGetTexParameterPointervAPPLE: PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC;
pub extern var __glewTextureRangeAPPLE: PFNGLTEXTURERANGEAPPLEPROC;
pub extern var __glewBindVertexArrayAPPLE: PFNGLBINDVERTEXARRAYAPPLEPROC;
pub extern var __glewDeleteVertexArraysAPPLE: PFNGLDELETEVERTEXARRAYSAPPLEPROC;
pub extern var __glewGenVertexArraysAPPLE: PFNGLGENVERTEXARRAYSAPPLEPROC;
pub extern var __glewIsVertexArrayAPPLE: PFNGLISVERTEXARRAYAPPLEPROC;
pub extern var __glewFlushVertexArrayRangeAPPLE: PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC;
pub extern var __glewVertexArrayParameteriAPPLE: PFNGLVERTEXARRAYPARAMETERIAPPLEPROC;
pub extern var __glewVertexArrayRangeAPPLE: PFNGLVERTEXARRAYRANGEAPPLEPROC;
pub extern var __glewDisableVertexAttribAPPLE: PFNGLDISABLEVERTEXATTRIBAPPLEPROC;
pub extern var __glewEnableVertexAttribAPPLE: PFNGLENABLEVERTEXATTRIBAPPLEPROC;
pub extern var __glewIsVertexAttribEnabledAPPLE: PFNGLISVERTEXATTRIBENABLEDAPPLEPROC;
pub extern var __glewMapVertexAttrib1dAPPLE: PFNGLMAPVERTEXATTRIB1DAPPLEPROC;
pub extern var __glewMapVertexAttrib1fAPPLE: PFNGLMAPVERTEXATTRIB1FAPPLEPROC;
pub extern var __glewMapVertexAttrib2dAPPLE: PFNGLMAPVERTEXATTRIB2DAPPLEPROC;
pub extern var __glewMapVertexAttrib2fAPPLE: PFNGLMAPVERTEXATTRIB2FAPPLEPROC;
pub extern var __glewClearDepthf: PFNGLCLEARDEPTHFPROC;
pub extern var __glewDepthRangef: PFNGLDEPTHRANGEFPROC;
pub extern var __glewGetShaderPrecisionFormat: PFNGLGETSHADERPRECISIONFORMATPROC;
pub extern var __glewReleaseShaderCompiler: PFNGLRELEASESHADERCOMPILERPROC;
pub extern var __glewShaderBinary: PFNGLSHADERBINARYPROC;
pub extern var __glewMemoryBarrierByRegion: PFNGLMEMORYBARRIERBYREGIONPROC;
pub extern var __glewPrimitiveBoundingBoxARB: PFNGLPRIMITIVEBOUNDINGBOXARBPROC;
pub extern var __glewDrawArraysInstancedBaseInstance: PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC;
pub extern var __glewDrawElementsInstancedBaseInstance: PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC;
pub extern var __glewDrawElementsInstancedBaseVertexBaseInstance: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC;
pub extern var __glewGetImageHandleARB: PFNGLGETIMAGEHANDLEARBPROC;
pub extern var __glewGetTextureHandleARB: PFNGLGETTEXTUREHANDLEARBPROC;
pub extern var __glewGetTextureSamplerHandleARB: PFNGLGETTEXTURESAMPLERHANDLEARBPROC;
pub extern var __glewGetVertexAttribLui64vARB: PFNGLGETVERTEXATTRIBLUI64VARBPROC;
pub extern var __glewIsImageHandleResidentARB: PFNGLISIMAGEHANDLERESIDENTARBPROC;
pub extern var __glewIsTextureHandleResidentARB: PFNGLISTEXTUREHANDLERESIDENTARBPROC;
pub extern var __glewMakeImageHandleNonResidentARB: PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC;
pub extern var __glewMakeImageHandleResidentARB: PFNGLMAKEIMAGEHANDLERESIDENTARBPROC;
pub extern var __glewMakeTextureHandleNonResidentARB: PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC;
pub extern var __glewMakeTextureHandleResidentARB: PFNGLMAKETEXTUREHANDLERESIDENTARBPROC;
pub extern var __glewProgramUniformHandleui64ARB: PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC;
pub extern var __glewProgramUniformHandleui64vARB: PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC;
pub extern var __glewUniformHandleui64ARB: PFNGLUNIFORMHANDLEUI64ARBPROC;
pub extern var __glewUniformHandleui64vARB: PFNGLUNIFORMHANDLEUI64VARBPROC;
pub extern var __glewVertexAttribL1ui64ARB: PFNGLVERTEXATTRIBL1UI64ARBPROC;
pub extern var __glewVertexAttribL1ui64vARB: PFNGLVERTEXATTRIBL1UI64VARBPROC;
pub extern var __glewBindFragDataLocationIndexed: PFNGLBINDFRAGDATALOCATIONINDEXEDPROC;
pub extern var __glewGetFragDataIndex: PFNGLGETFRAGDATAINDEXPROC;
pub extern var __glewBufferStorage: PFNGLBUFFERSTORAGEPROC;
pub extern var __glewCreateSyncFromCLeventARB: PFNGLCREATESYNCFROMCLEVENTARBPROC;
pub extern var __glewClearBufferData: PFNGLCLEARBUFFERDATAPROC;
pub extern var __glewClearBufferSubData: PFNGLCLEARBUFFERSUBDATAPROC;
pub extern var __glewClearNamedBufferDataEXT: PFNGLCLEARNAMEDBUFFERDATAEXTPROC;
pub extern var __glewClearNamedBufferSubDataEXT: PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC;
pub extern var __glewClearTexImage: PFNGLCLEARTEXIMAGEPROC;
pub extern var __glewClearTexSubImage: PFNGLCLEARTEXSUBIMAGEPROC;
pub extern var __glewClipControl: PFNGLCLIPCONTROLPROC;
pub extern var __glewClampColorARB: PFNGLCLAMPCOLORARBPROC;
pub extern var __glewDispatchCompute: PFNGLDISPATCHCOMPUTEPROC;
pub extern var __glewDispatchComputeIndirect: PFNGLDISPATCHCOMPUTEINDIRECTPROC;
pub extern var __glewDispatchComputeGroupSizeARB: PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC;
pub extern var __glewCopyBufferSubData: PFNGLCOPYBUFFERSUBDATAPROC;
pub extern var __glewCopyImageSubData: PFNGLCOPYIMAGESUBDATAPROC;
pub extern var __glewDebugMessageCallbackARB: PFNGLDEBUGMESSAGECALLBACKARBPROC;
pub extern var __glewDebugMessageControlARB: PFNGLDEBUGMESSAGECONTROLARBPROC;
pub extern var __glewDebugMessageInsertARB: PFNGLDEBUGMESSAGEINSERTARBPROC;
pub extern var __glewGetDebugMessageLogARB: PFNGLGETDEBUGMESSAGELOGARBPROC;
pub extern var __glewBindTextureUnit: PFNGLBINDTEXTUREUNITPROC;
pub extern var __glewBlitNamedFramebuffer: PFNGLBLITNAMEDFRAMEBUFFERPROC;
pub extern var __glewCheckNamedFramebufferStatus: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC;
pub extern var __glewClearNamedBufferData: PFNGLCLEARNAMEDBUFFERDATAPROC;
pub extern var __glewClearNamedBufferSubData: PFNGLCLEARNAMEDBUFFERSUBDATAPROC;
pub extern var __glewClearNamedFramebufferfi: PFNGLCLEARNAMEDFRAMEBUFFERFIPROC;
pub extern var __glewClearNamedFramebufferfv: PFNGLCLEARNAMEDFRAMEBUFFERFVPROC;
pub extern var __glewClearNamedFramebufferiv: PFNGLCLEARNAMEDFRAMEBUFFERIVPROC;
pub extern var __glewClearNamedFramebufferuiv: PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC;
pub extern var __glewCompressedTextureSubImage1D: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC;
pub extern var __glewCompressedTextureSubImage2D: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC;
pub extern var __glewCompressedTextureSubImage3D: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC;
pub extern var __glewCopyNamedBufferSubData: PFNGLCOPYNAMEDBUFFERSUBDATAPROC;
pub extern var __glewCopyTextureSubImage1D: PFNGLCOPYTEXTURESUBIMAGE1DPROC;
pub extern var __glewCopyTextureSubImage2D: PFNGLCOPYTEXTURESUBIMAGE2DPROC;
pub extern var __glewCopyTextureSubImage3D: PFNGLCOPYTEXTURESUBIMAGE3DPROC;
pub extern var __glewCreateBuffers: PFNGLCREATEBUFFERSPROC;
pub extern var __glewCreateFramebuffers: PFNGLCREATEFRAMEBUFFERSPROC;
pub extern var __glewCreateProgramPipelines: PFNGLCREATEPROGRAMPIPELINESPROC;
pub extern var __glewCreateQueries: PFNGLCREATEQUERIESPROC;
pub extern var __glewCreateRenderbuffers: PFNGLCREATERENDERBUFFERSPROC;
pub extern var __glewCreateSamplers: PFNGLCREATESAMPLERSPROC;
pub extern var __glewCreateTextures: PFNGLCREATETEXTURESPROC;
pub extern var __glewCreateTransformFeedbacks: PFNGLCREATETRANSFORMFEEDBACKSPROC;
pub extern var __glewCreateVertexArrays: PFNGLCREATEVERTEXARRAYSPROC;
pub extern var __glewDisableVertexArrayAttrib: PFNGLDISABLEVERTEXARRAYATTRIBPROC;
pub extern var __glewEnableVertexArrayAttrib: PFNGLENABLEVERTEXARRAYATTRIBPROC;
pub extern var __glewFlushMappedNamedBufferRange: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC;
pub extern var __glewGenerateTextureMipmap: PFNGLGENERATETEXTUREMIPMAPPROC;
pub extern var __glewGetCompressedTextureImage: PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC;
pub extern var __glewGetNamedBufferParameteri64v: PFNGLGETNAMEDBUFFERPARAMETERI64VPROC;
pub extern var __glewGetNamedBufferParameteriv: PFNGLGETNAMEDBUFFERPARAMETERIVPROC;
pub extern var __glewGetNamedBufferPointerv: PFNGLGETNAMEDBUFFERPOINTERVPROC;
pub extern var __glewGetNamedBufferSubData: PFNGLGETNAMEDBUFFERSUBDATAPROC;
pub extern var __glewGetNamedFramebufferAttachmentParameteriv: PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
pub extern var __glewGetNamedFramebufferParameteriv: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC;
pub extern var __glewGetNamedRenderbufferParameteriv: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC;
pub extern var __glewGetQueryBufferObjecti64v: PFNGLGETQUERYBUFFEROBJECTI64VPROC;
pub extern var __glewGetQueryBufferObjectiv: PFNGLGETQUERYBUFFEROBJECTIVPROC;
pub extern var __glewGetQueryBufferObjectui64v: PFNGLGETQUERYBUFFEROBJECTUI64VPROC;
pub extern var __glewGetQueryBufferObjectuiv: PFNGLGETQUERYBUFFEROBJECTUIVPROC;
pub extern var __glewGetTextureImage: PFNGLGETTEXTUREIMAGEPROC;
pub extern var __glewGetTextureLevelParameterfv: PFNGLGETTEXTURELEVELPARAMETERFVPROC;
pub extern var __glewGetTextureLevelParameteriv: PFNGLGETTEXTURELEVELPARAMETERIVPROC;
pub extern var __glewGetTextureParameterIiv: PFNGLGETTEXTUREPARAMETERIIVPROC;
pub extern var __glewGetTextureParameterIuiv: PFNGLGETTEXTUREPARAMETERIUIVPROC;
pub extern var __glewGetTextureParameterfv: PFNGLGETTEXTUREPARAMETERFVPROC;
pub extern var __glewGetTextureParameteriv: PFNGLGETTEXTUREPARAMETERIVPROC;
pub extern var __glewGetTransformFeedbacki64_v: PFNGLGETTRANSFORMFEEDBACKI64_VPROC;
pub extern var __glewGetTransformFeedbacki_v: PFNGLGETTRANSFORMFEEDBACKI_VPROC;
pub extern var __glewGetTransformFeedbackiv: PFNGLGETTRANSFORMFEEDBACKIVPROC;
pub extern var __glewGetVertexArrayIndexed64iv: PFNGLGETVERTEXARRAYINDEXED64IVPROC;
pub extern var __glewGetVertexArrayIndexediv: PFNGLGETVERTEXARRAYINDEXEDIVPROC;
pub extern var __glewGetVertexArrayiv: PFNGLGETVERTEXARRAYIVPROC;
pub extern var __glewInvalidateNamedFramebufferData: PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC;
pub extern var __glewInvalidateNamedFramebufferSubData: PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC;
pub extern var __glewMapNamedBuffer: PFNGLMAPNAMEDBUFFERPROC;
pub extern var __glewMapNamedBufferRange: PFNGLMAPNAMEDBUFFERRANGEPROC;
pub extern var __glewNamedBufferData: PFNGLNAMEDBUFFERDATAPROC;
pub extern var __glewNamedBufferStorage: PFNGLNAMEDBUFFERSTORAGEPROC;
pub extern var __glewNamedBufferSubData: PFNGLNAMEDBUFFERSUBDATAPROC;
pub extern var __glewNamedFramebufferDrawBuffer: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC;
pub extern var __glewNamedFramebufferDrawBuffers: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC;
pub extern var __glewNamedFramebufferParameteri: PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC;
pub extern var __glewNamedFramebufferReadBuffer: PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC;
pub extern var __glewNamedFramebufferRenderbuffer: PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC;
pub extern var __glewNamedFramebufferTexture: PFNGLNAMEDFRAMEBUFFERTEXTUREPROC;
pub extern var __glewNamedFramebufferTextureLayer: PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC;
pub extern var __glewNamedRenderbufferStorage: PFNGLNAMEDRENDERBUFFERSTORAGEPROC;
pub extern var __glewNamedRenderbufferStorageMultisample: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC;
pub extern var __glewTextureBuffer: PFNGLTEXTUREBUFFERPROC;
pub extern var __glewTextureBufferRange: PFNGLTEXTUREBUFFERRANGEPROC;
pub extern var __glewTextureParameterIiv: PFNGLTEXTUREPARAMETERIIVPROC;
pub extern var __glewTextureParameterIuiv: PFNGLTEXTUREPARAMETERIUIVPROC;
pub extern var __glewTextureParameterf: PFNGLTEXTUREPARAMETERFPROC;
pub extern var __glewTextureParameterfv: PFNGLTEXTUREPARAMETERFVPROC;
pub extern var __glewTextureParameteri: PFNGLTEXTUREPARAMETERIPROC;
pub extern var __glewTextureParameteriv: PFNGLTEXTUREPARAMETERIVPROC;
pub extern var __glewTextureStorage1D: PFNGLTEXTURESTORAGE1DPROC;
pub extern var __glewTextureStorage2D: PFNGLTEXTURESTORAGE2DPROC;
pub extern var __glewTextureStorage2DMultisample: PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC;
pub extern var __glewTextureStorage3D: PFNGLTEXTURESTORAGE3DPROC;
pub extern var __glewTextureStorage3DMultisample: PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC;
pub extern var __glewTextureSubImage1D: PFNGLTEXTURESUBIMAGE1DPROC;
pub extern var __glewTextureSubImage2D: PFNGLTEXTURESUBIMAGE2DPROC;
pub extern var __glewTextureSubImage3D: PFNGLTEXTURESUBIMAGE3DPROC;
pub extern var __glewTransformFeedbackBufferBase: PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC;
pub extern var __glewTransformFeedbackBufferRange: PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC;
pub extern var __glewUnmapNamedBuffer: PFNGLUNMAPNAMEDBUFFERPROC;
pub extern var __glewVertexArrayAttribBinding: PFNGLVERTEXARRAYATTRIBBINDINGPROC;
pub extern var __glewVertexArrayAttribFormat: PFNGLVERTEXARRAYATTRIBFORMATPROC;
pub extern var __glewVertexArrayAttribIFormat: PFNGLVERTEXARRAYATTRIBIFORMATPROC;
pub extern var __glewVertexArrayAttribLFormat: PFNGLVERTEXARRAYATTRIBLFORMATPROC;
pub extern var __glewVertexArrayBindingDivisor: PFNGLVERTEXARRAYBINDINGDIVISORPROC;
pub extern var __glewVertexArrayElementBuffer: PFNGLVERTEXARRAYELEMENTBUFFERPROC;
pub extern var __glewVertexArrayVertexBuffer: PFNGLVERTEXARRAYVERTEXBUFFERPROC;
pub extern var __glewVertexArrayVertexBuffers: PFNGLVERTEXARRAYVERTEXBUFFERSPROC;
pub extern var __glewDrawBuffersARB: PFNGLDRAWBUFFERSARBPROC;
pub extern var __glewBlendEquationSeparateiARB: PFNGLBLENDEQUATIONSEPARATEIARBPROC;
pub extern var __glewBlendEquationiARB: PFNGLBLENDEQUATIONIARBPROC;
pub extern var __glewBlendFuncSeparateiARB: PFNGLBLENDFUNCSEPARATEIARBPROC;
pub extern var __glewBlendFunciARB: PFNGLBLENDFUNCIARBPROC;
pub extern var __glewDrawElementsBaseVertex: PFNGLDRAWELEMENTSBASEVERTEXPROC;
pub extern var __glewDrawElementsInstancedBaseVertex: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC;
pub extern var __glewDrawRangeElementsBaseVertex: PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC;
pub extern var __glewMultiDrawElementsBaseVertex: PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC;
pub extern var __glewDrawArraysIndirect: PFNGLDRAWARRAYSINDIRECTPROC;
pub extern var __glewDrawElementsIndirect: PFNGLDRAWELEMENTSINDIRECTPROC;
pub extern var __glewFramebufferParameteri: PFNGLFRAMEBUFFERPARAMETERIPROC;
pub extern var __glewGetFramebufferParameteriv: PFNGLGETFRAMEBUFFERPARAMETERIVPROC;
pub extern var __glewGetNamedFramebufferParameterivEXT: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC;
pub extern var __glewNamedFramebufferParameteriEXT: PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC;
pub extern var __glewBindFramebuffer: PFNGLBINDFRAMEBUFFERPROC;
pub extern var __glewBindRenderbuffer: PFNGLBINDRENDERBUFFERPROC;
pub extern var __glewBlitFramebuffer: PFNGLBLITFRAMEBUFFERPROC;
pub extern var __glewCheckFramebufferStatus: PFNGLCHECKFRAMEBUFFERSTATUSPROC;
pub extern var __glewDeleteFramebuffers: PFNGLDELETEFRAMEBUFFERSPROC;
pub extern var __glewDeleteRenderbuffers: PFNGLDELETERENDERBUFFERSPROC;
pub extern var __glewFramebufferRenderbuffer: PFNGLFRAMEBUFFERRENDERBUFFERPROC;
pub extern var __glewFramebufferTexture1D: PFNGLFRAMEBUFFERTEXTURE1DPROC;
pub extern var __glewFramebufferTexture2D: PFNGLFRAMEBUFFERTEXTURE2DPROC;
pub extern var __glewFramebufferTexture3D: PFNGLFRAMEBUFFERTEXTURE3DPROC;
pub extern var __glewFramebufferTextureLayer: PFNGLFRAMEBUFFERTEXTURELAYERPROC;
pub extern var __glewGenFramebuffers: PFNGLGENFRAMEBUFFERSPROC;
pub extern var __glewGenRenderbuffers: PFNGLGENRENDERBUFFERSPROC;
pub extern var __glewGenerateMipmap: PFNGLGENERATEMIPMAPPROC;
pub extern var __glewGetFramebufferAttachmentParameteriv: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
pub extern var __glewGetRenderbufferParameteriv: PFNGLGETRENDERBUFFERPARAMETERIVPROC;
pub extern var __glewIsFramebuffer: PFNGLISFRAMEBUFFERPROC;
pub extern var __glewIsRenderbuffer: PFNGLISRENDERBUFFERPROC;
pub extern var __glewRenderbufferStorage: PFNGLRENDERBUFFERSTORAGEPROC;
pub extern var __glewRenderbufferStorageMultisample: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC;
pub extern var __glewFramebufferTextureARB: PFNGLFRAMEBUFFERTEXTUREARBPROC;
pub extern var __glewFramebufferTextureFaceARB: PFNGLFRAMEBUFFERTEXTUREFACEARBPROC;
pub extern var __glewFramebufferTextureLayerARB: PFNGLFRAMEBUFFERTEXTURELAYERARBPROC;
pub extern var __glewProgramParameteriARB: PFNGLPROGRAMPARAMETERIARBPROC;
pub extern var __glewGetProgramBinary: PFNGLGETPROGRAMBINARYPROC;
pub extern var __glewProgramBinary: PFNGLPROGRAMBINARYPROC;
pub extern var __glewProgramParameteri: PFNGLPROGRAMPARAMETERIPROC;
pub extern var __glewGetCompressedTextureSubImage: PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC;
pub extern var __glewGetTextureSubImage: PFNGLGETTEXTURESUBIMAGEPROC;
pub extern var __glewSpecializeShaderARB: PFNGLSPECIALIZESHADERARBPROC;
pub extern var __glewGetUniformdv: PFNGLGETUNIFORMDVPROC;
pub extern var __glewUniform1d: PFNGLUNIFORM1DPROC;
pub extern var __glewUniform1dv: PFNGLUNIFORM1DVPROC;
pub extern var __glewUniform2d: PFNGLUNIFORM2DPROC;
pub extern var __glewUniform2dv: PFNGLUNIFORM2DVPROC;
pub extern var __glewUniform3d: PFNGLUNIFORM3DPROC;
pub extern var __glewUniform3dv: PFNGLUNIFORM3DVPROC;
pub extern var __glewUniform4d: PFNGLUNIFORM4DPROC;
pub extern var __glewUniform4dv: PFNGLUNIFORM4DVPROC;
pub extern var __glewUniformMatrix2dv: PFNGLUNIFORMMATRIX2DVPROC;
pub extern var __glewUniformMatrix2x3dv: PFNGLUNIFORMMATRIX2X3DVPROC;
pub extern var __glewUniformMatrix2x4dv: PFNGLUNIFORMMATRIX2X4DVPROC;
pub extern var __glewUniformMatrix3dv: PFNGLUNIFORMMATRIX3DVPROC;
pub extern var __glewUniformMatrix3x2dv: PFNGLUNIFORMMATRIX3X2DVPROC;
pub extern var __glewUniformMatrix3x4dv: PFNGLUNIFORMMATRIX3X4DVPROC;
pub extern var __glewUniformMatrix4dv: PFNGLUNIFORMMATRIX4DVPROC;
pub extern var __glewUniformMatrix4x2dv: PFNGLUNIFORMMATRIX4X2DVPROC;
pub extern var __glewUniformMatrix4x3dv: PFNGLUNIFORMMATRIX4X3DVPROC;
pub extern var __glewGetUniformi64vARB: PFNGLGETUNIFORMI64VARBPROC;
pub extern var __glewGetUniformui64vARB: PFNGLGETUNIFORMUI64VARBPROC;
pub extern var __glewGetnUniformi64vARB: PFNGLGETNUNIFORMI64VARBPROC;
pub extern var __glewGetnUniformui64vARB: PFNGLGETNUNIFORMUI64VARBPROC;
pub extern var __glewProgramUniform1i64ARB: PFNGLPROGRAMUNIFORM1I64ARBPROC;
pub extern var __glewProgramUniform1i64vARB: PFNGLPROGRAMUNIFORM1I64VARBPROC;
pub extern var __glewProgramUniform1ui64ARB: PFNGLPROGRAMUNIFORM1UI64ARBPROC;
pub extern var __glewProgramUniform1ui64vARB: PFNGLPROGRAMUNIFORM1UI64VARBPROC;
pub extern var __glewProgramUniform2i64ARB: PFNGLPROGRAMUNIFORM2I64ARBPROC;
pub extern var __glewProgramUniform2i64vARB: PFNGLPROGRAMUNIFORM2I64VARBPROC;
pub extern var __glewProgramUniform2ui64ARB: PFNGLPROGRAMUNIFORM2UI64ARBPROC;
pub extern var __glewProgramUniform2ui64vARB: PFNGLPROGRAMUNIFORM2UI64VARBPROC;
pub extern var __glewProgramUniform3i64ARB: PFNGLPROGRAMUNIFORM3I64ARBPROC;
pub extern var __glewProgramUniform3i64vARB: PFNGLPROGRAMUNIFORM3I64VARBPROC;
pub extern var __glewProgramUniform3ui64ARB: PFNGLPROGRAMUNIFORM3UI64ARBPROC;
pub extern var __glewProgramUniform3ui64vARB: PFNGLPROGRAMUNIFORM3UI64VARBPROC;
pub extern var __glewProgramUniform4i64ARB: PFNGLPROGRAMUNIFORM4I64ARBPROC;
pub extern var __glewProgramUniform4i64vARB: PFNGLPROGRAMUNIFORM4I64VARBPROC;
pub extern var __glewProgramUniform4ui64ARB: PFNGLPROGRAMUNIFORM4UI64ARBPROC;
pub extern var __glewProgramUniform4ui64vARB: PFNGLPROGRAMUNIFORM4UI64VARBPROC;
pub extern var __glewUniform1i64ARB: PFNGLUNIFORM1I64ARBPROC;
pub extern var __glewUniform1i64vARB: PFNGLUNIFORM1I64VARBPROC;
pub extern var __glewUniform1ui64ARB: PFNGLUNIFORM1UI64ARBPROC;
pub extern var __glewUniform1ui64vARB: PFNGLUNIFORM1UI64VARBPROC;
pub extern var __glewUniform2i64ARB: PFNGLUNIFORM2I64ARBPROC;
pub extern var __glewUniform2i64vARB: PFNGLUNIFORM2I64VARBPROC;
pub extern var __glewUniform2ui64ARB: PFNGLUNIFORM2UI64ARBPROC;
pub extern var __glewUniform2ui64vARB: PFNGLUNIFORM2UI64VARBPROC;
pub extern var __glewUniform3i64ARB: PFNGLUNIFORM3I64ARBPROC;
pub extern var __glewUniform3i64vARB: PFNGLUNIFORM3I64VARBPROC;
pub extern var __glewUniform3ui64ARB: PFNGLUNIFORM3UI64ARBPROC;
pub extern var __glewUniform3ui64vARB: PFNGLUNIFORM3UI64VARBPROC;
pub extern var __glewUniform4i64ARB: PFNGLUNIFORM4I64ARBPROC;
pub extern var __glewUniform4i64vARB: PFNGLUNIFORM4I64VARBPROC;
pub extern var __glewUniform4ui64ARB: PFNGLUNIFORM4UI64ARBPROC;
pub extern var __glewUniform4ui64vARB: PFNGLUNIFORM4UI64VARBPROC;
pub extern var __glewColorSubTable: PFNGLCOLORSUBTABLEPROC;
pub extern var __glewColorTable: PFNGLCOLORTABLEPROC;
pub extern var __glewColorTableParameterfv: PFNGLCOLORTABLEPARAMETERFVPROC;
pub extern var __glewColorTableParameteriv: PFNGLCOLORTABLEPARAMETERIVPROC;
pub extern var __glewConvolutionFilter1D: PFNGLCONVOLUTIONFILTER1DPROC;
pub extern var __glewConvolutionFilter2D: PFNGLCONVOLUTIONFILTER2DPROC;
pub extern var __glewConvolutionParameterf: PFNGLCONVOLUTIONPARAMETERFPROC;
pub extern var __glewConvolutionParameterfv: PFNGLCONVOLUTIONPARAMETERFVPROC;
pub extern var __glewConvolutionParameteri: PFNGLCONVOLUTIONPARAMETERIPROC;
pub extern var __glewConvolutionParameteriv: PFNGLCONVOLUTIONPARAMETERIVPROC;
pub extern var __glewCopyColorSubTable: PFNGLCOPYCOLORSUBTABLEPROC;
pub extern var __glewCopyColorTable: PFNGLCOPYCOLORTABLEPROC;
pub extern var __glewCopyConvolutionFilter1D: PFNGLCOPYCONVOLUTIONFILTER1DPROC;
pub extern var __glewCopyConvolutionFilter2D: PFNGLCOPYCONVOLUTIONFILTER2DPROC;
pub extern var __glewGetColorTable: PFNGLGETCOLORTABLEPROC;
pub extern var __glewGetColorTableParameterfv: PFNGLGETCOLORTABLEPARAMETERFVPROC;
pub extern var __glewGetColorTableParameteriv: PFNGLGETCOLORTABLEPARAMETERIVPROC;
pub extern var __glewGetConvolutionFilter: PFNGLGETCONVOLUTIONFILTERPROC;
pub extern var __glewGetConvolutionParameterfv: PFNGLGETCONVOLUTIONPARAMETERFVPROC;
pub extern var __glewGetConvolutionParameteriv: PFNGLGETCONVOLUTIONPARAMETERIVPROC;
pub extern var __glewGetHistogram: PFNGLGETHISTOGRAMPROC;
pub extern var __glewGetHistogramParameterfv: PFNGLGETHISTOGRAMPARAMETERFVPROC;
pub extern var __glewGetHistogramParameteriv: PFNGLGETHISTOGRAMPARAMETERIVPROC;
pub extern var __glewGetMinmax: PFNGLGETMINMAXPROC;
pub extern var __glewGetMinmaxParameterfv: PFNGLGETMINMAXPARAMETERFVPROC;
pub extern var __glewGetMinmaxParameteriv: PFNGLGETMINMAXPARAMETERIVPROC;
pub extern var __glewGetSeparableFilter: PFNGLGETSEPARABLEFILTERPROC;
pub extern var __glewHistogram: PFNGLHISTOGRAMPROC;
pub extern var __glewMinmax: PFNGLMINMAXPROC;
pub extern var __glewResetHistogram: PFNGLRESETHISTOGRAMPROC;
pub extern var __glewResetMinmax: PFNGLRESETMINMAXPROC;
pub extern var __glewSeparableFilter2D: PFNGLSEPARABLEFILTER2DPROC;
pub extern var __glewMultiDrawArraysIndirectCountARB: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC;
pub extern var __glewMultiDrawElementsIndirectCountARB: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC;
pub extern var __glewDrawArraysInstancedARB: PFNGLDRAWARRAYSINSTANCEDARBPROC;
pub extern var __glewDrawElementsInstancedARB: PFNGLDRAWELEMENTSINSTANCEDARBPROC;
pub extern var __glewVertexAttribDivisorARB: PFNGLVERTEXATTRIBDIVISORARBPROC;
pub extern var __glewGetInternalformativ: PFNGLGETINTERNALFORMATIVPROC;
pub extern var __glewGetInternalformati64v: PFNGLGETINTERNALFORMATI64VPROC;
pub extern var __glewInvalidateBufferData: PFNGLINVALIDATEBUFFERDATAPROC;
pub extern var __glewInvalidateBufferSubData: PFNGLINVALIDATEBUFFERSUBDATAPROC;
pub extern var __glewInvalidateFramebuffer: PFNGLINVALIDATEFRAMEBUFFERPROC;
pub extern var __glewInvalidateSubFramebuffer: PFNGLINVALIDATESUBFRAMEBUFFERPROC;
pub extern var __glewInvalidateTexImage: PFNGLINVALIDATETEXIMAGEPROC;
pub extern var __glewInvalidateTexSubImage: PFNGLINVALIDATETEXSUBIMAGEPROC;
pub extern var __glewFlushMappedBufferRange: PFNGLFLUSHMAPPEDBUFFERRANGEPROC;
pub extern var __glewMapBufferRange: PFNGLMAPBUFFERRANGEPROC;
pub extern var __glewCurrentPaletteMatrixARB: PFNGLCURRENTPALETTEMATRIXARBPROC;
pub extern var __glewMatrixIndexPointerARB: PFNGLMATRIXINDEXPOINTERARBPROC;
pub extern var __glewMatrixIndexubvARB: PFNGLMATRIXINDEXUBVARBPROC;
pub extern var __glewMatrixIndexuivARB: PFNGLMATRIXINDEXUIVARBPROC;
pub extern var __glewMatrixIndexusvARB: PFNGLMATRIXINDEXUSVARBPROC;
pub extern var __glewBindBuffersBase: PFNGLBINDBUFFERSBASEPROC;
pub extern var __glewBindBuffersRange: PFNGLBINDBUFFERSRANGEPROC;
pub extern var __glewBindImageTextures: PFNGLBINDIMAGETEXTURESPROC;
pub extern var __glewBindSamplers: PFNGLBINDSAMPLERSPROC;
pub extern var __glewBindTextures: PFNGLBINDTEXTURESPROC;
pub extern var __glewBindVertexBuffers: PFNGLBINDVERTEXBUFFERSPROC;
pub extern var __glewMultiDrawArraysIndirect: PFNGLMULTIDRAWARRAYSINDIRECTPROC;
pub extern var __glewMultiDrawElementsIndirect: PFNGLMULTIDRAWELEMENTSINDIRECTPROC;
pub extern var __glewSampleCoverageARB: PFNGLSAMPLECOVERAGEARBPROC;
pub extern var __glewActiveTextureARB: PFNGLACTIVETEXTUREARBPROC;
pub extern var __glewClientActiveTextureARB: PFNGLCLIENTACTIVETEXTUREARBPROC;
pub extern var __glewMultiTexCoord1dARB: PFNGLMULTITEXCOORD1DARBPROC;
pub extern var __glewMultiTexCoord1dvARB: PFNGLMULTITEXCOORD1DVARBPROC;
pub extern var __glewMultiTexCoord1fARB: PFNGLMULTITEXCOORD1FARBPROC;
pub extern var __glewMultiTexCoord1fvARB: PFNGLMULTITEXCOORD1FVARBPROC;
pub extern var __glewMultiTexCoord1iARB: PFNGLMULTITEXCOORD1IARBPROC;
pub extern var __glewMultiTexCoord1ivARB: PFNGLMULTITEXCOORD1IVARBPROC;
pub extern var __glewMultiTexCoord1sARB: PFNGLMULTITEXCOORD1SARBPROC;
pub extern var __glewMultiTexCoord1svARB: PFNGLMULTITEXCOORD1SVARBPROC;
pub extern var __glewMultiTexCoord2dARB: PFNGLMULTITEXCOORD2DARBPROC;
pub extern var __glewMultiTexCoord2dvARB: PFNGLMULTITEXCOORD2DVARBPROC;
pub extern var __glewMultiTexCoord2fARB: PFNGLMULTITEXCOORD2FARBPROC;
pub extern var __glewMultiTexCoord2fvARB: PFNGLMULTITEXCOORD2FVARBPROC;
pub extern var __glewMultiTexCoord2iARB: PFNGLMULTITEXCOORD2IARBPROC;
pub extern var __glewMultiTexCoord2ivARB: PFNGLMULTITEXCOORD2IVARBPROC;
pub extern var __glewMultiTexCoord2sARB: PFNGLMULTITEXCOORD2SARBPROC;
pub extern var __glewMultiTexCoord2svARB: PFNGLMULTITEXCOORD2SVARBPROC;
pub extern var __glewMultiTexCoord3dARB: PFNGLMULTITEXCOORD3DARBPROC;
pub extern var __glewMultiTexCoord3dvARB: PFNGLMULTITEXCOORD3DVARBPROC;
pub extern var __glewMultiTexCoord3fARB: PFNGLMULTITEXCOORD3FARBPROC;
pub extern var __glewMultiTexCoord3fvARB: PFNGLMULTITEXCOORD3FVARBPROC;
pub extern var __glewMultiTexCoord3iARB: PFNGLMULTITEXCOORD3IARBPROC;
pub extern var __glewMultiTexCoord3ivARB: PFNGLMULTITEXCOORD3IVARBPROC;
pub extern var __glewMultiTexCoord3sARB: PFNGLMULTITEXCOORD3SARBPROC;
pub extern var __glewMultiTexCoord3svARB: PFNGLMULTITEXCOORD3SVARBPROC;
pub extern var __glewMultiTexCoord4dARB: PFNGLMULTITEXCOORD4DARBPROC;
pub extern var __glewMultiTexCoord4dvARB: PFNGLMULTITEXCOORD4DVARBPROC;
pub extern var __glewMultiTexCoord4fARB: PFNGLMULTITEXCOORD4FARBPROC;
pub extern var __glewMultiTexCoord4fvARB: PFNGLMULTITEXCOORD4FVARBPROC;
pub extern var __glewMultiTexCoord4iARB: PFNGLMULTITEXCOORD4IARBPROC;
pub extern var __glewMultiTexCoord4ivARB: PFNGLMULTITEXCOORD4IVARBPROC;
pub extern var __glewMultiTexCoord4sARB: PFNGLMULTITEXCOORD4SARBPROC;
pub extern var __glewMultiTexCoord4svARB: PFNGLMULTITEXCOORD4SVARBPROC;
pub extern var __glewBeginQueryARB: PFNGLBEGINQUERYARBPROC;
pub extern var __glewDeleteQueriesARB: PFNGLDELETEQUERIESARBPROC;
pub extern var __glewEndQueryARB: PFNGLENDQUERYARBPROC;
pub extern var __glewGenQueriesARB: PFNGLGENQUERIESARBPROC;
pub extern var __glewGetQueryObjectivARB: PFNGLGETQUERYOBJECTIVARBPROC;
pub extern var __glewGetQueryObjectuivARB: PFNGLGETQUERYOBJECTUIVARBPROC;
pub extern var __glewGetQueryivARB: PFNGLGETQUERYIVARBPROC;
pub extern var __glewIsQueryARB: PFNGLISQUERYARBPROC;
pub extern var __glewMaxShaderCompilerThreadsARB: PFNGLMAXSHADERCOMPILERTHREADSARBPROC;
pub extern var __glewPointParameterfARB: PFNGLPOINTPARAMETERFARBPROC;
pub extern var __glewPointParameterfvARB: PFNGLPOINTPARAMETERFVARBPROC;
pub extern var __glewPolygonOffsetClamp: PFNGLPOLYGONOFFSETCLAMPPROC;
pub extern var __glewGetProgramInterfaceiv: PFNGLGETPROGRAMINTERFACEIVPROC;
pub extern var __glewGetProgramResourceIndex: PFNGLGETPROGRAMRESOURCEINDEXPROC;
pub extern var __glewGetProgramResourceLocation: PFNGLGETPROGRAMRESOURCELOCATIONPROC;
pub extern var __glewGetProgramResourceLocationIndex: PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC;
pub extern var __glewGetProgramResourceName: PFNGLGETPROGRAMRESOURCENAMEPROC;
pub extern var __glewGetProgramResourceiv: PFNGLGETPROGRAMRESOURCEIVPROC;
pub extern var __glewProvokingVertex: PFNGLPROVOKINGVERTEXPROC;
pub extern var __glewGetGraphicsResetStatusARB: PFNGLGETGRAPHICSRESETSTATUSARBPROC;
pub extern var __glewGetnColorTableARB: PFNGLGETNCOLORTABLEARBPROC;
pub extern var __glewGetnCompressedTexImageARB: PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC;
pub extern var __glewGetnConvolutionFilterARB: PFNGLGETNCONVOLUTIONFILTERARBPROC;
pub extern var __glewGetnHistogramARB: PFNGLGETNHISTOGRAMARBPROC;
pub extern var __glewGetnMapdvARB: PFNGLGETNMAPDVARBPROC;
pub extern var __glewGetnMapfvARB: PFNGLGETNMAPFVARBPROC;
pub extern var __glewGetnMapivARB: PFNGLGETNMAPIVARBPROC;
pub extern var __glewGetnMinmaxARB: PFNGLGETNMINMAXARBPROC;
pub extern var __glewGetnPixelMapfvARB: PFNGLGETNPIXELMAPFVARBPROC;
pub extern var __glewGetnPixelMapuivARB: PFNGLGETNPIXELMAPUIVARBPROC;
pub extern var __glewGetnPixelMapusvARB: PFNGLGETNPIXELMAPUSVARBPROC;
pub extern var __glewGetnPolygonStippleARB: PFNGLGETNPOLYGONSTIPPLEARBPROC;
pub extern var __glewGetnSeparableFilterARB: PFNGLGETNSEPARABLEFILTERARBPROC;
pub extern var __glewGetnTexImageARB: PFNGLGETNTEXIMAGEARBPROC;
pub extern var __glewGetnUniformdvARB: PFNGLGETNUNIFORMDVARBPROC;
pub extern var __glewGetnUniformfvARB: PFNGLGETNUNIFORMFVARBPROC;
pub extern var __glewGetnUniformivARB: PFNGLGETNUNIFORMIVARBPROC;
pub extern var __glewGetnUniformuivARB: PFNGLGETNUNIFORMUIVARBPROC;
pub extern var __glewReadnPixelsARB: PFNGLREADNPIXELSARBPROC;
pub extern var __glewFramebufferSampleLocationsfvARB: PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC;
pub extern var __glewNamedFramebufferSampleLocationsfvARB: PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC;
pub extern var __glewMinSampleShadingARB: PFNGLMINSAMPLESHADINGARBPROC;
pub extern var __glewBindSampler: PFNGLBINDSAMPLERPROC;
pub extern var __glewDeleteSamplers: PFNGLDELETESAMPLERSPROC;
pub extern var __glewGenSamplers: PFNGLGENSAMPLERSPROC;
pub extern var __glewGetSamplerParameterIiv: PFNGLGETSAMPLERPARAMETERIIVPROC;
pub extern var __glewGetSamplerParameterIuiv: PFNGLGETSAMPLERPARAMETERIUIVPROC;
pub extern var __glewGetSamplerParameterfv: PFNGLGETSAMPLERPARAMETERFVPROC;
pub extern var __glewGetSamplerParameteriv: PFNGLGETSAMPLERPARAMETERIVPROC;
pub extern var __glewIsSampler: PFNGLISSAMPLERPROC;
pub extern var __glewSamplerParameterIiv: PFNGLSAMPLERPARAMETERIIVPROC;
pub extern var __glewSamplerParameterIuiv: PFNGLSAMPLERPARAMETERIUIVPROC;
pub extern var __glewSamplerParameterf: PFNGLSAMPLERPARAMETERFPROC;
pub extern var __glewSamplerParameterfv: PFNGLSAMPLERPARAMETERFVPROC;
pub extern var __glewSamplerParameteri: PFNGLSAMPLERPARAMETERIPROC;
pub extern var __glewSamplerParameteriv: PFNGLSAMPLERPARAMETERIVPROC;
pub extern var __glewActiveShaderProgram: PFNGLACTIVESHADERPROGRAMPROC;
pub extern var __glewBindProgramPipeline: PFNGLBINDPROGRAMPIPELINEPROC;
pub extern var __glewCreateShaderProgramv: PFNGLCREATESHADERPROGRAMVPROC;
pub extern var __glewDeleteProgramPipelines: PFNGLDELETEPROGRAMPIPELINESPROC;
pub extern var __glewGenProgramPipelines: PFNGLGENPROGRAMPIPELINESPROC;
pub extern var __glewGetProgramPipelineInfoLog: PFNGLGETPROGRAMPIPELINEINFOLOGPROC;
pub extern var __glewGetProgramPipelineiv: PFNGLGETPROGRAMPIPELINEIVPROC;
pub extern var __glewIsProgramPipeline: PFNGLISPROGRAMPIPELINEPROC;
pub extern var __glewProgramUniform1d: PFNGLPROGRAMUNIFORM1DPROC;
pub extern var __glewProgramUniform1dv: PFNGLPROGRAMUNIFORM1DVPROC;
pub extern var __glewProgramUniform1f: PFNGLPROGRAMUNIFORM1FPROC;
pub extern var __glewProgramUniform1fv: PFNGLPROGRAMUNIFORM1FVPROC;
pub extern var __glewProgramUniform1i: PFNGLPROGRAMUNIFORM1IPROC;
pub extern var __glewProgramUniform1iv: PFNGLPROGRAMUNIFORM1IVPROC;
pub extern var __glewProgramUniform1ui: PFNGLPROGRAMUNIFORM1UIPROC;
pub extern var __glewProgramUniform1uiv: PFNGLPROGRAMUNIFORM1UIVPROC;
pub extern var __glewProgramUniform2d: PFNGLPROGRAMUNIFORM2DPROC;
pub extern var __glewProgramUniform2dv: PFNGLPROGRAMUNIFORM2DVPROC;
pub extern var __glewProgramUniform2f: PFNGLPROGRAMUNIFORM2FPROC;
pub extern var __glewProgramUniform2fv: PFNGLPROGRAMUNIFORM2FVPROC;
pub extern var __glewProgramUniform2i: PFNGLPROGRAMUNIFORM2IPROC;
pub extern var __glewProgramUniform2iv: PFNGLPROGRAMUNIFORM2IVPROC;
pub extern var __glewProgramUniform2ui: PFNGLPROGRAMUNIFORM2UIPROC;
pub extern var __glewProgramUniform2uiv: PFNGLPROGRAMUNIFORM2UIVPROC;
pub extern var __glewProgramUniform3d: PFNGLPROGRAMUNIFORM3DPROC;
pub extern var __glewProgramUniform3dv: PFNGLPROGRAMUNIFORM3DVPROC;
pub extern var __glewProgramUniform3f: PFNGLPROGRAMUNIFORM3FPROC;
pub extern var __glewProgramUniform3fv: PFNGLPROGRAMUNIFORM3FVPROC;
pub extern var __glewProgramUniform3i: PFNGLPROGRAMUNIFORM3IPROC;
pub extern var __glewProgramUniform3iv: PFNGLPROGRAMUNIFORM3IVPROC;
pub extern var __glewProgramUniform3ui: PFNGLPROGRAMUNIFORM3UIPROC;
pub extern var __glewProgramUniform3uiv: PFNGLPROGRAMUNIFORM3UIVPROC;
pub extern var __glewProgramUniform4d: PFNGLPROGRAMUNIFORM4DPROC;
pub extern var __glewProgramUniform4dv: PFNGLPROGRAMUNIFORM4DVPROC;
pub extern var __glewProgramUniform4f: PFNGLPROGRAMUNIFORM4FPROC;
pub extern var __glewProgramUniform4fv: PFNGLPROGRAMUNIFORM4FVPROC;
pub extern var __glewProgramUniform4i: PFNGLPROGRAMUNIFORM4IPROC;
pub extern var __glewProgramUniform4iv: PFNGLPROGRAMUNIFORM4IVPROC;
pub extern var __glewProgramUniform4ui: PFNGLPROGRAMUNIFORM4UIPROC;
pub extern var __glewProgramUniform4uiv: PFNGLPROGRAMUNIFORM4UIVPROC;
pub extern var __glewProgramUniformMatrix2dv: PFNGLPROGRAMUNIFORMMATRIX2DVPROC;
pub extern var __glewProgramUniformMatrix2fv: PFNGLPROGRAMUNIFORMMATRIX2FVPROC;
pub extern var __glewProgramUniformMatrix2x3dv: PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC;
pub extern var __glewProgramUniformMatrix2x3fv: PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC;
pub extern var __glewProgramUniformMatrix2x4dv: PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC;
pub extern var __glewProgramUniformMatrix2x4fv: PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC;
pub extern var __glewProgramUniformMatrix3dv: PFNGLPROGRAMUNIFORMMATRIX3DVPROC;
pub extern var __glewProgramUniformMatrix3fv: PFNGLPROGRAMUNIFORMMATRIX3FVPROC;
pub extern var __glewProgramUniformMatrix3x2dv: PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC;
pub extern var __glewProgramUniformMatrix3x2fv: PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC;
pub extern var __glewProgramUniformMatrix3x4dv: PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC;
pub extern var __glewProgramUniformMatrix3x4fv: PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC;
pub extern var __glewProgramUniformMatrix4dv: PFNGLPROGRAMUNIFORMMATRIX4DVPROC;
pub extern var __glewProgramUniformMatrix4fv: PFNGLPROGRAMUNIFORMMATRIX4FVPROC;
pub extern var __glewProgramUniformMatrix4x2dv: PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC;
pub extern var __glewProgramUniformMatrix4x2fv: PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC;
pub extern var __glewProgramUniformMatrix4x3dv: PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC;
pub extern var __glewProgramUniformMatrix4x3fv: PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC;
pub extern var __glewUseProgramStages: PFNGLUSEPROGRAMSTAGESPROC;
pub extern var __glewValidateProgramPipeline: PFNGLVALIDATEPROGRAMPIPELINEPROC;
pub extern var __glewGetActiveAtomicCounterBufferiv: PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC;
pub extern var __glewBindImageTexture: PFNGLBINDIMAGETEXTUREPROC;
pub extern var __glewMemoryBarrier: PFNGLMEMORYBARRIERPROC;
pub extern var __glewAttachObjectARB: PFNGLATTACHOBJECTARBPROC;
pub extern var __glewCompileShaderARB: PFNGLCOMPILESHADERARBPROC;
pub extern var __glewCreateProgramObjectARB: PFNGLCREATEPROGRAMOBJECTARBPROC;
pub extern var __glewCreateShaderObjectARB: PFNGLCREATESHADEROBJECTARBPROC;
pub extern var __glewDeleteObjectARB: PFNGLDELETEOBJECTARBPROC;
pub extern var __glewDetachObjectARB: PFNGLDETACHOBJECTARBPROC;
pub extern var __glewGetActiveUniformARB: PFNGLGETACTIVEUNIFORMARBPROC;
pub extern var __glewGetAttachedObjectsARB: PFNGLGETATTACHEDOBJECTSARBPROC;
pub extern var __glewGetHandleARB: PFNGLGETHANDLEARBPROC;
pub extern var __glewGetInfoLogARB: PFNGLGETINFOLOGARBPROC;
pub extern var __glewGetObjectParameterfvARB: PFNGLGETOBJECTPARAMETERFVARBPROC;
pub extern var __glewGetObjectParameterivARB: PFNGLGETOBJECTPARAMETERIVARBPROC;
pub extern var __glewGetShaderSourceARB: PFNGLGETSHADERSOURCEARBPROC;
pub extern var __glewGetUniformLocationARB: PFNGLGETUNIFORMLOCATIONARBPROC;
pub extern var __glewGetUniformfvARB: PFNGLGETUNIFORMFVARBPROC;
pub extern var __glewGetUniformivARB: PFNGLGETUNIFORMIVARBPROC;
pub extern var __glewLinkProgramARB: PFNGLLINKPROGRAMARBPROC;
pub extern var __glewShaderSourceARB: PFNGLSHADERSOURCEARBPROC;
pub extern var __glewUniform1fARB: PFNGLUNIFORM1FARBPROC;
pub extern var __glewUniform1fvARB: PFNGLUNIFORM1FVARBPROC;
pub extern var __glewUniform1iARB: PFNGLUNIFORM1IARBPROC;
pub extern var __glewUniform1ivARB: PFNGLUNIFORM1IVARBPROC;
pub extern var __glewUniform2fARB: PFNGLUNIFORM2FARBPROC;
pub extern var __glewUniform2fvARB: PFNGLUNIFORM2FVARBPROC;
pub extern var __glewUniform2iARB: PFNGLUNIFORM2IARBPROC;
pub extern var __glewUniform2ivARB: PFNGLUNIFORM2IVARBPROC;
pub extern var __glewUniform3fARB: PFNGLUNIFORM3FARBPROC;
pub extern var __glewUniform3fvARB: PFNGLUNIFORM3FVARBPROC;
pub extern var __glewUniform3iARB: PFNGLUNIFORM3IARBPROC;
pub extern var __glewUniform3ivARB: PFNGLUNIFORM3IVARBPROC;
pub extern var __glewUniform4fARB: PFNGLUNIFORM4FARBPROC;
pub extern var __glewUniform4fvARB: PFNGLUNIFORM4FVARBPROC;
pub extern var __glewUniform4iARB: PFNGLUNIFORM4IARBPROC;
pub extern var __glewUniform4ivARB: PFNGLUNIFORM4IVARBPROC;
pub extern var __glewUniformMatrix2fvARB: PFNGLUNIFORMMATRIX2FVARBPROC;
pub extern var __glewUniformMatrix3fvARB: PFNGLUNIFORMMATRIX3FVARBPROC;
pub extern var __glewUniformMatrix4fvARB: PFNGLUNIFORMMATRIX4FVARBPROC;
pub extern var __glewUseProgramObjectARB: PFNGLUSEPROGRAMOBJECTARBPROC;
pub extern var __glewValidateProgramARB: PFNGLVALIDATEPROGRAMARBPROC;
pub extern var __glewShaderStorageBlockBinding: PFNGLSHADERSTORAGEBLOCKBINDINGPROC;
pub extern var __glewGetActiveSubroutineName: PFNGLGETACTIVESUBROUTINENAMEPROC;
pub extern var __glewGetActiveSubroutineUniformName: PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC;
pub extern var __glewGetActiveSubroutineUniformiv: PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC;
pub extern var __glewGetProgramStageiv: PFNGLGETPROGRAMSTAGEIVPROC;
pub extern var __glewGetSubroutineIndex: PFNGLGETSUBROUTINEINDEXPROC;
pub extern var __glewGetSubroutineUniformLocation: PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC;
pub extern var __glewGetUniformSubroutineuiv: PFNGLGETUNIFORMSUBROUTINEUIVPROC;
pub extern var __glewUniformSubroutinesuiv: PFNGLUNIFORMSUBROUTINESUIVPROC;
pub extern var __glewCompileShaderIncludeARB: PFNGLCOMPILESHADERINCLUDEARBPROC;
pub extern var __glewDeleteNamedStringARB: PFNGLDELETENAMEDSTRINGARBPROC;
pub extern var __glewGetNamedStringARB: PFNGLGETNAMEDSTRINGARBPROC;
pub extern var __glewGetNamedStringivARB: PFNGLGETNAMEDSTRINGIVARBPROC;
pub extern var __glewIsNamedStringARB: PFNGLISNAMEDSTRINGARBPROC;
pub extern var __glewNamedStringARB: PFNGLNAMEDSTRINGARBPROC;
pub extern var __glewBufferPageCommitmentARB: PFNGLBUFFERPAGECOMMITMENTARBPROC;
pub extern var __glewTexPageCommitmentARB: PFNGLTEXPAGECOMMITMENTARBPROC;
pub extern var __glewClientWaitSync: PFNGLCLIENTWAITSYNCPROC;
pub extern var __glewDeleteSync: PFNGLDELETESYNCPROC;
pub extern var __glewFenceSync: PFNGLFENCESYNCPROC;
pub extern var __glewGetInteger64v: PFNGLGETINTEGER64VPROC;
pub extern var __glewGetSynciv: PFNGLGETSYNCIVPROC;
pub extern var __glewIsSync: PFNGLISSYNCPROC;
pub extern var __glewWaitSync: PFNGLWAITSYNCPROC;
pub extern var __glewPatchParameterfv: PFNGLPATCHPARAMETERFVPROC;
pub extern var __glewPatchParameteri: PFNGLPATCHPARAMETERIPROC;
pub extern var __glewTextureBarrier: PFNGLTEXTUREBARRIERPROC;
pub extern var __glewTexBufferARB: PFNGLTEXBUFFERARBPROC;
pub extern var __glewTexBufferRange: PFNGLTEXBUFFERRANGEPROC;
pub extern var __glewTextureBufferRangeEXT: PFNGLTEXTUREBUFFERRANGEEXTPROC;
pub extern var __glewCompressedTexImage1DARB: PFNGLCOMPRESSEDTEXIMAGE1DARBPROC;
pub extern var __glewCompressedTexImage2DARB: PFNGLCOMPRESSEDTEXIMAGE2DARBPROC;
pub extern var __glewCompressedTexImage3DARB: PFNGLCOMPRESSEDTEXIMAGE3DARBPROC;
pub extern var __glewCompressedTexSubImage1DARB: PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC;
pub extern var __glewCompressedTexSubImage2DARB: PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC;
pub extern var __glewCompressedTexSubImage3DARB: PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC;
pub extern var __glewGetCompressedTexImageARB: PFNGLGETCOMPRESSEDTEXIMAGEARBPROC;
pub extern var __glewGetMultisamplefv: PFNGLGETMULTISAMPLEFVPROC;
pub extern var __glewSampleMaski: PFNGLSAMPLEMASKIPROC;
pub extern var __glewTexImage2DMultisample: PFNGLTEXIMAGE2DMULTISAMPLEPROC;
pub extern var __glewTexImage3DMultisample: PFNGLTEXIMAGE3DMULTISAMPLEPROC;
pub extern var __glewTexStorage1D: PFNGLTEXSTORAGE1DPROC;
pub extern var __glewTexStorage2D: PFNGLTEXSTORAGE2DPROC;
pub extern var __glewTexStorage3D: PFNGLTEXSTORAGE3DPROC;
pub extern var __glewTexStorage2DMultisample: PFNGLTEXSTORAGE2DMULTISAMPLEPROC;
pub extern var __glewTexStorage3DMultisample: PFNGLTEXSTORAGE3DMULTISAMPLEPROC;
pub extern var __glewTextureStorage2DMultisampleEXT: PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC;
pub extern var __glewTextureStorage3DMultisampleEXT: PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC;
pub extern var __glewTextureView: PFNGLTEXTUREVIEWPROC;
pub extern var __glewGetQueryObjecti64v: PFNGLGETQUERYOBJECTI64VPROC;
pub extern var __glewGetQueryObjectui64v: PFNGLGETQUERYOBJECTUI64VPROC;
pub extern var __glewQueryCounter: PFNGLQUERYCOUNTERPROC;
pub extern var __glewBindTransformFeedback: PFNGLBINDTRANSFORMFEEDBACKPROC;
pub extern var __glewDeleteTransformFeedbacks: PFNGLDELETETRANSFORMFEEDBACKSPROC;
pub extern var __glewDrawTransformFeedback: PFNGLDRAWTRANSFORMFEEDBACKPROC;
pub extern var __glewGenTransformFeedbacks: PFNGLGENTRANSFORMFEEDBACKSPROC;
pub extern var __glewIsTransformFeedback: PFNGLISTRANSFORMFEEDBACKPROC;
pub extern var __glewPauseTransformFeedback: PFNGLPAUSETRANSFORMFEEDBACKPROC;
pub extern var __glewResumeTransformFeedback: PFNGLRESUMETRANSFORMFEEDBACKPROC;
pub extern var __glewBeginQueryIndexed: PFNGLBEGINQUERYINDEXEDPROC;
pub extern var __glewDrawTransformFeedbackStream: PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC;
pub extern var __glewEndQueryIndexed: PFNGLENDQUERYINDEXEDPROC;
pub extern var __glewGetQueryIndexediv: PFNGLGETQUERYINDEXEDIVPROC;
pub extern var __glewDrawTransformFeedbackInstanced: PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC;
pub extern var __glewDrawTransformFeedbackStreamInstanced: PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC;
pub extern var __glewLoadTransposeMatrixdARB: PFNGLLOADTRANSPOSEMATRIXDARBPROC;
pub extern var __glewLoadTransposeMatrixfARB: PFNGLLOADTRANSPOSEMATRIXFARBPROC;
pub extern var __glewMultTransposeMatrixdARB: PFNGLMULTTRANSPOSEMATRIXDARBPROC;
pub extern var __glewMultTransposeMatrixfARB: PFNGLMULTTRANSPOSEMATRIXFARBPROC;
pub extern var __glewBindBufferBase: PFNGLBINDBUFFERBASEPROC;
pub extern var __glewBindBufferRange: PFNGLBINDBUFFERRANGEPROC;
pub extern var __glewGetActiveUniformBlockName: PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC;
pub extern var __glewGetActiveUniformBlockiv: PFNGLGETACTIVEUNIFORMBLOCKIVPROC;
pub extern var __glewGetActiveUniformName: PFNGLGETACTIVEUNIFORMNAMEPROC;
pub extern var __glewGetActiveUniformsiv: PFNGLGETACTIVEUNIFORMSIVPROC;
pub extern var __glewGetIntegeri_v: PFNGLGETINTEGERI_VPROC;
pub extern var __glewGetUniformBlockIndex: PFNGLGETUNIFORMBLOCKINDEXPROC;
pub extern var __glewGetUniformIndices: PFNGLGETUNIFORMINDICESPROC;
pub extern var __glewUniformBlockBinding: PFNGLUNIFORMBLOCKBINDINGPROC;
pub extern var __glewBindVertexArray: PFNGLBINDVERTEXARRAYPROC;
pub extern var __glewDeleteVertexArrays: PFNGLDELETEVERTEXARRAYSPROC;
pub extern var __glewGenVertexArrays: PFNGLGENVERTEXARRAYSPROC;
pub extern var __glewIsVertexArray: PFNGLISVERTEXARRAYPROC;
pub extern var __glewGetVertexAttribLdv: PFNGLGETVERTEXATTRIBLDVPROC;
pub extern var __glewVertexAttribL1d: PFNGLVERTEXATTRIBL1DPROC;
pub extern var __glewVertexAttribL1dv: PFNGLVERTEXATTRIBL1DVPROC;
pub extern var __glewVertexAttribL2d: PFNGLVERTEXATTRIBL2DPROC;
pub extern var __glewVertexAttribL2dv: PFNGLVERTEXATTRIBL2DVPROC;
pub extern var __glewVertexAttribL3d: PFNGLVERTEXATTRIBL3DPROC;
pub extern var __glewVertexAttribL3dv: PFNGLVERTEXATTRIBL3DVPROC;
pub extern var __glewVertexAttribL4d: PFNGLVERTEXATTRIBL4DPROC;
pub extern var __glewVertexAttribL4dv: PFNGLVERTEXATTRIBL4DVPROC;
pub extern var __glewVertexAttribLPointer: PFNGLVERTEXATTRIBLPOINTERPROC;
pub extern var __glewBindVertexBuffer: PFNGLBINDVERTEXBUFFERPROC;
pub extern var __glewVertexArrayBindVertexBufferEXT: PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC;
pub extern var __glewVertexArrayVertexAttribBindingEXT: PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC;
pub extern var __glewVertexArrayVertexAttribFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC;
pub extern var __glewVertexArrayVertexAttribIFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC;
pub extern var __glewVertexArrayVertexAttribLFormatEXT: PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC;
pub extern var __glewVertexArrayVertexBindingDivisorEXT: PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC;
pub extern var __glewVertexAttribBinding: PFNGLVERTEXATTRIBBINDINGPROC;
pub extern var __glewVertexAttribFormat: PFNGLVERTEXATTRIBFORMATPROC;
pub extern var __glewVertexAttribIFormat: PFNGLVERTEXATTRIBIFORMATPROC;
pub extern var __glewVertexAttribLFormat: PFNGLVERTEXATTRIBLFORMATPROC;
pub extern var __glewVertexBindingDivisor: PFNGLVERTEXBINDINGDIVISORPROC;
pub extern var __glewVertexBlendARB: PFNGLVERTEXBLENDARBPROC;
pub extern var __glewWeightPointerARB: PFNGLWEIGHTPOINTERARBPROC;
pub extern var __glewWeightbvARB: PFNGLWEIGHTBVARBPROC;
pub extern var __glewWeightdvARB: PFNGLWEIGHTDVARBPROC;
pub extern var __glewWeightfvARB: PFNGLWEIGHTFVARBPROC;
pub extern var __glewWeightivARB: PFNGLWEIGHTIVARBPROC;
pub extern var __glewWeightsvARB: PFNGLWEIGHTSVARBPROC;
pub extern var __glewWeightubvARB: PFNGLWEIGHTUBVARBPROC;
pub extern var __glewWeightuivARB: PFNGLWEIGHTUIVARBPROC;
pub extern var __glewWeightusvARB: PFNGLWEIGHTUSVARBPROC;
pub extern var __glewBindBufferARB: PFNGLBINDBUFFERARBPROC;
pub extern var __glewBufferDataARB: PFNGLBUFFERDATAARBPROC;
pub extern var __glewBufferSubDataARB: PFNGLBUFFERSUBDATAARBPROC;
pub extern var __glewDeleteBuffersARB: PFNGLDELETEBUFFERSARBPROC;
pub extern var __glewGenBuffersARB: PFNGLGENBUFFERSARBPROC;
pub extern var __glewGetBufferParameterivARB: PFNGLGETBUFFERPARAMETERIVARBPROC;
pub extern var __glewGetBufferPointervARB: PFNGLGETBUFFERPOINTERVARBPROC;
pub extern var __glewGetBufferSubDataARB: PFNGLGETBUFFERSUBDATAARBPROC;
pub extern var __glewIsBufferARB: PFNGLISBUFFERARBPROC;
pub extern var __glewMapBufferARB: PFNGLMAPBUFFERARBPROC;
pub extern var __glewUnmapBufferARB: PFNGLUNMAPBUFFERARBPROC;
pub extern var __glewBindProgramARB: PFNGLBINDPROGRAMARBPROC;
pub extern var __glewDeleteProgramsARB: PFNGLDELETEPROGRAMSARBPROC;
pub extern var __glewDisableVertexAttribArrayARB: PFNGLDISABLEVERTEXATTRIBARRAYARBPROC;
pub extern var __glewEnableVertexAttribArrayARB: PFNGLENABLEVERTEXATTRIBARRAYARBPROC;
pub extern var __glewGenProgramsARB: PFNGLGENPROGRAMSARBPROC;
pub extern var __glewGetProgramEnvParameterdvARB: PFNGLGETPROGRAMENVPARAMETERDVARBPROC;
pub extern var __glewGetProgramEnvParameterfvARB: PFNGLGETPROGRAMENVPARAMETERFVARBPROC;
pub extern var __glewGetProgramLocalParameterdvARB: PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC;
pub extern var __glewGetProgramLocalParameterfvARB: PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC;
pub extern var __glewGetProgramStringARB: PFNGLGETPROGRAMSTRINGARBPROC;
pub extern var __glewGetProgramivARB: PFNGLGETPROGRAMIVARBPROC;
pub extern var __glewGetVertexAttribPointervARB: PFNGLGETVERTEXATTRIBPOINTERVARBPROC;
pub extern var __glewGetVertexAttribdvARB: PFNGLGETVERTEXATTRIBDVARBPROC;
pub extern var __glewGetVertexAttribfvARB: PFNGLGETVERTEXATTRIBFVARBPROC;
pub extern var __glewGetVertexAttribivARB: PFNGLGETVERTEXATTRIBIVARBPROC;
pub extern var __glewIsProgramARB: PFNGLISPROGRAMARBPROC;
pub extern var __glewProgramEnvParameter4dARB: PFNGLPROGRAMENVPARAMETER4DARBPROC;
pub extern var __glewProgramEnvParameter4dvARB: PFNGLPROGRAMENVPARAMETER4DVARBPROC;
pub extern var __glewProgramEnvParameter4fARB: PFNGLPROGRAMENVPARAMETER4FARBPROC;
pub extern var __glewProgramEnvParameter4fvARB: PFNGLPROGRAMENVPARAMETER4FVARBPROC;
pub extern var __glewProgramLocalParameter4dARB: PFNGLPROGRAMLOCALPARAMETER4DARBPROC;
pub extern var __glewProgramLocalParameter4dvARB: PFNGLPROGRAMLOCALPARAMETER4DVARBPROC;
pub extern var __glewProgramLocalParameter4fARB: PFNGLPROGRAMLOCALPARAMETER4FARBPROC;
pub extern var __glewProgramLocalParameter4fvARB: PFNGLPROGRAMLOCALPARAMETER4FVARBPROC;
pub extern var __glewProgramStringARB: PFNGLPROGRAMSTRINGARBPROC;
pub extern var __glewVertexAttrib1dARB: PFNGLVERTEXATTRIB1DARBPROC;
pub extern var __glewVertexAttrib1dvARB: PFNGLVERTEXATTRIB1DVARBPROC;
pub extern var __glewVertexAttrib1fARB: PFNGLVERTEXATTRIB1FARBPROC;
pub extern var __glewVertexAttrib1fvARB: PFNGLVERTEXATTRIB1FVARBPROC;
pub extern var __glewVertexAttrib1sARB: PFNGLVERTEXATTRIB1SARBPROC;
pub extern var __glewVertexAttrib1svARB: PFNGLVERTEXATTRIB1SVARBPROC;
pub extern var __glewVertexAttrib2dARB: PFNGLVERTEXATTRIB2DARBPROC;
pub extern var __glewVertexAttrib2dvARB: PFNGLVERTEXATTRIB2DVARBPROC;
pub extern var __glewVertexAttrib2fARB: PFNGLVERTEXATTRIB2FARBPROC;
pub extern var __glewVertexAttrib2fvARB: PFNGLVERTEXATTRIB2FVARBPROC;
pub extern var __glewVertexAttrib2sARB: PFNGLVERTEXATTRIB2SARBPROC;
pub extern var __glewVertexAttrib2svARB: PFNGLVERTEXATTRIB2SVARBPROC;
pub extern var __glewVertexAttrib3dARB: PFNGLVERTEXATTRIB3DARBPROC;
pub extern var __glewVertexAttrib3dvARB: PFNGLVERTEXATTRIB3DVARBPROC;
pub extern var __glewVertexAttrib3fARB: PFNGLVERTEXATTRIB3FARBPROC;
pub extern var __glewVertexAttrib3fvARB: PFNGLVERTEXATTRIB3FVARBPROC;
pub extern var __glewVertexAttrib3sARB: PFNGLVERTEXATTRIB3SARBPROC;
pub extern var __glewVertexAttrib3svARB: PFNGLVERTEXATTRIB3SVARBPROC;
pub extern var __glewVertexAttrib4NbvARB: PFNGLVERTEXATTRIB4NBVARBPROC;
pub extern var __glewVertexAttrib4NivARB: PFNGLVERTEXATTRIB4NIVARBPROC;
pub extern var __glewVertexAttrib4NsvARB: PFNGLVERTEXATTRIB4NSVARBPROC;
pub extern var __glewVertexAttrib4NubARB: PFNGLVERTEXATTRIB4NUBARBPROC;
pub extern var __glewVertexAttrib4NubvARB: PFNGLVERTEXATTRIB4NUBVARBPROC;
pub extern var __glewVertexAttrib4NuivARB: PFNGLVERTEXATTRIB4NUIVARBPROC;
pub extern var __glewVertexAttrib4NusvARB: PFNGLVERTEXATTRIB4NUSVARBPROC;
pub extern var __glewVertexAttrib4bvARB: PFNGLVERTEXATTRIB4BVARBPROC;
pub extern var __glewVertexAttrib4dARB: PFNGLVERTEXATTRIB4DARBPROC;
pub extern var __glewVertexAttrib4dvARB: PFNGLVERTEXATTRIB4DVARBPROC;
pub extern var __glewVertexAttrib4fARB: PFNGLVERTEXATTRIB4FARBPROC;
pub extern var __glewVertexAttrib4fvARB: PFNGLVERTEXATTRIB4FVARBPROC;
pub extern var __glewVertexAttrib4ivARB: PFNGLVERTEXATTRIB4IVARBPROC;
pub extern var __glewVertexAttrib4sARB: PFNGLVERTEXATTRIB4SARBPROC;
pub extern var __glewVertexAttrib4svARB: PFNGLVERTEXATTRIB4SVARBPROC;
pub extern var __glewVertexAttrib4ubvARB: PFNGLVERTEXATTRIB4UBVARBPROC;
pub extern var __glewVertexAttrib4uivARB: PFNGLVERTEXATTRIB4UIVARBPROC;
pub extern var __glewVertexAttrib4usvARB: PFNGLVERTEXATTRIB4USVARBPROC;
pub extern var __glewVertexAttribPointerARB: PFNGLVERTEXATTRIBPOINTERARBPROC;
pub extern var __glewBindAttribLocationARB: PFNGLBINDATTRIBLOCATIONARBPROC;
pub extern var __glewGetActiveAttribARB: PFNGLGETACTIVEATTRIBARBPROC;
pub extern var __glewGetAttribLocationARB: PFNGLGETATTRIBLOCATIONARBPROC;
pub extern var __glewColorP3ui: PFNGLCOLORP3UIPROC;
pub extern var __glewColorP3uiv: PFNGLCOLORP3UIVPROC;
pub extern var __glewColorP4ui: PFNGLCOLORP4UIPROC;
pub extern var __glewColorP4uiv: PFNGLCOLORP4UIVPROC;
pub extern var __glewMultiTexCoordP1ui: PFNGLMULTITEXCOORDP1UIPROC;
pub extern var __glewMultiTexCoordP1uiv: PFNGLMULTITEXCOORDP1UIVPROC;
pub extern var __glewMultiTexCoordP2ui: PFNGLMULTITEXCOORDP2UIPROC;
pub extern var __glewMultiTexCoordP2uiv: PFNGLMULTITEXCOORDP2UIVPROC;
pub extern var __glewMultiTexCoordP3ui: PFNGLMULTITEXCOORDP3UIPROC;
pub extern var __glewMultiTexCoordP3uiv: PFNGLMULTITEXCOORDP3UIVPROC;
pub extern var __glewMultiTexCoordP4ui: PFNGLMULTITEXCOORDP4UIPROC;
pub extern var __glewMultiTexCoordP4uiv: PFNGLMULTITEXCOORDP4UIVPROC;
pub extern var __glewNormalP3ui: PFNGLNORMALP3UIPROC;
pub extern var __glewNormalP3uiv: PFNGLNORMALP3UIVPROC;
pub extern var __glewSecondaryColorP3ui: PFNGLSECONDARYCOLORP3UIPROC;
pub extern var __glewSecondaryColorP3uiv: PFNGLSECONDARYCOLORP3UIVPROC;
pub extern var __glewTexCoordP1ui: PFNGLTEXCOORDP1UIPROC;
pub extern var __glewTexCoordP1uiv: PFNGLTEXCOORDP1UIVPROC;
pub extern var __glewTexCoordP2ui: PFNGLTEXCOORDP2UIPROC;
pub extern var __glewTexCoordP2uiv: PFNGLTEXCOORDP2UIVPROC;
pub extern var __glewTexCoordP3ui: PFNGLTEXCOORDP3UIPROC;
pub extern var __glewTexCoordP3uiv: PFNGLTEXCOORDP3UIVPROC;
pub extern var __glewTexCoordP4ui: PFNGLTEXCOORDP4UIPROC;
pub extern var __glewTexCoordP4uiv: PFNGLTEXCOORDP4UIVPROC;
pub extern var __glewVertexAttribP1ui: PFNGLVERTEXATTRIBP1UIPROC;
pub extern var __glewVertexAttribP1uiv: PFNGLVERTEXATTRIBP1UIVPROC;
pub extern var __glewVertexAttribP2ui: PFNGLVERTEXATTRIBP2UIPROC;
pub extern var __glewVertexAttribP2uiv: PFNGLVERTEXATTRIBP2UIVPROC;
pub extern var __glewVertexAttribP3ui: PFNGLVERTEXATTRIBP3UIPROC;
pub extern var __glewVertexAttribP3uiv: PFNGLVERTEXATTRIBP3UIVPROC;
pub extern var __glewVertexAttribP4ui: PFNGLVERTEXATTRIBP4UIPROC;
pub extern var __glewVertexAttribP4uiv: PFNGLVERTEXATTRIBP4UIVPROC;
pub extern var __glewVertexP2ui: PFNGLVERTEXP2UIPROC;
pub extern var __glewVertexP2uiv: PFNGLVERTEXP2UIVPROC;
pub extern var __glewVertexP3ui: PFNGLVERTEXP3UIPROC;
pub extern var __glewVertexP3uiv: PFNGLVERTEXP3UIVPROC;
pub extern var __glewVertexP4ui: PFNGLVERTEXP4UIPROC;
pub extern var __glewVertexP4uiv: PFNGLVERTEXP4UIVPROC;
pub extern var __glewDepthRangeArrayv: PFNGLDEPTHRANGEARRAYVPROC;
pub extern var __glewDepthRangeIndexed: PFNGLDEPTHRANGEINDEXEDPROC;
pub extern var __glewGetDoublei_v: PFNGLGETDOUBLEI_VPROC;
pub extern var __glewGetFloati_v: PFNGLGETFLOATI_VPROC;
pub extern var __glewScissorArrayv: PFNGLSCISSORARRAYVPROC;
pub extern var __glewScissorIndexed: PFNGLSCISSORINDEXEDPROC;
pub extern var __glewScissorIndexedv: PFNGLSCISSORINDEXEDVPROC;
pub extern var __glewViewportArrayv: PFNGLVIEWPORTARRAYVPROC;
pub extern var __glewViewportIndexedf: PFNGLVIEWPORTINDEXEDFPROC;
pub extern var __glewViewportIndexedfv: PFNGLVIEWPORTINDEXEDFVPROC;
pub extern var __glewWindowPos2dARB: PFNGLWINDOWPOS2DARBPROC;
pub extern var __glewWindowPos2dvARB: PFNGLWINDOWPOS2DVARBPROC;
pub extern var __glewWindowPos2fARB: PFNGLWINDOWPOS2FARBPROC;
pub extern var __glewWindowPos2fvARB: PFNGLWINDOWPOS2FVARBPROC;
pub extern var __glewWindowPos2iARB: PFNGLWINDOWPOS2IARBPROC;
pub extern var __glewWindowPos2ivARB: PFNGLWINDOWPOS2IVARBPROC;
pub extern var __glewWindowPos2sARB: PFNGLWINDOWPOS2SARBPROC;
pub extern var __glewWindowPos2svARB: PFNGLWINDOWPOS2SVARBPROC;
pub extern var __glewWindowPos3dARB: PFNGLWINDOWPOS3DARBPROC;
pub extern var __glewWindowPos3dvARB: PFNGLWINDOWPOS3DVARBPROC;
pub extern var __glewWindowPos3fARB: PFNGLWINDOWPOS3FARBPROC;
pub extern var __glewWindowPos3fvARB: PFNGLWINDOWPOS3FVARBPROC;
pub extern var __glewWindowPos3iARB: PFNGLWINDOWPOS3IARBPROC;
pub extern var __glewWindowPos3ivARB: PFNGLWINDOWPOS3IVARBPROC;
pub extern var __glewWindowPos3sARB: PFNGLWINDOWPOS3SARBPROC;
pub extern var __glewWindowPos3svARB: PFNGLWINDOWPOS3SVARBPROC;
pub extern var __glewDrawBuffersATI: PFNGLDRAWBUFFERSATIPROC;
pub extern var __glewDrawElementArrayATI: PFNGLDRAWELEMENTARRAYATIPROC;
pub extern var __glewDrawRangeElementArrayATI: PFNGLDRAWRANGEELEMENTARRAYATIPROC;
pub extern var __glewElementPointerATI: PFNGLELEMENTPOINTERATIPROC;
pub extern var __glewGetTexBumpParameterfvATI: PFNGLGETTEXBUMPPARAMETERFVATIPROC;
pub extern var __glewGetTexBumpParameterivATI: PFNGLGETTEXBUMPPARAMETERIVATIPROC;
pub extern var __glewTexBumpParameterfvATI: PFNGLTEXBUMPPARAMETERFVATIPROC;
pub extern var __glewTexBumpParameterivATI: PFNGLTEXBUMPPARAMETERIVATIPROC;
pub extern var __glewAlphaFragmentOp1ATI: PFNGLALPHAFRAGMENTOP1ATIPROC;
pub extern var __glewAlphaFragmentOp2ATI: PFNGLALPHAFRAGMENTOP2ATIPROC;
pub extern var __glewAlphaFragmentOp3ATI: PFNGLALPHAFRAGMENTOP3ATIPROC;
pub extern var __glewBeginFragmentShaderATI: PFNGLBEGINFRAGMENTSHADERATIPROC;
pub extern var __glewBindFragmentShaderATI: PFNGLBINDFRAGMENTSHADERATIPROC;
pub extern var __glewColorFragmentOp1ATI: PFNGLCOLORFRAGMENTOP1ATIPROC;
pub extern var __glewColorFragmentOp2ATI: PFNGLCOLORFRAGMENTOP2ATIPROC;
pub extern var __glewColorFragmentOp3ATI: PFNGLCOLORFRAGMENTOP3ATIPROC;
pub extern var __glewDeleteFragmentShaderATI: PFNGLDELETEFRAGMENTSHADERATIPROC;
pub extern var __glewEndFragmentShaderATI: PFNGLENDFRAGMENTSHADERATIPROC;
pub extern var __glewGenFragmentShadersATI: PFNGLGENFRAGMENTSHADERSATIPROC;
pub extern var __glewPassTexCoordATI: PFNGLPASSTEXCOORDATIPROC;
pub extern var __glewSampleMapATI: PFNGLSAMPLEMAPATIPROC;
pub extern var __glewSetFragmentShaderConstantATI: PFNGLSETFRAGMENTSHADERCONSTANTATIPROC;
pub extern var __glewMapObjectBufferATI: PFNGLMAPOBJECTBUFFERATIPROC;
pub extern var __glewUnmapObjectBufferATI: PFNGLUNMAPOBJECTBUFFERATIPROC;
pub extern var __glewPNTrianglesfATI: PFNGLPNTRIANGLESFATIPROC;
pub extern var __glewPNTrianglesiATI: PFNGLPNTRIANGLESIATIPROC;
pub extern var __glewStencilFuncSeparateATI: PFNGLSTENCILFUNCSEPARATEATIPROC;
pub extern var __glewStencilOpSeparateATI: PFNGLSTENCILOPSEPARATEATIPROC;
pub extern var __glewArrayObjectATI: PFNGLARRAYOBJECTATIPROC;
pub extern var __glewFreeObjectBufferATI: PFNGLFREEOBJECTBUFFERATIPROC;
pub extern var __glewGetArrayObjectfvATI: PFNGLGETARRAYOBJECTFVATIPROC;
pub extern var __glewGetArrayObjectivATI: PFNGLGETARRAYOBJECTIVATIPROC;
pub extern var __glewGetObjectBufferfvATI: PFNGLGETOBJECTBUFFERFVATIPROC;
pub extern var __glewGetObjectBufferivATI: PFNGLGETOBJECTBUFFERIVATIPROC;
pub extern var __glewGetVariantArrayObjectfvATI: PFNGLGETVARIANTARRAYOBJECTFVATIPROC;
pub extern var __glewGetVariantArrayObjectivATI: PFNGLGETVARIANTARRAYOBJECTIVATIPROC;
pub extern var __glewIsObjectBufferATI: PFNGLISOBJECTBUFFERATIPROC;
pub extern var __glewNewObjectBufferATI: PFNGLNEWOBJECTBUFFERATIPROC;
pub extern var __glewUpdateObjectBufferATI: PFNGLUPDATEOBJECTBUFFERATIPROC;
pub extern var __glewVariantArrayObjectATI: PFNGLVARIANTARRAYOBJECTATIPROC;
pub extern var __glewGetVertexAttribArrayObjectfvATI: PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC;
pub extern var __glewGetVertexAttribArrayObjectivATI: PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC;
pub extern var __glewVertexAttribArrayObjectATI: PFNGLVERTEXATTRIBARRAYOBJECTATIPROC;
pub extern var __glewClientActiveVertexStreamATI: PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC;
pub extern var __glewNormalStream3bATI: PFNGLNORMALSTREAM3BATIPROC;
pub extern var __glewNormalStream3bvATI: PFNGLNORMALSTREAM3BVATIPROC;
pub extern var __glewNormalStream3dATI: PFNGLNORMALSTREAM3DATIPROC;
pub extern var __glewNormalStream3dvATI: PFNGLNORMALSTREAM3DVATIPROC;
pub extern var __glewNormalStream3fATI: PFNGLNORMALSTREAM3FATIPROC;
pub extern var __glewNormalStream3fvATI: PFNGLNORMALSTREAM3FVATIPROC;
pub extern var __glewNormalStream3iATI: PFNGLNORMALSTREAM3IATIPROC;
pub extern var __glewNormalStream3ivATI: PFNGLNORMALSTREAM3IVATIPROC;
pub extern var __glewNormalStream3sATI: PFNGLNORMALSTREAM3SATIPROC;
pub extern var __glewNormalStream3svATI: PFNGLNORMALSTREAM3SVATIPROC;
pub extern var __glewVertexBlendEnvfATI: PFNGLVERTEXBLENDENVFATIPROC;
pub extern var __glewVertexBlendEnviATI: PFNGLVERTEXBLENDENVIATIPROC;
pub extern var __glewVertexStream1dATI: PFNGLVERTEXSTREAM1DATIPROC;
pub extern var __glewVertexStream1dvATI: PFNGLVERTEXSTREAM1DVATIPROC;
pub extern var __glewVertexStream1fATI: PFNGLVERTEXSTREAM1FATIPROC;
pub extern var __glewVertexStream1fvATI: PFNGLVERTEXSTREAM1FVATIPROC;
pub extern var __glewVertexStream1iATI: PFNGLVERTEXSTREAM1IATIPROC;
pub extern var __glewVertexStream1ivATI: PFNGLVERTEXSTREAM1IVATIPROC;
pub extern var __glewVertexStream1sATI: PFNGLVERTEXSTREAM1SATIPROC;
pub extern var __glewVertexStream1svATI: PFNGLVERTEXSTREAM1SVATIPROC;
pub extern var __glewVertexStream2dATI: PFNGLVERTEXSTREAM2DATIPROC;
pub extern var __glewVertexStream2dvATI: PFNGLVERTEXSTREAM2DVATIPROC;
pub extern var __glewVertexStream2fATI: PFNGLVERTEXSTREAM2FATIPROC;
pub extern var __glewVertexStream2fvATI: PFNGLVERTEXSTREAM2FVATIPROC;
pub extern var __glewVertexStream2iATI: PFNGLVERTEXSTREAM2IATIPROC;
pub extern var __glewVertexStream2ivATI: PFNGLVERTEXSTREAM2IVATIPROC;
pub extern var __glewVertexStream2sATI: PFNGLVERTEXSTREAM2SATIPROC;
pub extern var __glewVertexStream2svATI: PFNGLVERTEXSTREAM2SVATIPROC;
pub extern var __glewVertexStream3dATI: PFNGLVERTEXSTREAM3DATIPROC;
pub extern var __glewVertexStream3dvATI: PFNGLVERTEXSTREAM3DVATIPROC;
pub extern var __glewVertexStream3fATI: PFNGLVERTEXSTREAM3FATIPROC;
pub extern var __glewVertexStream3fvATI: PFNGLVERTEXSTREAM3FVATIPROC;
pub extern var __glewVertexStream3iATI: PFNGLVERTEXSTREAM3IATIPROC;
pub extern var __glewVertexStream3ivATI: PFNGLVERTEXSTREAM3IVATIPROC;
pub extern var __glewVertexStream3sATI: PFNGLVERTEXSTREAM3SATIPROC;
pub extern var __glewVertexStream3svATI: PFNGLVERTEXSTREAM3SVATIPROC;
pub extern var __glewVertexStream4dATI: PFNGLVERTEXSTREAM4DATIPROC;
pub extern var __glewVertexStream4dvATI: PFNGLVERTEXSTREAM4DVATIPROC;
pub extern var __glewVertexStream4fATI: PFNGLVERTEXSTREAM4FATIPROC;
pub extern var __glewVertexStream4fvATI: PFNGLVERTEXSTREAM4FVATIPROC;
pub extern var __glewVertexStream4iATI: PFNGLVERTEXSTREAM4IATIPROC;
pub extern var __glewVertexStream4ivATI: PFNGLVERTEXSTREAM4IVATIPROC;
pub extern var __glewVertexStream4sATI: PFNGLVERTEXSTREAM4SATIPROC;
pub extern var __glewVertexStream4svATI: PFNGLVERTEXSTREAM4SVATIPROC;
pub extern var __glewEGLImageTargetTexStorageEXT: PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC;
pub extern var __glewEGLImageTargetTextureStorageEXT: PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC;
pub extern var __glewDrawArraysInstancedBaseInstanceEXT: PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC;
pub extern var __glewDrawElementsInstancedBaseInstanceEXT: PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC;
pub extern var __glewDrawElementsInstancedBaseVertexBaseInstanceEXT: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC;
pub extern var __glewGetUniformBufferSizeEXT: PFNGLGETUNIFORMBUFFERSIZEEXTPROC;
pub extern var __glewGetUniformOffsetEXT: PFNGLGETUNIFORMOFFSETEXTPROC;
pub extern var __glewUniformBufferEXT: PFNGLUNIFORMBUFFEREXTPROC;
pub extern var __glewBlendColorEXT: PFNGLBLENDCOLOREXTPROC;
pub extern var __glewBlendEquationSeparateEXT: PFNGLBLENDEQUATIONSEPARATEEXTPROC;
pub extern var __glewBindFragDataLocationIndexedEXT: PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC;
pub extern var __glewGetFragDataIndexEXT: PFNGLGETFRAGDATAINDEXEXTPROC;
pub extern var __glewGetProgramResourceLocationIndexEXT: PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC;
pub extern var __glewBlendFuncSeparateEXT: PFNGLBLENDFUNCSEPARATEEXTPROC;
pub extern var __glewBlendEquationEXT: PFNGLBLENDEQUATIONEXTPROC;
pub extern var __glewBufferStorageEXT: PFNGLBUFFERSTORAGEEXTPROC;
pub extern var __glewNamedBufferStorageEXT: PFNGLNAMEDBUFFERSTORAGEEXTPROC;
pub extern var __glewClearTexImageEXT: PFNGLCLEARTEXIMAGEEXTPROC;
pub extern var __glewClearTexSubImageEXT: PFNGLCLEARTEXSUBIMAGEEXTPROC;
pub extern var __glewClipControlEXT: PFNGLCLIPCONTROLEXTPROC;
pub extern var __glewColorSubTableEXT: PFNGLCOLORSUBTABLEEXTPROC;
pub extern var __glewCopyColorSubTableEXT: PFNGLCOPYCOLORSUBTABLEEXTPROC;
pub extern var __glewLockArraysEXT: PFNGLLOCKARRAYSEXTPROC;
pub extern var __glewUnlockArraysEXT: PFNGLUNLOCKARRAYSEXTPROC;
pub extern var __glewConvolutionFilter1DEXT: PFNGLCONVOLUTIONFILTER1DEXTPROC;
pub extern var __glewConvolutionFilter2DEXT: PFNGLCONVOLUTIONFILTER2DEXTPROC;
pub extern var __glewConvolutionParameterfEXT: PFNGLCONVOLUTIONPARAMETERFEXTPROC;
pub extern var __glewConvolutionParameterfvEXT: PFNGLCONVOLUTIONPARAMETERFVEXTPROC;
pub extern var __glewConvolutionParameteriEXT: PFNGLCONVOLUTIONPARAMETERIEXTPROC;
pub extern var __glewConvolutionParameterivEXT: PFNGLCONVOLUTIONPARAMETERIVEXTPROC;
pub extern var __glewCopyConvolutionFilter1DEXT: PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC;
pub extern var __glewCopyConvolutionFilter2DEXT: PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC;
pub extern var __glewGetConvolutionFilterEXT: PFNGLGETCONVOLUTIONFILTEREXTPROC;
pub extern var __glewGetConvolutionParameterfvEXT: PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC;
pub extern var __glewGetConvolutionParameterivEXT: PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC;
pub extern var __glewGetSeparableFilterEXT: PFNGLGETSEPARABLEFILTEREXTPROC;
pub extern var __glewSeparableFilter2DEXT: PFNGLSEPARABLEFILTER2DEXTPROC;
pub extern var __glewBinormalPointerEXT: PFNGLBINORMALPOINTEREXTPROC;
pub extern var __glewTangentPointerEXT: PFNGLTANGENTPOINTEREXTPROC;
pub extern var __glewCopyImageSubDataEXT: PFNGLCOPYIMAGESUBDATAEXTPROC;
pub extern var __glewCopyTexImage1DEXT: PFNGLCOPYTEXIMAGE1DEXTPROC;
pub extern var __glewCopyTexImage2DEXT: PFNGLCOPYTEXIMAGE2DEXTPROC;
pub extern var __glewCopyTexSubImage1DEXT: PFNGLCOPYTEXSUBIMAGE1DEXTPROC;
pub extern var __glewCopyTexSubImage2DEXT: PFNGLCOPYTEXSUBIMAGE2DEXTPROC;
pub extern var __glewCopyTexSubImage3DEXT: PFNGLCOPYTEXSUBIMAGE3DEXTPROC;
pub extern var __glewCullParameterdvEXT: PFNGLCULLPARAMETERDVEXTPROC;
pub extern var __glewCullParameterfvEXT: PFNGLCULLPARAMETERFVEXTPROC;
pub extern var __glewGetObjectLabelEXT: PFNGLGETOBJECTLABELEXTPROC;
pub extern var __glewLabelObjectEXT: PFNGLLABELOBJECTEXTPROC;
pub extern var __glewInsertEventMarkerEXT: PFNGLINSERTEVENTMARKEREXTPROC;
pub extern var __glewPopGroupMarkerEXT: PFNGLPOPGROUPMARKEREXTPROC;
pub extern var __glewPushGroupMarkerEXT: PFNGLPUSHGROUPMARKEREXTPROC;
pub extern var __glewDepthBoundsEXT: PFNGLDEPTHBOUNDSEXTPROC;
pub extern var __glewBindMultiTextureEXT: PFNGLBINDMULTITEXTUREEXTPROC;
pub extern var __glewCheckNamedFramebufferStatusEXT: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC;
pub extern var __glewClientAttribDefaultEXT: PFNGLCLIENTATTRIBDEFAULTEXTPROC;
pub extern var __glewCompressedMultiTexImage1DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC;
pub extern var __glewCompressedMultiTexImage2DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC;
pub extern var __glewCompressedMultiTexImage3DEXT: PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC;
pub extern var __glewCompressedMultiTexSubImage1DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC;
pub extern var __glewCompressedMultiTexSubImage2DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC;
pub extern var __glewCompressedMultiTexSubImage3DEXT: PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC;
pub extern var __glewCompressedTextureImage1DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC;
pub extern var __glewCompressedTextureImage2DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC;
pub extern var __glewCompressedTextureImage3DEXT: PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC;
pub extern var __glewCompressedTextureSubImage1DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC;
pub extern var __glewCompressedTextureSubImage2DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC;
pub extern var __glewCompressedTextureSubImage3DEXT: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC;
pub extern var __glewCopyMultiTexImage1DEXT: PFNGLCOPYMULTITEXIMAGE1DEXTPROC;
pub extern var __glewCopyMultiTexImage2DEXT: PFNGLCOPYMULTITEXIMAGE2DEXTPROC;
pub extern var __glewCopyMultiTexSubImage1DEXT: PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC;
pub extern var __glewCopyMultiTexSubImage2DEXT: PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC;
pub extern var __glewCopyMultiTexSubImage3DEXT: PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC;
pub extern var __glewCopyTextureImage1DEXT: PFNGLCOPYTEXTUREIMAGE1DEXTPROC;
pub extern var __glewCopyTextureImage2DEXT: PFNGLCOPYTEXTUREIMAGE2DEXTPROC;
pub extern var __glewCopyTextureSubImage1DEXT: PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC;
pub extern var __glewCopyTextureSubImage2DEXT: PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC;
pub extern var __glewCopyTextureSubImage3DEXT: PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC;
pub extern var __glewDisableClientStateIndexedEXT: PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC;
pub extern var __glewDisableClientStateiEXT: PFNGLDISABLECLIENTSTATEIEXTPROC;
pub extern var __glewDisableVertexArrayAttribEXT: PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC;
pub extern var __glewDisableVertexArrayEXT: PFNGLDISABLEVERTEXARRAYEXTPROC;
pub extern var __glewEnableClientStateIndexedEXT: PFNGLENABLECLIENTSTATEINDEXEDEXTPROC;
pub extern var __glewEnableClientStateiEXT: PFNGLENABLECLIENTSTATEIEXTPROC;
pub extern var __glewEnableVertexArrayAttribEXT: PFNGLENABLEVERTEXARRAYATTRIBEXTPROC;
pub extern var __glewEnableVertexArrayEXT: PFNGLENABLEVERTEXARRAYEXTPROC;
pub extern var __glewFlushMappedNamedBufferRangeEXT: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC;
pub extern var __glewFramebufferDrawBufferEXT: PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC;
pub extern var __glewFramebufferDrawBuffersEXT: PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC;
pub extern var __glewFramebufferReadBufferEXT: PFNGLFRAMEBUFFERREADBUFFEREXTPROC;
pub extern var __glewGenerateMultiTexMipmapEXT: PFNGLGENERATEMULTITEXMIPMAPEXTPROC;
pub extern var __glewGenerateTextureMipmapEXT: PFNGLGENERATETEXTUREMIPMAPEXTPROC;
pub extern var __glewGetCompressedMultiTexImageEXT: PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC;
pub extern var __glewGetCompressedTextureImageEXT: PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC;
pub extern var __glewGetDoubleIndexedvEXT: PFNGLGETDOUBLEINDEXEDVEXTPROC;
pub extern var __glewGetDoublei_vEXT: PFNGLGETDOUBLEI_VEXTPROC;
pub extern var __glewGetFloatIndexedvEXT: PFNGLGETFLOATINDEXEDVEXTPROC;
pub extern var __glewGetFloati_vEXT: PFNGLGETFLOATI_VEXTPROC;
pub extern var __glewGetFramebufferParameterivEXT: PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC;
pub extern var __glewGetMultiTexEnvfvEXT: PFNGLGETMULTITEXENVFVEXTPROC;
pub extern var __glewGetMultiTexEnvivEXT: PFNGLGETMULTITEXENVIVEXTPROC;
pub extern var __glewGetMultiTexGendvEXT: PFNGLGETMULTITEXGENDVEXTPROC;
pub extern var __glewGetMultiTexGenfvEXT: PFNGLGETMULTITEXGENFVEXTPROC;
pub extern var __glewGetMultiTexGenivEXT: PFNGLGETMULTITEXGENIVEXTPROC;
pub extern var __glewGetMultiTexImageEXT: PFNGLGETMULTITEXIMAGEEXTPROC;
pub extern var __glewGetMultiTexLevelParameterfvEXT: PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC;
pub extern var __glewGetMultiTexLevelParameterivEXT: PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC;
pub extern var __glewGetMultiTexParameterIivEXT: PFNGLGETMULTITEXPARAMETERIIVEXTPROC;
pub extern var __glewGetMultiTexParameterIuivEXT: PFNGLGETMULTITEXPARAMETERIUIVEXTPROC;
pub extern var __glewGetMultiTexParameterfvEXT: PFNGLGETMULTITEXPARAMETERFVEXTPROC;
pub extern var __glewGetMultiTexParameterivEXT: PFNGLGETMULTITEXPARAMETERIVEXTPROC;
pub extern var __glewGetNamedBufferParameterivEXT: PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC;
pub extern var __glewGetNamedBufferPointervEXT: PFNGLGETNAMEDBUFFERPOINTERVEXTPROC;
pub extern var __glewGetNamedBufferSubDataEXT: PFNGLGETNAMEDBUFFERSUBDATAEXTPROC;
pub extern var __glewGetNamedFramebufferAttachmentParameterivEXT: PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterIivEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterIuivEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterdvEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC;
pub extern var __glewGetNamedProgramLocalParameterfvEXT: PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC;
pub extern var __glewGetNamedProgramStringEXT: PFNGLGETNAMEDPROGRAMSTRINGEXTPROC;
pub extern var __glewGetNamedProgramivEXT: PFNGLGETNAMEDPROGRAMIVEXTPROC;
pub extern var __glewGetNamedRenderbufferParameterivEXT: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC;
pub extern var __glewGetPointerIndexedvEXT: PFNGLGETPOINTERINDEXEDVEXTPROC;
pub extern var __glewGetPointeri_vEXT: PFNGLGETPOINTERI_VEXTPROC;
pub extern var __glewGetTextureImageEXT: PFNGLGETTEXTUREIMAGEEXTPROC;
pub extern var __glewGetTextureLevelParameterfvEXT: PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC;
pub extern var __glewGetTextureLevelParameterivEXT: PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC;
pub extern var __glewGetTextureParameterIivEXT: PFNGLGETTEXTUREPARAMETERIIVEXTPROC;
pub extern var __glewGetTextureParameterIuivEXT: PFNGLGETTEXTUREPARAMETERIUIVEXTPROC;
pub extern var __glewGetTextureParameterfvEXT: PFNGLGETTEXTUREPARAMETERFVEXTPROC;
pub extern var __glewGetTextureParameterivEXT: PFNGLGETTEXTUREPARAMETERIVEXTPROC;
pub extern var __glewGetVertexArrayIntegeri_vEXT: PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC;
pub extern var __glewGetVertexArrayIntegervEXT: PFNGLGETVERTEXARRAYINTEGERVEXTPROC;
pub extern var __glewGetVertexArrayPointeri_vEXT: PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC;
pub extern var __glewGetVertexArrayPointervEXT: PFNGLGETVERTEXARRAYPOINTERVEXTPROC;
pub extern var __glewMapNamedBufferEXT: PFNGLMAPNAMEDBUFFEREXTPROC;
pub extern var __glewMapNamedBufferRangeEXT: PFNGLMAPNAMEDBUFFERRANGEEXTPROC;
pub extern var __glewMatrixFrustumEXT: PFNGLMATRIXFRUSTUMEXTPROC;
pub extern var __glewMatrixLoadIdentityEXT: PFNGLMATRIXLOADIDENTITYEXTPROC;
pub extern var __glewMatrixLoadTransposedEXT: PFNGLMATRIXLOADTRANSPOSEDEXTPROC;
pub extern var __glewMatrixLoadTransposefEXT: PFNGLMATRIXLOADTRANSPOSEFEXTPROC;
pub extern var __glewMatrixLoaddEXT: PFNGLMATRIXLOADDEXTPROC;
pub extern var __glewMatrixLoadfEXT: PFNGLMATRIXLOADFEXTPROC;
pub extern var __glewMatrixMultTransposedEXT: PFNGLMATRIXMULTTRANSPOSEDEXTPROC;
pub extern var __glewMatrixMultTransposefEXT: PFNGLMATRIXMULTTRANSPOSEFEXTPROC;
pub extern var __glewMatrixMultdEXT: PFNGLMATRIXMULTDEXTPROC;
pub extern var __glewMatrixMultfEXT: PFNGLMATRIXMULTFEXTPROC;
pub extern var __glewMatrixOrthoEXT: PFNGLMATRIXORTHOEXTPROC;
pub extern var __glewMatrixPopEXT: PFNGLMATRIXPOPEXTPROC;
pub extern var __glewMatrixPushEXT: PFNGLMATRIXPUSHEXTPROC;
pub extern var __glewMatrixRotatedEXT: PFNGLMATRIXROTATEDEXTPROC;
pub extern var __glewMatrixRotatefEXT: PFNGLMATRIXROTATEFEXTPROC;
pub extern var __glewMatrixScaledEXT: PFNGLMATRIXSCALEDEXTPROC;
pub extern var __glewMatrixScalefEXT: PFNGLMATRIXSCALEFEXTPROC;
pub extern var __glewMatrixTranslatedEXT: PFNGLMATRIXTRANSLATEDEXTPROC;
pub extern var __glewMatrixTranslatefEXT: PFNGLMATRIXTRANSLATEFEXTPROC;
pub extern var __glewMultiTexBufferEXT: PFNGLMULTITEXBUFFEREXTPROC;
pub extern var __glewMultiTexCoordPointerEXT: PFNGLMULTITEXCOORDPOINTEREXTPROC;
pub extern var __glewMultiTexEnvfEXT: PFNGLMULTITEXENVFEXTPROC;
pub extern var __glewMultiTexEnvfvEXT: PFNGLMULTITEXENVFVEXTPROC;
pub extern var __glewMultiTexEnviEXT: PFNGLMULTITEXENVIEXTPROC;
pub extern var __glewMultiTexEnvivEXT: PFNGLMULTITEXENVIVEXTPROC;
pub extern var __glewMultiTexGendEXT: PFNGLMULTITEXGENDEXTPROC;
pub extern var __glewMultiTexGendvEXT: PFNGLMULTITEXGENDVEXTPROC;
pub extern var __glewMultiTexGenfEXT: PFNGLMULTITEXGENFEXTPROC;
pub extern var __glewMultiTexGenfvEXT: PFNGLMULTITEXGENFVEXTPROC;
pub extern var __glewMultiTexGeniEXT: PFNGLMULTITEXGENIEXTPROC;
pub extern var __glewMultiTexGenivEXT: PFNGLMULTITEXGENIVEXTPROC;
pub extern var __glewMultiTexImage1DEXT: PFNGLMULTITEXIMAGE1DEXTPROC;
pub extern var __glewMultiTexImage2DEXT: PFNGLMULTITEXIMAGE2DEXTPROC;
pub extern var __glewMultiTexImage3DEXT: PFNGLMULTITEXIMAGE3DEXTPROC;
pub extern var __glewMultiTexParameterIivEXT: PFNGLMULTITEXPARAMETERIIVEXTPROC;
pub extern var __glewMultiTexParameterIuivEXT: PFNGLMULTITEXPARAMETERIUIVEXTPROC;
pub extern var __glewMultiTexParameterfEXT: PFNGLMULTITEXPARAMETERFEXTPROC;
pub extern var __glewMultiTexParameterfvEXT: PFNGLMULTITEXPARAMETERFVEXTPROC;
pub extern var __glewMultiTexParameteriEXT: PFNGLMULTITEXPARAMETERIEXTPROC;
pub extern var __glewMultiTexParameterivEXT: PFNGLMULTITEXPARAMETERIVEXTPROC;
pub extern var __glewMultiTexRenderbufferEXT: PFNGLMULTITEXRENDERBUFFEREXTPROC;
pub extern var __glewMultiTexSubImage1DEXT: PFNGLMULTITEXSUBIMAGE1DEXTPROC;
pub extern var __glewMultiTexSubImage2DEXT: PFNGLMULTITEXSUBIMAGE2DEXTPROC;
pub extern var __glewMultiTexSubImage3DEXT: PFNGLMULTITEXSUBIMAGE3DEXTPROC;
pub extern var __glewNamedBufferDataEXT: PFNGLNAMEDBUFFERDATAEXTPROC;
pub extern var __glewNamedBufferSubDataEXT: PFNGLNAMEDBUFFERSUBDATAEXTPROC;
pub extern var __glewNamedCopyBufferSubDataEXT: PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC;
pub extern var __glewNamedFramebufferRenderbufferEXT: PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC;
pub extern var __glewNamedFramebufferTexture1DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC;
pub extern var __glewNamedFramebufferTexture2DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC;
pub extern var __glewNamedFramebufferTexture3DEXT: PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC;
pub extern var __glewNamedFramebufferTextureEXT: PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC;
pub extern var __glewNamedFramebufferTextureFaceEXT: PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC;
pub extern var __glewNamedFramebufferTextureLayerEXT: PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC;
pub extern var __glewNamedProgramLocalParameter4dEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC;
pub extern var __glewNamedProgramLocalParameter4dvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC;
pub extern var __glewNamedProgramLocalParameter4fEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC;
pub extern var __glewNamedProgramLocalParameter4fvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4iEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4ivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4uiEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC;
pub extern var __glewNamedProgramLocalParameterI4uivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC;
pub extern var __glewNamedProgramLocalParameters4fvEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC;
pub extern var __glewNamedProgramLocalParametersI4ivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC;
pub extern var __glewNamedProgramLocalParametersI4uivEXT: PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC;
pub extern var __glewNamedProgramStringEXT: PFNGLNAMEDPROGRAMSTRINGEXTPROC;
pub extern var __glewNamedRenderbufferStorageEXT: PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC;
pub extern var __glewNamedRenderbufferStorageMultisampleCoverageEXT: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC;
pub extern var __glewNamedRenderbufferStorageMultisampleEXT: PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC;
pub extern var __glewProgramUniform1fEXT: PFNGLPROGRAMUNIFORM1FEXTPROC;
pub extern var __glewProgramUniform1fvEXT: PFNGLPROGRAMUNIFORM1FVEXTPROC;
pub extern var __glewProgramUniform1iEXT: PFNGLPROGRAMUNIFORM1IEXTPROC;
pub extern var __glewProgramUniform1ivEXT: PFNGLPROGRAMUNIFORM1IVEXTPROC;
pub extern var __glewProgramUniform1uiEXT: PFNGLPROGRAMUNIFORM1UIEXTPROC;
pub extern var __glewProgramUniform1uivEXT: PFNGLPROGRAMUNIFORM1UIVEXTPROC;
pub extern var __glewProgramUniform2fEXT: PFNGLPROGRAMUNIFORM2FEXTPROC;
pub extern var __glewProgramUniform2fvEXT: PFNGLPROGRAMUNIFORM2FVEXTPROC;
pub extern var __glewProgramUniform2iEXT: PFNGLPROGRAMUNIFORM2IEXTPROC;
pub extern var __glewProgramUniform2ivEXT: PFNGLPROGRAMUNIFORM2IVEXTPROC;
pub extern var __glewProgramUniform2uiEXT: PFNGLPROGRAMUNIFORM2UIEXTPROC;
pub extern var __glewProgramUniform2uivEXT: PFNGLPROGRAMUNIFORM2UIVEXTPROC;
pub extern var __glewProgramUniform3fEXT: PFNGLPROGRAMUNIFORM3FEXTPROC;
pub extern var __glewProgramUniform3fvEXT: PFNGLPROGRAMUNIFORM3FVEXTPROC;
pub extern var __glewProgramUniform3iEXT: PFNGLPROGRAMUNIFORM3IEXTPROC;
pub extern var __glewProgramUniform3ivEXT: PFNGLPROGRAMUNIFORM3IVEXTPROC;
pub extern var __glewProgramUniform3uiEXT: PFNGLPROGRAMUNIFORM3UIEXTPROC;
pub extern var __glewProgramUniform3uivEXT: PFNGLPROGRAMUNIFORM3UIVEXTPROC;
pub extern var __glewProgramUniform4fEXT: PFNGLPROGRAMUNIFORM4FEXTPROC;
pub extern var __glewProgramUniform4fvEXT: PFNGLPROGRAMUNIFORM4FVEXTPROC;
pub extern var __glewProgramUniform4iEXT: PFNGLPROGRAMUNIFORM4IEXTPROC;
pub extern var __glewProgramUniform4ivEXT: PFNGLPROGRAMUNIFORM4IVEXTPROC;
pub extern var __glewProgramUniform4uiEXT: PFNGLPROGRAMUNIFORM4UIEXTPROC;
pub extern var __glewProgramUniform4uivEXT: PFNGLPROGRAMUNIFORM4UIVEXTPROC;
pub extern var __glewProgramUniformMatrix2fvEXT: PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC;
pub extern var __glewProgramUniformMatrix2x3fvEXT: PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC;
pub extern var __glewProgramUniformMatrix2x4fvEXT: PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC;
pub extern var __glewProgramUniformMatrix3fvEXT: PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC;
pub extern var __glewProgramUniformMatrix3x2fvEXT: PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC;
pub extern var __glewProgramUniformMatrix3x4fvEXT: PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC;
pub extern var __glewProgramUniformMatrix4fvEXT: PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC;
pub extern var __glewProgramUniformMatrix4x2fvEXT: PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC;
pub extern var __glewProgramUniformMatrix4x3fvEXT: PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC;
pub extern var __glewPushClientAttribDefaultEXT: PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC;
pub extern var __glewTextureBufferEXT: PFNGLTEXTUREBUFFEREXTPROC;
pub extern var __glewTextureImage1DEXT: PFNGLTEXTUREIMAGE1DEXTPROC;
pub extern var __glewTextureImage2DEXT: PFNGLTEXTUREIMAGE2DEXTPROC;
pub extern var __glewTextureImage3DEXT: PFNGLTEXTUREIMAGE3DEXTPROC;
pub extern var __glewTextureParameterIivEXT: PFNGLTEXTUREPARAMETERIIVEXTPROC;
pub extern var __glewTextureParameterIuivEXT: PFNGLTEXTUREPARAMETERIUIVEXTPROC;
pub extern var __glewTextureParameterfEXT: PFNGLTEXTUREPARAMETERFEXTPROC;
pub extern var __glewTextureParameterfvEXT: PFNGLTEXTUREPARAMETERFVEXTPROC;
pub extern var __glewTextureParameteriEXT: PFNGLTEXTUREPARAMETERIEXTPROC;
pub extern var __glewTextureParameterivEXT: PFNGLTEXTUREPARAMETERIVEXTPROC;
pub extern var __glewTextureRenderbufferEXT: PFNGLTEXTURERENDERBUFFEREXTPROC;
pub extern var __glewTextureSubImage1DEXT: PFNGLTEXTURESUBIMAGE1DEXTPROC;
pub extern var __glewTextureSubImage2DEXT: PFNGLTEXTURESUBIMAGE2DEXTPROC;
pub extern var __glewTextureSubImage3DEXT: PFNGLTEXTURESUBIMAGE3DEXTPROC;
pub extern var __glewUnmapNamedBufferEXT: PFNGLUNMAPNAMEDBUFFEREXTPROC;
pub extern var __glewVertexArrayColorOffsetEXT: PFNGLVERTEXARRAYCOLOROFFSETEXTPROC;
pub extern var __glewVertexArrayEdgeFlagOffsetEXT: PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC;
pub extern var __glewVertexArrayFogCoordOffsetEXT: PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC;
pub extern var __glewVertexArrayIndexOffsetEXT: PFNGLVERTEXARRAYINDEXOFFSETEXTPROC;
pub extern var __glewVertexArrayMultiTexCoordOffsetEXT: PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC;
pub extern var __glewVertexArrayNormalOffsetEXT: PFNGLVERTEXARRAYNORMALOFFSETEXTPROC;
pub extern var __glewVertexArraySecondaryColorOffsetEXT: PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC;
pub extern var __glewVertexArrayTexCoordOffsetEXT: PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC;
pub extern var __glewVertexArrayVertexAttribDivisorEXT: PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC;
pub extern var __glewVertexArrayVertexAttribIOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC;
pub extern var __glewVertexArrayVertexAttribOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC;
pub extern var __glewVertexArrayVertexOffsetEXT: PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC;
pub extern var __glewDiscardFramebufferEXT: PFNGLDISCARDFRAMEBUFFEREXTPROC;
pub extern var __glewBeginQueryEXT: PFNGLBEGINQUERYEXTPROC;
pub extern var __glewDeleteQueriesEXT: PFNGLDELETEQUERIESEXTPROC;
pub extern var __glewEndQueryEXT: PFNGLENDQUERYEXTPROC;
pub extern var __glewGenQueriesEXT: PFNGLGENQUERIESEXTPROC;
pub extern var __glewGetInteger64vEXT: PFNGLGETINTEGER64VEXTPROC;
pub extern var __glewGetQueryObjectivEXT: PFNGLGETQUERYOBJECTIVEXTPROC;
pub extern var __glewGetQueryObjectuivEXT: PFNGLGETQUERYOBJECTUIVEXTPROC;
pub extern var __glewGetQueryivEXT: PFNGLGETQUERYIVEXTPROC;
pub extern var __glewIsQueryEXT: PFNGLISQUERYEXTPROC;
pub extern var __glewQueryCounterEXT: PFNGLQUERYCOUNTEREXTPROC;
pub extern var __glewDrawBuffersEXT: PFNGLDRAWBUFFERSEXTPROC;
pub extern var __glewColorMaskIndexedEXT: PFNGLCOLORMASKINDEXEDEXTPROC;
pub extern var __glewDisableIndexedEXT: PFNGLDISABLEINDEXEDEXTPROC;
pub extern var __glewEnableIndexedEXT: PFNGLENABLEINDEXEDEXTPROC;
pub extern var __glewGetBooleanIndexedvEXT: PFNGLGETBOOLEANINDEXEDVEXTPROC;
pub extern var __glewGetIntegerIndexedvEXT: PFNGLGETINTEGERINDEXEDVEXTPROC;
pub extern var __glewIsEnabledIndexedEXT: PFNGLISENABLEDINDEXEDEXTPROC;
pub extern var __glewBlendEquationSeparateiEXT: PFNGLBLENDEQUATIONSEPARATEIEXTPROC;
pub extern var __glewBlendEquationiEXT: PFNGLBLENDEQUATIONIEXTPROC;
pub extern var __glewBlendFuncSeparateiEXT: PFNGLBLENDFUNCSEPARATEIEXTPROC;
pub extern var __glewBlendFunciEXT: PFNGLBLENDFUNCIEXTPROC;
pub extern var __glewColorMaskiEXT: PFNGLCOLORMASKIEXTPROC;
pub extern var __glewDisableiEXT: PFNGLDISABLEIEXTPROC;
pub extern var __glewEnableiEXT: PFNGLENABLEIEXTPROC;
pub extern var __glewIsEnablediEXT: PFNGLISENABLEDIEXTPROC;
pub extern var __glewDrawElementsBaseVertexEXT: PFNGLDRAWELEMENTSBASEVERTEXEXTPROC;
pub extern var __glewDrawElementsInstancedBaseVertexEXT: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC;
pub extern var __glewDrawRangeElementsBaseVertexEXT: PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC;
pub extern var __glewMultiDrawElementsBaseVertexEXT: PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC;
pub extern var __glewDrawArraysInstancedEXT: PFNGLDRAWARRAYSINSTANCEDEXTPROC;
pub extern var __glewDrawElementsInstancedEXT: PFNGLDRAWELEMENTSINSTANCEDEXTPROC;
pub extern var __glewDrawRangeElementsEXT: PFNGLDRAWRANGEELEMENTSEXTPROC;
pub extern var __glewDrawTransformFeedbackEXT: PFNGLDRAWTRANSFORMFEEDBACKEXTPROC;
pub extern var __glewDrawTransformFeedbackInstancedEXT: PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC;
pub extern var __glewBufferStorageExternalEXT: PFNGLBUFFERSTORAGEEXTERNALEXTPROC;
pub extern var __glewNamedBufferStorageExternalEXT: PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC;
pub extern var __glewFogCoordPointerEXT: PFNGLFOGCOORDPOINTEREXTPROC;
pub extern var __glewFogCoorddEXT: PFNGLFOGCOORDDEXTPROC;
pub extern var __glewFogCoorddvEXT: PFNGLFOGCOORDDVEXTPROC;
pub extern var __glewFogCoordfEXT: PFNGLFOGCOORDFEXTPROC;
pub extern var __glewFogCoordfvEXT: PFNGLFOGCOORDFVEXTPROC;
pub extern var __glewFragmentColorMaterialEXT: PFNGLFRAGMENTCOLORMATERIALEXTPROC;
pub extern var __glewFragmentLightModelfEXT: PFNGLFRAGMENTLIGHTMODELFEXTPROC;
pub extern var __glewFragmentLightModelfvEXT: PFNGLFRAGMENTLIGHTMODELFVEXTPROC;
pub extern var __glewFragmentLightModeliEXT: PFNGLFRAGMENTLIGHTMODELIEXTPROC;
pub extern var __glewFragmentLightModelivEXT: PFNGLFRAGMENTLIGHTMODELIVEXTPROC;
pub extern var __glewFragmentLightfEXT: PFNGLFRAGMENTLIGHTFEXTPROC;
pub extern var __glewFragmentLightfvEXT: PFNGLFRAGMENTLIGHTFVEXTPROC;
pub extern var __glewFragmentLightiEXT: PFNGLFRAGMENTLIGHTIEXTPROC;
pub extern var __glewFragmentLightivEXT: PFNGLFRAGMENTLIGHTIVEXTPROC;
pub extern var __glewFragmentMaterialfEXT: PFNGLFRAGMENTMATERIALFEXTPROC;
pub extern var __glewFragmentMaterialfvEXT: PFNGLFRAGMENTMATERIALFVEXTPROC;
pub extern var __glewFragmentMaterialiEXT: PFNGLFRAGMENTMATERIALIEXTPROC;
pub extern var __glewFragmentMaterialivEXT: PFNGLFRAGMENTMATERIALIVEXTPROC;
pub extern var __glewGetFragmentLightfvEXT: PFNGLGETFRAGMENTLIGHTFVEXTPROC;
pub extern var __glewGetFragmentLightivEXT: PFNGLGETFRAGMENTLIGHTIVEXTPROC;
pub extern var __glewGetFragmentMaterialfvEXT: PFNGLGETFRAGMENTMATERIALFVEXTPROC;
pub extern var __glewGetFragmentMaterialivEXT: PFNGLGETFRAGMENTMATERIALIVEXTPROC;
pub extern var __glewLightEnviEXT: PFNGLLIGHTENVIEXTPROC;
pub extern var __glewBlitFramebufferEXT: PFNGLBLITFRAMEBUFFEREXTPROC;
pub extern var __glewRenderbufferStorageMultisampleEXT: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC;
pub extern var __glewBindFramebufferEXT: PFNGLBINDFRAMEBUFFEREXTPROC;
pub extern var __glewBindRenderbufferEXT: PFNGLBINDRENDERBUFFEREXTPROC;
pub extern var __glewCheckFramebufferStatusEXT: PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC;
pub extern var __glewDeleteFramebuffersEXT: PFNGLDELETEFRAMEBUFFERSEXTPROC;
pub extern var __glewDeleteRenderbuffersEXT: PFNGLDELETERENDERBUFFERSEXTPROC;
pub extern var __glewFramebufferRenderbufferEXT: PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC;
pub extern var __glewFramebufferTexture1DEXT: PFNGLFRAMEBUFFERTEXTURE1DEXTPROC;
pub extern var __glewFramebufferTexture2DEXT: PFNGLFRAMEBUFFERTEXTURE2DEXTPROC;
pub extern var __glewFramebufferTexture3DEXT: PFNGLFRAMEBUFFERTEXTURE3DEXTPROC;
pub extern var __glewGenFramebuffersEXT: PFNGLGENFRAMEBUFFERSEXTPROC;
pub extern var __glewGenRenderbuffersEXT: PFNGLGENRENDERBUFFERSEXTPROC;
pub extern var __glewGenerateMipmapEXT: PFNGLGENERATEMIPMAPEXTPROC;
pub extern var __glewGetFramebufferAttachmentParameterivEXT: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC;
pub extern var __glewGetRenderbufferParameterivEXT: PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC;
pub extern var __glewIsFramebufferEXT: PFNGLISFRAMEBUFFEREXTPROC;
pub extern var __glewIsRenderbufferEXT: PFNGLISRENDERBUFFEREXTPROC;
pub extern var __glewRenderbufferStorageEXT: PFNGLRENDERBUFFERSTORAGEEXTPROC;
pub extern var __glewFramebufferTextureEXT: PFNGLFRAMEBUFFERTEXTUREEXTPROC;
pub extern var __glewFramebufferTextureFaceEXT: PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC;
pub extern var __glewProgramParameteriEXT: PFNGLPROGRAMPARAMETERIEXTPROC;
pub extern var __glewProgramEnvParameters4fvEXT: PFNGLPROGRAMENVPARAMETERS4FVEXTPROC;
pub extern var __glewProgramLocalParameters4fvEXT: PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC;
pub extern var __glewBindFragDataLocationEXT: PFNGLBINDFRAGDATALOCATIONEXTPROC;
pub extern var __glewGetFragDataLocationEXT: PFNGLGETFRAGDATALOCATIONEXTPROC;
pub extern var __glewGetUniformuivEXT: PFNGLGETUNIFORMUIVEXTPROC;
pub extern var __glewGetVertexAttribIivEXT: PFNGLGETVERTEXATTRIBIIVEXTPROC;
pub extern var __glewGetVertexAttribIuivEXT: PFNGLGETVERTEXATTRIBIUIVEXTPROC;
pub extern var __glewUniform1uiEXT: PFNGLUNIFORM1UIEXTPROC;
pub extern var __glewUniform1uivEXT: PFNGLUNIFORM1UIVEXTPROC;
pub extern var __glewUniform2uiEXT: PFNGLUNIFORM2UIEXTPROC;
pub extern var __glewUniform2uivEXT: PFNGLUNIFORM2UIVEXTPROC;
pub extern var __glewUniform3uiEXT: PFNGLUNIFORM3UIEXTPROC;
pub extern var __glewUniform3uivEXT: PFNGLUNIFORM3UIVEXTPROC;
pub extern var __glewUniform4uiEXT: PFNGLUNIFORM4UIEXTPROC;
pub extern var __glewUniform4uivEXT: PFNGLUNIFORM4UIVEXTPROC;
pub extern var __glewVertexAttribI1iEXT: PFNGLVERTEXATTRIBI1IEXTPROC;
pub extern var __glewVertexAttribI1ivEXT: PFNGLVERTEXATTRIBI1IVEXTPROC;
pub extern var __glewVertexAttribI1uiEXT: PFNGLVERTEXATTRIBI1UIEXTPROC;
pub extern var __glewVertexAttribI1uivEXT: PFNGLVERTEXATTRIBI1UIVEXTPROC;
pub extern var __glewVertexAttribI2iEXT: PFNGLVERTEXATTRIBI2IEXTPROC;
pub extern var __glewVertexAttribI2ivEXT: PFNGLVERTEXATTRIBI2IVEXTPROC;
pub extern var __glewVertexAttribI2uiEXT: PFNGLVERTEXATTRIBI2UIEXTPROC;
pub extern var __glewVertexAttribI2uivEXT: PFNGLVERTEXATTRIBI2UIVEXTPROC;
pub extern var __glewVertexAttribI3iEXT: PFNGLVERTEXATTRIBI3IEXTPROC;
pub extern var __glewVertexAttribI3ivEXT: PFNGLVERTEXATTRIBI3IVEXTPROC;
pub extern var __glewVertexAttribI3uiEXT: PFNGLVERTEXATTRIBI3UIEXTPROC;
pub extern var __glewVertexAttribI3uivEXT: PFNGLVERTEXATTRIBI3UIVEXTPROC;
pub extern var __glewVertexAttribI4bvEXT: PFNGLVERTEXATTRIBI4BVEXTPROC;
pub extern var __glewVertexAttribI4iEXT: PFNGLVERTEXATTRIBI4IEXTPROC;
pub extern var __glewVertexAttribI4ivEXT: PFNGLVERTEXATTRIBI4IVEXTPROC;
pub extern var __glewVertexAttribI4svEXT: PFNGLVERTEXATTRIBI4SVEXTPROC;
pub extern var __glewVertexAttribI4ubvEXT: PFNGLVERTEXATTRIBI4UBVEXTPROC;
pub extern var __glewVertexAttribI4uiEXT: PFNGLVERTEXATTRIBI4UIEXTPROC;
pub extern var __glewVertexAttribI4uivEXT: PFNGLVERTEXATTRIBI4UIVEXTPROC;
pub extern var __glewVertexAttribI4usvEXT: PFNGLVERTEXATTRIBI4USVEXTPROC;
pub extern var __glewVertexAttribIPointerEXT: PFNGLVERTEXATTRIBIPOINTEREXTPROC;
pub extern var __glewGetHistogramEXT: PFNGLGETHISTOGRAMEXTPROC;
pub extern var __glewGetHistogramParameterfvEXT: PFNGLGETHISTOGRAMPARAMETERFVEXTPROC;
pub extern var __glewGetHistogramParameterivEXT: PFNGLGETHISTOGRAMPARAMETERIVEXTPROC;
pub extern var __glewGetMinmaxEXT: PFNGLGETMINMAXEXTPROC;
pub extern var __glewGetMinmaxParameterfvEXT: PFNGLGETMINMAXPARAMETERFVEXTPROC;
pub extern var __glewGetMinmaxParameterivEXT: PFNGLGETMINMAXPARAMETERIVEXTPROC;
pub extern var __glewHistogramEXT: PFNGLHISTOGRAMEXTPROC;
pub extern var __glewMinmaxEXT: PFNGLMINMAXEXTPROC;
pub extern var __glewResetHistogramEXT: PFNGLRESETHISTOGRAMEXTPROC;
pub extern var __glewResetMinmaxEXT: PFNGLRESETMINMAXEXTPROC;
pub extern var __glewIndexFuncEXT: PFNGLINDEXFUNCEXTPROC;
pub extern var __glewIndexMaterialEXT: PFNGLINDEXMATERIALEXTPROC;
pub extern var __glewVertexAttribDivisorEXT: PFNGLVERTEXATTRIBDIVISOREXTPROC;
pub extern var __glewApplyTextureEXT: PFNGLAPPLYTEXTUREEXTPROC;
pub extern var __glewTextureLightEXT: PFNGLTEXTURELIGHTEXTPROC;
pub extern var __glewTextureMaterialEXT: PFNGLTEXTUREMATERIALEXTPROC;
pub extern var __glewFlushMappedBufferRangeEXT: PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC;
pub extern var __glewMapBufferRangeEXT: PFNGLMAPBUFFERRANGEEXTPROC;
pub extern var __glewBufferStorageMemEXT: PFNGLBUFFERSTORAGEMEMEXTPROC;
pub extern var __glewCreateMemoryObjectsEXT: PFNGLCREATEMEMORYOBJECTSEXTPROC;
pub extern var __glewDeleteMemoryObjectsEXT: PFNGLDELETEMEMORYOBJECTSEXTPROC;
pub extern var __glewGetMemoryObjectParameterivEXT: PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC;
pub extern var __glewGetUnsignedBytei_vEXT: PFNGLGETUNSIGNEDBYTEI_VEXTPROC;
pub extern var __glewGetUnsignedBytevEXT: PFNGLGETUNSIGNEDBYTEVEXTPROC;
pub extern var __glewIsMemoryObjectEXT: PFNGLISMEMORYOBJECTEXTPROC;
pub extern var __glewMemoryObjectParameterivEXT: PFNGLMEMORYOBJECTPARAMETERIVEXTPROC;
pub extern var __glewNamedBufferStorageMemEXT: PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC;
pub extern var __glewTexStorageMem1DEXT: PFNGLTEXSTORAGEMEM1DEXTPROC;
pub extern var __glewTexStorageMem2DEXT: PFNGLTEXSTORAGEMEM2DEXTPROC;
pub extern var __glewTexStorageMem2DMultisampleEXT: PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC;
pub extern var __glewTexStorageMem3DEXT: PFNGLTEXSTORAGEMEM3DEXTPROC;
pub extern var __glewTexStorageMem3DMultisampleEXT: PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC;
pub extern var __glewTextureStorageMem1DEXT: PFNGLTEXTURESTORAGEMEM1DEXTPROC;
pub extern var __glewTextureStorageMem2DEXT: PFNGLTEXTURESTORAGEMEM2DEXTPROC;
pub extern var __glewTextureStorageMem2DMultisampleEXT: PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC;
pub extern var __glewTextureStorageMem3DEXT: PFNGLTEXTURESTORAGEMEM3DEXTPROC;
pub extern var __glewTextureStorageMem3DMultisampleEXT: PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC;
pub extern var __glewImportMemoryFdEXT: PFNGLIMPORTMEMORYFDEXTPROC;
pub extern var __glewImportMemoryWin32HandleEXT: PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC;
pub extern var __glewImportMemoryWin32NameEXT: PFNGLIMPORTMEMORYWIN32NAMEEXTPROC;
pub extern var __glewMultiDrawArraysEXT: PFNGLMULTIDRAWARRAYSEXTPROC;
pub extern var __glewMultiDrawElementsEXT: PFNGLMULTIDRAWELEMENTSEXTPROC;
pub extern var __glewMultiDrawArraysIndirectEXT: PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC;
pub extern var __glewMultiDrawElementsIndirectEXT: PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC;
pub extern var __glewSampleMaskEXT: PFNGLSAMPLEMASKEXTPROC;
pub extern var __glewSamplePatternEXT: PFNGLSAMPLEPATTERNEXTPROC;
pub extern var __glewFramebufferTexture2DMultisampleEXT: PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC;
pub extern var __glewDrawBuffersIndexedEXT: PFNGLDRAWBUFFERSINDEXEDEXTPROC;
pub extern var __glewGetIntegeri_vEXT: PFNGLGETINTEGERI_VEXTPROC;
pub extern var __glewReadBufferIndexedEXT: PFNGLREADBUFFERINDEXEDEXTPROC;
pub extern var __glewColorTableEXT: PFNGLCOLORTABLEEXTPROC;
pub extern var __glewGetColorTableEXT: PFNGLGETCOLORTABLEEXTPROC;
pub extern var __glewGetColorTableParameterfvEXT: PFNGLGETCOLORTABLEPARAMETERFVEXTPROC;
pub extern var __glewGetColorTableParameterivEXT: PFNGLGETCOLORTABLEPARAMETERIVEXTPROC;
pub extern var __glewGetPixelTransformParameterfvEXT: PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC;
pub extern var __glewGetPixelTransformParameterivEXT: PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC;
pub extern var __glewPixelTransformParameterfEXT: PFNGLPIXELTRANSFORMPARAMETERFEXTPROC;
pub extern var __glewPixelTransformParameterfvEXT: PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC;
pub extern var __glewPixelTransformParameteriEXT: PFNGLPIXELTRANSFORMPARAMETERIEXTPROC;
pub extern var __glewPixelTransformParameterivEXT: PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC;
pub extern var __glewPointParameterfEXT: PFNGLPOINTPARAMETERFEXTPROC;
pub extern var __glewPointParameterfvEXT: PFNGLPOINTPARAMETERFVEXTPROC;
pub extern var __glewPolygonOffsetEXT: PFNGLPOLYGONOFFSETEXTPROC;
pub extern var __glewPolygonOffsetClampEXT: PFNGLPOLYGONOFFSETCLAMPEXTPROC;
pub extern var __glewPrimitiveBoundingBoxEXT: PFNGLPRIMITIVEBOUNDINGBOXEXTPROC;
pub extern var __glewProvokingVertexEXT: PFNGLPROVOKINGVERTEXEXTPROC;
pub extern var __glewCoverageModulationNV: PFNGLCOVERAGEMODULATIONNVPROC;
pub extern var __glewCoverageModulationTableNV: PFNGLCOVERAGEMODULATIONTABLENVPROC;
pub extern var __glewGetCoverageModulationTableNV: PFNGLGETCOVERAGEMODULATIONTABLENVPROC;
pub extern var __glewRasterSamplesEXT: PFNGLRASTERSAMPLESEXTPROC;
pub extern var __glewGetnUniformfvEXT: PFNGLGETNUNIFORMFVEXTPROC;
pub extern var __glewGetnUniformivEXT: PFNGLGETNUNIFORMIVEXTPROC;
pub extern var __glewReadnPixelsEXT: PFNGLREADNPIXELSEXTPROC;
pub extern var __glewBeginSceneEXT: PFNGLBEGINSCENEEXTPROC;
pub extern var __glewEndSceneEXT: PFNGLENDSCENEEXTPROC;
pub extern var __glewSecondaryColor3bEXT: PFNGLSECONDARYCOLOR3BEXTPROC;
pub extern var __glewSecondaryColor3bvEXT: PFNGLSECONDARYCOLOR3BVEXTPROC;
pub extern var __glewSecondaryColor3dEXT: PFNGLSECONDARYCOLOR3DEXTPROC;
pub extern var __glewSecondaryColor3dvEXT: PFNGLSECONDARYCOLOR3DVEXTPROC;
pub extern var __glewSecondaryColor3fEXT: PFNGLSECONDARYCOLOR3FEXTPROC;
pub extern var __glewSecondaryColor3fvEXT: PFNGLSECONDARYCOLOR3FVEXTPROC;
pub extern var __glewSecondaryColor3iEXT: PFNGLSECONDARYCOLOR3IEXTPROC;
pub extern var __glewSecondaryColor3ivEXT: PFNGLSECONDARYCOLOR3IVEXTPROC;
pub extern var __glewSecondaryColor3sEXT: PFNGLSECONDARYCOLOR3SEXTPROC;
pub extern var __glewSecondaryColor3svEXT: PFNGLSECONDARYCOLOR3SVEXTPROC;
pub extern var __glewSecondaryColor3ubEXT: PFNGLSECONDARYCOLOR3UBEXTPROC;
pub extern var __glewSecondaryColor3ubvEXT: PFNGLSECONDARYCOLOR3UBVEXTPROC;
pub extern var __glewSecondaryColor3uiEXT: PFNGLSECONDARYCOLOR3UIEXTPROC;
pub extern var __glewSecondaryColor3uivEXT: PFNGLSECONDARYCOLOR3UIVEXTPROC;
pub extern var __glewSecondaryColor3usEXT: PFNGLSECONDARYCOLOR3USEXTPROC;
pub extern var __glewSecondaryColor3usvEXT: PFNGLSECONDARYCOLOR3USVEXTPROC;
pub extern var __glewSecondaryColorPointerEXT: PFNGLSECONDARYCOLORPOINTEREXTPROC;
pub extern var __glewDeleteSemaphoresEXT: PFNGLDELETESEMAPHORESEXTPROC;
pub extern var __glewGenSemaphoresEXT: PFNGLGENSEMAPHORESEXTPROC;
pub extern var __glewGetSemaphoreParameterui64vEXT: PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC;
pub extern var __glewIsSemaphoreEXT: PFNGLISSEMAPHOREEXTPROC;
pub extern var __glewSemaphoreParameterui64vEXT: PFNGLSEMAPHOREPARAMETERUI64VEXTPROC;
pub extern var __glewSignalSemaphoreEXT: PFNGLSIGNALSEMAPHOREEXTPROC;
pub extern var __glewWaitSemaphoreEXT: PFNGLWAITSEMAPHOREEXTPROC;
pub extern var __glewImportSemaphoreFdEXT: PFNGLIMPORTSEMAPHOREFDEXTPROC;
pub extern var __glewImportSemaphoreWin32HandleEXT: PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC;
pub extern var __glewImportSemaphoreWin32NameEXT: PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC;
pub extern var __glewActiveProgramEXT: PFNGLACTIVEPROGRAMEXTPROC;
pub extern var __glewCreateShaderProgramEXT: PFNGLCREATESHADERPROGRAMEXTPROC;
pub extern var __glewUseShaderProgramEXT: PFNGLUSESHADERPROGRAMEXTPROC;
pub extern var __glewFramebufferFetchBarrierEXT: PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC;
pub extern var __glewBindImageTextureEXT: PFNGLBINDIMAGETEXTUREEXTPROC;
pub extern var __glewMemoryBarrierEXT: PFNGLMEMORYBARRIEREXTPROC;
pub extern var __glewClearPixelLocalStorageuiEXT: PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC;
pub extern var __glewFramebufferPixelLocalStorageSizeEXT: PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC;
pub extern var __glewGetFramebufferPixelLocalStorageSizeEXT: PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC;
pub extern var __glewTexPageCommitmentEXT: PFNGLTEXPAGECOMMITMENTEXTPROC;
pub extern var __glewTexturePageCommitmentEXT: PFNGLTEXTUREPAGECOMMITMENTEXTPROC;
pub extern var __glewActiveStencilFaceEXT: PFNGLACTIVESTENCILFACEEXTPROC;
pub extern var __glewTexSubImage1DEXT: PFNGLTEXSUBIMAGE1DEXTPROC;
pub extern var __glewTexSubImage2DEXT: PFNGLTEXSUBIMAGE2DEXTPROC;
pub extern var __glewTexSubImage3DEXT: PFNGLTEXSUBIMAGE3DEXTPROC;
pub extern var __glewPatchParameteriEXT: PFNGLPATCHPARAMETERIEXTPROC;
pub extern var __glewTexImage3DEXT: PFNGLTEXIMAGE3DEXTPROC;
pub extern var __glewFramebufferTextureLayerEXT: PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC;
pub extern var __glewGetSamplerParameterIivEXT: PFNGLGETSAMPLERPARAMETERIIVEXTPROC;
pub extern var __glewGetSamplerParameterIuivEXT: PFNGLGETSAMPLERPARAMETERIUIVEXTPROC;
pub extern var __glewSamplerParameterIivEXT: PFNGLSAMPLERPARAMETERIIVEXTPROC;
pub extern var __glewSamplerParameterIuivEXT: PFNGLSAMPLERPARAMETERIUIVEXTPROC;
pub extern var __glewTexBufferEXT: PFNGLTEXBUFFEREXTPROC;
pub extern var __glewClearColorIiEXT: PFNGLCLEARCOLORIIEXTPROC;
pub extern var __glewClearColorIuiEXT: PFNGLCLEARCOLORIUIEXTPROC;
pub extern var __glewGetTexParameterIivEXT: PFNGLGETTEXPARAMETERIIVEXTPROC;
pub extern var __glewGetTexParameterIuivEXT: PFNGLGETTEXPARAMETERIUIVEXTPROC;
pub extern var __glewTexParameterIivEXT: PFNGLTEXPARAMETERIIVEXTPROC;
pub extern var __glewTexParameterIuivEXT: PFNGLTEXPARAMETERIUIVEXTPROC;
pub extern var __glewAreTexturesResidentEXT: PFNGLARETEXTURESRESIDENTEXTPROC;
pub extern var __glewBindTextureEXT: PFNGLBINDTEXTUREEXTPROC;
pub extern var __glewDeleteTexturesEXT: PFNGLDELETETEXTURESEXTPROC;
pub extern var __glewGenTexturesEXT: PFNGLGENTEXTURESEXTPROC;
pub extern var __glewIsTextureEXT: PFNGLISTEXTUREEXTPROC;
pub extern var __glewPrioritizeTexturesEXT: PFNGLPRIORITIZETEXTURESEXTPROC;
pub extern var __glewTextureNormalEXT: PFNGLTEXTURENORMALEXTPROC;
pub extern var __glewTexStorage1DEXT: PFNGLTEXSTORAGE1DEXTPROC;
pub extern var __glewTexStorage2DEXT: PFNGLTEXSTORAGE2DEXTPROC;
pub extern var __glewTexStorage3DEXT: PFNGLTEXSTORAGE3DEXTPROC;
pub extern var __glewTextureStorage1DEXT: PFNGLTEXTURESTORAGE1DEXTPROC;
pub extern var __glewTextureStorage2DEXT: PFNGLTEXTURESTORAGE2DEXTPROC;
pub extern var __glewTextureStorage3DEXT: PFNGLTEXTURESTORAGE3DEXTPROC;
pub extern var __glewTextureViewEXT: PFNGLTEXTUREVIEWEXTPROC;
pub extern var __glewGetQueryObjecti64vEXT: PFNGLGETQUERYOBJECTI64VEXTPROC;
pub extern var __glewGetQueryObjectui64vEXT: PFNGLGETQUERYOBJECTUI64VEXTPROC;
pub extern var __glewBeginTransformFeedbackEXT: PFNGLBEGINTRANSFORMFEEDBACKEXTPROC;
pub extern var __glewBindBufferBaseEXT: PFNGLBINDBUFFERBASEEXTPROC;
pub extern var __glewBindBufferOffsetEXT: PFNGLBINDBUFFEROFFSETEXTPROC;
pub extern var __glewBindBufferRangeEXT: PFNGLBINDBUFFERRANGEEXTPROC;
pub extern var __glewEndTransformFeedbackEXT: PFNGLENDTRANSFORMFEEDBACKEXTPROC;
pub extern var __glewGetTransformFeedbackVaryingEXT: PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC;
pub extern var __glewTransformFeedbackVaryingsEXT: PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC;
pub extern var __glewArrayElementEXT: PFNGLARRAYELEMENTEXTPROC;
pub extern var __glewColorPointerEXT: PFNGLCOLORPOINTEREXTPROC;
pub extern var __glewDrawArraysEXT: PFNGLDRAWARRAYSEXTPROC;
pub extern var __glewEdgeFlagPointerEXT: PFNGLEDGEFLAGPOINTEREXTPROC;
pub extern var __glewIndexPointerEXT: PFNGLINDEXPOINTEREXTPROC;
pub extern var __glewNormalPointerEXT: PFNGLNORMALPOINTEREXTPROC;
pub extern var __glewTexCoordPointerEXT: PFNGLTEXCOORDPOINTEREXTPROC;
pub extern var __glewVertexPointerEXT: PFNGLVERTEXPOINTEREXTPROC;
pub extern var __glewBindArraySetEXT: PFNGLBINDARRAYSETEXTPROC;
pub extern var __glewCreateArraySetExt: PFNGLCREATEARRAYSETEXTPROC;
pub extern var __glewDeleteArraySetsEXT: PFNGLDELETEARRAYSETSEXTPROC;
pub extern var __glewGetVertexAttribLdvEXT: PFNGLGETVERTEXATTRIBLDVEXTPROC;
pub extern var __glewVertexArrayVertexAttribLOffsetEXT: PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC;
pub extern var __glewVertexAttribL1dEXT: PFNGLVERTEXATTRIBL1DEXTPROC;
pub extern var __glewVertexAttribL1dvEXT: PFNGLVERTEXATTRIBL1DVEXTPROC;
pub extern var __glewVertexAttribL2dEXT: PFNGLVERTEXATTRIBL2DEXTPROC;
pub extern var __glewVertexAttribL2dvEXT: PFNGLVERTEXATTRIBL2DVEXTPROC;
pub extern var __glewVertexAttribL3dEXT: PFNGLVERTEXATTRIBL3DEXTPROC;
pub extern var __glewVertexAttribL3dvEXT: PFNGLVERTEXATTRIBL3DVEXTPROC;
pub extern var __glewVertexAttribL4dEXT: PFNGLVERTEXATTRIBL4DEXTPROC;
pub extern var __glewVertexAttribL4dvEXT: PFNGLVERTEXATTRIBL4DVEXTPROC;
pub extern var __glewVertexAttribLPointerEXT: PFNGLVERTEXATTRIBLPOINTEREXTPROC;
pub extern var __glewBeginVertexShaderEXT: PFNGLBEGINVERTEXSHADEREXTPROC;
pub extern var __glewBindLightParameterEXT: PFNGLBINDLIGHTPARAMETEREXTPROC;
pub extern var __glewBindMaterialParameterEXT: PFNGLBINDMATERIALPARAMETEREXTPROC;
pub extern var __glewBindParameterEXT: PFNGLBINDPARAMETEREXTPROC;
pub extern var __glewBindTexGenParameterEXT: PFNGLBINDTEXGENPARAMETEREXTPROC;
pub extern var __glewBindTextureUnitParameterEXT: PFNGLBINDTEXTUREUNITPARAMETEREXTPROC;
pub extern var __glewBindVertexShaderEXT: PFNGLBINDVERTEXSHADEREXTPROC;
pub extern var __glewDeleteVertexShaderEXT: PFNGLDELETEVERTEXSHADEREXTPROC;
pub extern var __glewDisableVariantClientStateEXT: PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC;
pub extern var __glewEnableVariantClientStateEXT: PFNGLENABLEVARIANTCLIENTSTATEEXTPROC;
pub extern var __glewEndVertexShaderEXT: PFNGLENDVERTEXSHADEREXTPROC;
pub extern var __glewExtractComponentEXT: PFNGLEXTRACTCOMPONENTEXTPROC;
pub extern var __glewGenSymbolsEXT: PFNGLGENSYMBOLSEXTPROC;
pub extern var __glewGenVertexShadersEXT: PFNGLGENVERTEXSHADERSEXTPROC;
pub extern var __glewGetInvariantBooleanvEXT: PFNGLGETINVARIANTBOOLEANVEXTPROC;
pub extern var __glewGetInvariantFloatvEXT: PFNGLGETINVARIANTFLOATVEXTPROC;
pub extern var __glewGetInvariantIntegervEXT: PFNGLGETINVARIANTINTEGERVEXTPROC;
pub extern var __glewGetLocalConstantBooleanvEXT: PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC;
pub extern var __glewGetLocalConstantFloatvEXT: PFNGLGETLOCALCONSTANTFLOATVEXTPROC;
pub extern var __glewGetLocalConstantIntegervEXT: PFNGLGETLOCALCONSTANTINTEGERVEXTPROC;
pub extern var __glewGetVariantBooleanvEXT: PFNGLGETVARIANTBOOLEANVEXTPROC;
pub extern var __glewGetVariantFloatvEXT: PFNGLGETVARIANTFLOATVEXTPROC;
pub extern var __glewGetVariantIntegervEXT: PFNGLGETVARIANTINTEGERVEXTPROC;
pub extern var __glewGetVariantPointervEXT: PFNGLGETVARIANTPOINTERVEXTPROC;
pub extern var __glewInsertComponentEXT: PFNGLINSERTCOMPONENTEXTPROC;
pub extern var __glewIsVariantEnabledEXT: PFNGLISVARIANTENABLEDEXTPROC;
pub extern var __glewSetInvariantEXT: PFNGLSETINVARIANTEXTPROC;
pub extern var __glewSetLocalConstantEXT: PFNGLSETLOCALCONSTANTEXTPROC;
pub extern var __glewShaderOp1EXT: PFNGLSHADEROP1EXTPROC;
pub extern var __glewShaderOp2EXT: PFNGLSHADEROP2EXTPROC;
pub extern var __glewShaderOp3EXT: PFNGLSHADEROP3EXTPROC;
pub extern var __glewSwizzleEXT: PFNGLSWIZZLEEXTPROC;
pub extern var __glewVariantPointerEXT: PFNGLVARIANTPOINTEREXTPROC;
pub extern var __glewVariantbvEXT: PFNGLVARIANTBVEXTPROC;
pub extern var __glewVariantdvEXT: PFNGLVARIANTDVEXTPROC;
pub extern var __glewVariantfvEXT: PFNGLVARIANTFVEXTPROC;
pub extern var __glewVariantivEXT: PFNGLVARIANTIVEXTPROC;
pub extern var __glewVariantsvEXT: PFNGLVARIANTSVEXTPROC;
pub extern var __glewVariantubvEXT: PFNGLVARIANTUBVEXTPROC;
pub extern var __glewVariantuivEXT: PFNGLVARIANTUIVEXTPROC;
pub extern var __glewVariantusvEXT: PFNGLVARIANTUSVEXTPROC;
pub extern var __glewWriteMaskEXT: PFNGLWRITEMASKEXTPROC;
pub extern var __glewVertexWeightPointerEXT: PFNGLVERTEXWEIGHTPOINTEREXTPROC;
pub extern var __glewVertexWeightfEXT: PFNGLVERTEXWEIGHTFEXTPROC;
pub extern var __glewVertexWeightfvEXT: PFNGLVERTEXWEIGHTFVEXTPROC;
pub extern var __glewAcquireKeyedMutexWin32EXT: PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC;
pub extern var __glewReleaseKeyedMutexWin32EXT: PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC;
pub extern var __glewWindowRectanglesEXT: PFNGLWINDOWRECTANGLESEXTPROC;
pub extern var __glewImportSyncEXT: PFNGLIMPORTSYNCEXTPROC;
pub extern var __glewFrameTerminatorGREMEDY: PFNGLFRAMETERMINATORGREMEDYPROC;
pub extern var __glewStringMarkerGREMEDY: PFNGLSTRINGMARKERGREMEDYPROC;
pub extern var __glewGetImageTransformParameterfvHP: PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC;
pub extern var __glewGetImageTransformParameterivHP: PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC;
pub extern var __glewImageTransformParameterfHP: PFNGLIMAGETRANSFORMPARAMETERFHPPROC;
pub extern var __glewImageTransformParameterfvHP: PFNGLIMAGETRANSFORMPARAMETERFVHPPROC;
pub extern var __glewImageTransformParameteriHP: PFNGLIMAGETRANSFORMPARAMETERIHPPROC;
pub extern var __glewImageTransformParameterivHP: PFNGLIMAGETRANSFORMPARAMETERIVHPPROC;
pub extern var __glewMultiModeDrawArraysIBM: PFNGLMULTIMODEDRAWARRAYSIBMPROC;
pub extern var __glewMultiModeDrawElementsIBM: PFNGLMULTIMODEDRAWELEMENTSIBMPROC;
pub extern var __glewColorPointerListIBM: PFNGLCOLORPOINTERLISTIBMPROC;
pub extern var __glewEdgeFlagPointerListIBM: PFNGLEDGEFLAGPOINTERLISTIBMPROC;
pub extern var __glewFogCoordPointerListIBM: PFNGLFOGCOORDPOINTERLISTIBMPROC;
pub extern var __glewIndexPointerListIBM: PFNGLINDEXPOINTERLISTIBMPROC;
pub extern var __glewNormalPointerListIBM: PFNGLNORMALPOINTERLISTIBMPROC;
pub extern var __glewSecondaryColorPointerListIBM: PFNGLSECONDARYCOLORPOINTERLISTIBMPROC;
pub extern var __glewTexCoordPointerListIBM: PFNGLTEXCOORDPOINTERLISTIBMPROC;
pub extern var __glewVertexPointerListIBM: PFNGLVERTEXPOINTERLISTIBMPROC;
pub extern var __glewGetTextureHandleIMG: PFNGLGETTEXTUREHANDLEIMGPROC;
pub extern var __glewGetTextureSamplerHandleIMG: PFNGLGETTEXTURESAMPLERHANDLEIMGPROC;
pub extern var __glewProgramUniformHandleui64IMG: PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC;
pub extern var __glewProgramUniformHandleui64vIMG: PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC;
pub extern var __glewUniformHandleui64IMG: PFNGLUNIFORMHANDLEUI64IMGPROC;
pub extern var __glewUniformHandleui64vIMG: PFNGLUNIFORMHANDLEUI64VIMGPROC;
pub extern var __glewFramebufferTexture2DDownsampleIMG: PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC;
pub extern var __glewFramebufferTextureLayerDownsampleIMG: PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC;
pub extern var __glewFramebufferTexture2DMultisampleIMG: PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC;
pub extern var __glewRenderbufferStorageMultisampleIMG: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC;
pub extern var __glewMapTexture2DINTEL: PFNGLMAPTEXTURE2DINTELPROC;
pub extern var __glewSyncTextureINTEL: PFNGLSYNCTEXTUREINTELPROC;
pub extern var __glewUnmapTexture2DINTEL: PFNGLUNMAPTEXTURE2DINTELPROC;
pub extern var __glewColorPointervINTEL: PFNGLCOLORPOINTERVINTELPROC;
pub extern var __glewNormalPointervINTEL: PFNGLNORMALPOINTERVINTELPROC;
pub extern var __glewTexCoordPointervINTEL: PFNGLTEXCOORDPOINTERVINTELPROC;
pub extern var __glewVertexPointervINTEL: PFNGLVERTEXPOINTERVINTELPROC;
pub extern var __glewBeginPerfQueryINTEL: PFNGLBEGINPERFQUERYINTELPROC;
pub extern var __glewCreatePerfQueryINTEL: PFNGLCREATEPERFQUERYINTELPROC;
pub extern var __glewDeletePerfQueryINTEL: PFNGLDELETEPERFQUERYINTELPROC;
pub extern var __glewEndPerfQueryINTEL: PFNGLENDPERFQUERYINTELPROC;
pub extern var __glewGetFirstPerfQueryIdINTEL: PFNGLGETFIRSTPERFQUERYIDINTELPROC;
pub extern var __glewGetNextPerfQueryIdINTEL: PFNGLGETNEXTPERFQUERYIDINTELPROC;
pub extern var __glewGetPerfCounterInfoINTEL: PFNGLGETPERFCOUNTERINFOINTELPROC;
pub extern var __glewGetPerfQueryDataINTEL: PFNGLGETPERFQUERYDATAINTELPROC;
pub extern var __glewGetPerfQueryIdByNameINTEL: PFNGLGETPERFQUERYIDBYNAMEINTELPROC;
pub extern var __glewGetPerfQueryInfoINTEL: PFNGLGETPERFQUERYINFOINTELPROC;
pub extern var __glewTexScissorFuncINTEL: PFNGLTEXSCISSORFUNCINTELPROC;
pub extern var __glewTexScissorINTEL: PFNGLTEXSCISSORINTELPROC;
pub extern var __glewBlendBarrierKHR: PFNGLBLENDBARRIERKHRPROC;
pub extern var __glewDebugMessageCallback: PFNGLDEBUGMESSAGECALLBACKPROC;
pub extern var __glewDebugMessageControl: PFNGLDEBUGMESSAGECONTROLPROC;
pub extern var __glewDebugMessageInsert: PFNGLDEBUGMESSAGEINSERTPROC;
pub extern var __glewGetDebugMessageLog: PFNGLGETDEBUGMESSAGELOGPROC;
pub extern var __glewGetObjectLabel: PFNGLGETOBJECTLABELPROC;
pub extern var __glewGetObjectPtrLabel: PFNGLGETOBJECTPTRLABELPROC;
pub extern var __glewObjectLabel: PFNGLOBJECTLABELPROC;
pub extern var __glewObjectPtrLabel: PFNGLOBJECTPTRLABELPROC;
pub extern var __glewPopDebugGroup: PFNGLPOPDEBUGGROUPPROC;
pub extern var __glewPushDebugGroup: PFNGLPUSHDEBUGGROUPPROC;
pub extern var __glewMaxShaderCompilerThreadsKHR: PFNGLMAXSHADERCOMPILERTHREADSKHRPROC;
pub extern var __glewGetnUniformfv: PFNGLGETNUNIFORMFVPROC;
pub extern var __glewGetnUniformiv: PFNGLGETNUNIFORMIVPROC;
pub extern var __glewGetnUniformuiv: PFNGLGETNUNIFORMUIVPROC;
pub extern var __glewReadnPixels: PFNGLREADNPIXELSPROC;
pub extern var __glewBufferRegionEnabled: PFNGLBUFFERREGIONENABLEDPROC;
pub extern var __glewDeleteBufferRegion: PFNGLDELETEBUFFERREGIONPROC;
pub extern var __glewDrawBufferRegion: PFNGLDRAWBUFFERREGIONPROC;
pub extern var __glewNewBufferRegion: PFNGLNEWBUFFERREGIONPROC;
pub extern var __glewReadBufferRegion: PFNGLREADBUFFERREGIONPROC;
pub extern var __glewFramebufferParameteriMESA: PFNGLFRAMEBUFFERPARAMETERIMESAPROC;
pub extern var __glewGetFramebufferParameterivMESA: PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC;
pub extern var __glewResizeBuffersMESA: PFNGLRESIZEBUFFERSMESAPROC;
pub extern var __glewWindowPos2dMESA: PFNGLWINDOWPOS2DMESAPROC;
pub extern var __glewWindowPos2dvMESA: PFNGLWINDOWPOS2DVMESAPROC;
pub extern var __glewWindowPos2fMESA: PFNGLWINDOWPOS2FMESAPROC;
pub extern var __glewWindowPos2fvMESA: PFNGLWINDOWPOS2FVMESAPROC;
pub extern var __glewWindowPos2iMESA: PFNGLWINDOWPOS2IMESAPROC;
pub extern var __glewWindowPos2ivMESA: PFNGLWINDOWPOS2IVMESAPROC;
pub extern var __glewWindowPos2sMESA: PFNGLWINDOWPOS2SMESAPROC;
pub extern var __glewWindowPos2svMESA: PFNGLWINDOWPOS2SVMESAPROC;
pub extern var __glewWindowPos3dMESA: PFNGLWINDOWPOS3DMESAPROC;
pub extern var __glewWindowPos3dvMESA: PFNGLWINDOWPOS3DVMESAPROC;
pub extern var __glewWindowPos3fMESA: PFNGLWINDOWPOS3FMESAPROC;
pub extern var __glewWindowPos3fvMESA: PFNGLWINDOWPOS3FVMESAPROC;
pub extern var __glewWindowPos3iMESA: PFNGLWINDOWPOS3IMESAPROC;
pub extern var __glewWindowPos3ivMESA: PFNGLWINDOWPOS3IVMESAPROC;
pub extern var __glewWindowPos3sMESA: PFNGLWINDOWPOS3SMESAPROC;
pub extern var __glewWindowPos3svMESA: PFNGLWINDOWPOS3SVMESAPROC;
pub extern var __glewWindowPos4dMESA: PFNGLWINDOWPOS4DMESAPROC;
pub extern var __glewWindowPos4dvMESA: PFNGLWINDOWPOS4DVMESAPROC;
pub extern var __glewWindowPos4fMESA: PFNGLWINDOWPOS4FMESAPROC;
pub extern var __glewWindowPos4fvMESA: PFNGLWINDOWPOS4FVMESAPROC;
pub extern var __glewWindowPos4iMESA: PFNGLWINDOWPOS4IMESAPROC;
pub extern var __glewWindowPos4ivMESA: PFNGLWINDOWPOS4IVMESAPROC;
pub extern var __glewWindowPos4sMESA: PFNGLWINDOWPOS4SMESAPROC;
pub extern var __glewWindowPos4svMESA: PFNGLWINDOWPOS4SVMESAPROC;
pub extern var __glewBeginConditionalRenderNVX: PFNGLBEGINCONDITIONALRENDERNVXPROC;
pub extern var __glewEndConditionalRenderNVX: PFNGLENDCONDITIONALRENDERNVXPROC;
pub extern var __glewAsyncCopyBufferSubDataNVX: PFNGLASYNCCOPYBUFFERSUBDATANVXPROC;
pub extern var __glewAsyncCopyImageSubDataNVX: PFNGLASYNCCOPYIMAGESUBDATANVXPROC;
pub extern var __glewMulticastScissorArrayvNVX: PFNGLMULTICASTSCISSORARRAYVNVXPROC;
pub extern var __glewMulticastViewportArrayvNVX: PFNGLMULTICASTVIEWPORTARRAYVNVXPROC;
pub extern var __glewMulticastViewportPositionWScaleNVX: PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC;
pub extern var __glewUploadGpuMaskNVX: PFNGLUPLOADGPUMASKNVXPROC;
pub extern var __glewLGPUCopyImageSubDataNVX: PFNGLLGPUCOPYIMAGESUBDATANVXPROC;
pub extern var __glewLGPUInterlockNVX: PFNGLLGPUINTERLOCKNVXPROC;
pub extern var __glewLGPUNamedBufferSubDataNVX: PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC;
pub extern var __glewClientWaitSemaphoreui64NVX: PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC;
pub extern var __glewSignalSemaphoreui64NVX: PFNGLSIGNALSEMAPHOREUI64NVXPROC;
pub extern var __glewWaitSemaphoreui64NVX: PFNGLWAITSEMAPHOREUI64NVXPROC;
pub extern var __glewStereoParameterfNV: PFNGLSTEREOPARAMETERFNVPROC;
pub extern var __glewStereoParameteriNV: PFNGLSTEREOPARAMETERINVPROC;
pub extern var __glewAlphaToCoverageDitherControlNV: PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC;
pub extern var __glewMultiDrawArraysIndirectBindlessNV: PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC;
pub extern var __glewMultiDrawElementsIndirectBindlessNV: PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC;
pub extern var __glewMultiDrawArraysIndirectBindlessCountNV: PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC;
pub extern var __glewMultiDrawElementsIndirectBindlessCountNV: PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC;
pub extern var __glewGetImageHandleNV: PFNGLGETIMAGEHANDLENVPROC;
pub extern var __glewGetTextureHandleNV: PFNGLGETTEXTUREHANDLENVPROC;
pub extern var __glewGetTextureSamplerHandleNV: PFNGLGETTEXTURESAMPLERHANDLENVPROC;
pub extern var __glewIsImageHandleResidentNV: PFNGLISIMAGEHANDLERESIDENTNVPROC;
pub extern var __glewIsTextureHandleResidentNV: PFNGLISTEXTUREHANDLERESIDENTNVPROC;
pub extern var __glewMakeImageHandleNonResidentNV: PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC;
pub extern var __glewMakeImageHandleResidentNV: PFNGLMAKEIMAGEHANDLERESIDENTNVPROC;
pub extern var __glewMakeTextureHandleNonResidentNV: PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC;
pub extern var __glewMakeTextureHandleResidentNV: PFNGLMAKETEXTUREHANDLERESIDENTNVPROC;
pub extern var __glewProgramUniformHandleui64NV: PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC;
pub extern var __glewProgramUniformHandleui64vNV: PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC;
pub extern var __glewUniformHandleui64NV: PFNGLUNIFORMHANDLEUI64NVPROC;
pub extern var __glewUniformHandleui64vNV: PFNGLUNIFORMHANDLEUI64VNVPROC;
pub extern var __glewBlendBarrierNV: PFNGLBLENDBARRIERNVPROC;
pub extern var __glewBlendParameteriNV: PFNGLBLENDPARAMETERINVPROC;
pub extern var __glewViewportPositionWScaleNV: PFNGLVIEWPORTPOSITIONWSCALENVPROC;
pub extern var __glewCallCommandListNV: PFNGLCALLCOMMANDLISTNVPROC;
pub extern var __glewCommandListSegmentsNV: PFNGLCOMMANDLISTSEGMENTSNVPROC;
pub extern var __glewCompileCommandListNV: PFNGLCOMPILECOMMANDLISTNVPROC;
pub extern var __glewCreateCommandListsNV: PFNGLCREATECOMMANDLISTSNVPROC;
pub extern var __glewCreateStatesNV: PFNGLCREATESTATESNVPROC;
pub extern var __glewDeleteCommandListsNV: PFNGLDELETECOMMANDLISTSNVPROC;
pub extern var __glewDeleteStatesNV: PFNGLDELETESTATESNVPROC;
pub extern var __glewDrawCommandsAddressNV: PFNGLDRAWCOMMANDSADDRESSNVPROC;
pub extern var __glewDrawCommandsNV: PFNGLDRAWCOMMANDSNVPROC;
pub extern var __glewDrawCommandsStatesAddressNV: PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC;
pub extern var __glewDrawCommandsStatesNV: PFNGLDRAWCOMMANDSSTATESNVPROC;
pub extern var __glewGetCommandHeaderNV: PFNGLGETCOMMANDHEADERNVPROC;
pub extern var __glewGetStageIndexNV: PFNGLGETSTAGEINDEXNVPROC;
pub extern var __glewIsCommandListNV: PFNGLISCOMMANDLISTNVPROC;
pub extern var __glewIsStateNV: PFNGLISSTATENVPROC;
pub extern var __glewListDrawCommandsStatesClientNV: PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC;
pub extern var __glewStateCaptureNV: PFNGLSTATECAPTURENVPROC;
pub extern var __glewBeginConditionalRenderNV: PFNGLBEGINCONDITIONALRENDERNVPROC;
pub extern var __glewEndConditionalRenderNV: PFNGLENDCONDITIONALRENDERNVPROC;
pub extern var __glewSubpixelPrecisionBiasNV: PFNGLSUBPIXELPRECISIONBIASNVPROC;
pub extern var __glewConservativeRasterParameterfNV: PFNGLCONSERVATIVERASTERPARAMETERFNVPROC;
pub extern var __glewConservativeRasterParameteriNV: PFNGLCONSERVATIVERASTERPARAMETERINVPROC;
pub extern var __glewCopyBufferSubDataNV: PFNGLCOPYBUFFERSUBDATANVPROC;
pub extern var __glewCopyImageSubDataNV: PFNGLCOPYIMAGESUBDATANVPROC;
pub extern var __glewClearDepthdNV: PFNGLCLEARDEPTHDNVPROC;
pub extern var __glewDepthBoundsdNV: PFNGLDEPTHBOUNDSDNVPROC;
pub extern var __glewDepthRangedNV: PFNGLDEPTHRANGEDNVPROC;
pub extern var __glewDrawBuffersNV: PFNGLDRAWBUFFERSNVPROC;
pub extern var __glewDrawArraysInstancedNV: PFNGLDRAWARRAYSINSTANCEDNVPROC;
pub extern var __glewDrawElementsInstancedNV: PFNGLDRAWELEMENTSINSTANCEDNVPROC;
pub extern var __glewDrawTextureNV: PFNGLDRAWTEXTURENVPROC;
pub extern var __glewDrawVkImageNV: PFNGLDRAWVKIMAGENVPROC;
pub extern var __glewGetVkProcAddrNV: PFNGLGETVKPROCADDRNVPROC;
pub extern var __glewSignalVkFenceNV: PFNGLSIGNALVKFENCENVPROC;
pub extern var __glewSignalVkSemaphoreNV: PFNGLSIGNALVKSEMAPHORENVPROC;
pub extern var __glewWaitVkSemaphoreNV: PFNGLWAITVKSEMAPHORENVPROC;
pub extern var __glewEvalMapsNV: PFNGLEVALMAPSNVPROC;
pub extern var __glewGetMapAttribParameterfvNV: PFNGLGETMAPATTRIBPARAMETERFVNVPROC;
pub extern var __glewGetMapAttribParameterivNV: PFNGLGETMAPATTRIBPARAMETERIVNVPROC;
pub extern var __glewGetMapControlPointsNV: PFNGLGETMAPCONTROLPOINTSNVPROC;
pub extern var __glewGetMapParameterfvNV: PFNGLGETMAPPARAMETERFVNVPROC;
pub extern var __glewGetMapParameterivNV: PFNGLGETMAPPARAMETERIVNVPROC;
pub extern var __glewMapControlPointsNV: PFNGLMAPCONTROLPOINTSNVPROC;
pub extern var __glewMapParameterfvNV: PFNGLMAPPARAMETERFVNVPROC;
pub extern var __glewMapParameterivNV: PFNGLMAPPARAMETERIVNVPROC;
pub extern var __glewGetMultisamplefvNV: PFNGLGETMULTISAMPLEFVNVPROC;
pub extern var __glewSampleMaskIndexedNV: PFNGLSAMPLEMASKINDEXEDNVPROC;
pub extern var __glewTexRenderbufferNV: PFNGLTEXRENDERBUFFERNVPROC;
pub extern var __glewDeleteFencesNV: PFNGLDELETEFENCESNVPROC;
pub extern var __glewFinishFenceNV: PFNGLFINISHFENCENVPROC;
pub extern var __glewGenFencesNV: PFNGLGENFENCESNVPROC;
pub extern var __glewGetFenceivNV: PFNGLGETFENCEIVNVPROC;
pub extern var __glewIsFenceNV: PFNGLISFENCENVPROC;
pub extern var __glewSetFenceNV: PFNGLSETFENCENVPROC;
pub extern var __glewTestFenceNV: PFNGLTESTFENCENVPROC;
pub extern var __glewFragmentCoverageColorNV: PFNGLFRAGMENTCOVERAGECOLORNVPROC;
pub extern var __glewGetProgramNamedParameterdvNV: PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC;
pub extern var __glewGetProgramNamedParameterfvNV: PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC;
pub extern var __glewProgramNamedParameter4dNV: PFNGLPROGRAMNAMEDPARAMETER4DNVPROC;
pub extern var __glewProgramNamedParameter4dvNV: PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC;
pub extern var __glewProgramNamedParameter4fNV: PFNGLPROGRAMNAMEDPARAMETER4FNVPROC;
pub extern var __glewProgramNamedParameter4fvNV: PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC;
pub extern var __glewBlitFramebufferNV: PFNGLBLITFRAMEBUFFERNVPROC;
pub extern var __glewRenderbufferStorageMultisampleNV: PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC;
pub extern var __glewRenderbufferStorageMultisampleCoverageNV: PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC;
pub extern var __glewProgramVertexLimitNV: PFNGLPROGRAMVERTEXLIMITNVPROC;
pub extern var __glewMulticastBarrierNV: PFNGLMULTICASTBARRIERNVPROC;
pub extern var __glewMulticastBlitFramebufferNV: PFNGLMULTICASTBLITFRAMEBUFFERNVPROC;
pub extern var __glewMulticastBufferSubDataNV: PFNGLMULTICASTBUFFERSUBDATANVPROC;
pub extern var __glewMulticastCopyBufferSubDataNV: PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC;
pub extern var __glewMulticastCopyImageSubDataNV: PFNGLMULTICASTCOPYIMAGESUBDATANVPROC;
pub extern var __glewMulticastFramebufferSampleLocationsfvNV: PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var __glewMulticastGetQueryObjecti64vNV: PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC;
pub extern var __glewMulticastGetQueryObjectivNV: PFNGLMULTICASTGETQUERYOBJECTIVNVPROC;
pub extern var __glewMulticastGetQueryObjectui64vNV: PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC;
pub extern var __glewMulticastGetQueryObjectuivNV: PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC;
pub extern var __glewMulticastWaitSyncNV: PFNGLMULTICASTWAITSYNCNVPROC;
pub extern var __glewRenderGpuMaskNV: PFNGLRENDERGPUMASKNVPROC;
pub extern var __glewProgramEnvParameterI4iNV: PFNGLPROGRAMENVPARAMETERI4INVPROC;
pub extern var __glewProgramEnvParameterI4ivNV: PFNGLPROGRAMENVPARAMETERI4IVNVPROC;
pub extern var __glewProgramEnvParameterI4uiNV: PFNGLPROGRAMENVPARAMETERI4UINVPROC;
pub extern var __glewProgramEnvParameterI4uivNV: PFNGLPROGRAMENVPARAMETERI4UIVNVPROC;
pub extern var __glewProgramEnvParametersI4ivNV: PFNGLPROGRAMENVPARAMETERSI4IVNVPROC;
pub extern var __glewProgramEnvParametersI4uivNV: PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC;
pub extern var __glewProgramLocalParameterI4iNV: PFNGLPROGRAMLOCALPARAMETERI4INVPROC;
pub extern var __glewProgramLocalParameterI4ivNV: PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC;
pub extern var __glewProgramLocalParameterI4uiNV: PFNGLPROGRAMLOCALPARAMETERI4UINVPROC;
pub extern var __glewProgramLocalParameterI4uivNV: PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC;
pub extern var __glewProgramLocalParametersI4ivNV: PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC;
pub extern var __glewProgramLocalParametersI4uivNV: PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC;
pub extern var __glewGetUniformi64vNV: PFNGLGETUNIFORMI64VNVPROC;
pub extern var __glewGetUniformui64vNV: PFNGLGETUNIFORMUI64VNVPROC;
pub extern var __glewProgramUniform1i64NV: PFNGLPROGRAMUNIFORM1I64NVPROC;
pub extern var __glewProgramUniform1i64vNV: PFNGLPROGRAMUNIFORM1I64VNVPROC;
pub extern var __glewProgramUniform1ui64NV: PFNGLPROGRAMUNIFORM1UI64NVPROC;
pub extern var __glewProgramUniform1ui64vNV: PFNGLPROGRAMUNIFORM1UI64VNVPROC;
pub extern var __glewProgramUniform2i64NV: PFNGLPROGRAMUNIFORM2I64NVPROC;
pub extern var __glewProgramUniform2i64vNV: PFNGLPROGRAMUNIFORM2I64VNVPROC;
pub extern var __glewProgramUniform2ui64NV: PFNGLPROGRAMUNIFORM2UI64NVPROC;
pub extern var __glewProgramUniform2ui64vNV: PFNGLPROGRAMUNIFORM2UI64VNVPROC;
pub extern var __glewProgramUniform3i64NV: PFNGLPROGRAMUNIFORM3I64NVPROC;
pub extern var __glewProgramUniform3i64vNV: PFNGLPROGRAMUNIFORM3I64VNVPROC;
pub extern var __glewProgramUniform3ui64NV: PFNGLPROGRAMUNIFORM3UI64NVPROC;
pub extern var __glewProgramUniform3ui64vNV: PFNGLPROGRAMUNIFORM3UI64VNVPROC;
pub extern var __glewProgramUniform4i64NV: PFNGLPROGRAMUNIFORM4I64NVPROC;
pub extern var __glewProgramUniform4i64vNV: PFNGLPROGRAMUNIFORM4I64VNVPROC;
pub extern var __glewProgramUniform4ui64NV: PFNGLPROGRAMUNIFORM4UI64NVPROC;
pub extern var __glewProgramUniform4ui64vNV: PFNGLPROGRAMUNIFORM4UI64VNVPROC;
pub extern var __glewUniform1i64NV: PFNGLUNIFORM1I64NVPROC;
pub extern var __glewUniform1i64vNV: PFNGLUNIFORM1I64VNVPROC;
pub extern var __glewUniform1ui64NV: PFNGLUNIFORM1UI64NVPROC;
pub extern var __glewUniform1ui64vNV: PFNGLUNIFORM1UI64VNVPROC;
pub extern var __glewUniform2i64NV: PFNGLUNIFORM2I64NVPROC;
pub extern var __glewUniform2i64vNV: PFNGLUNIFORM2I64VNVPROC;
pub extern var __glewUniform2ui64NV: PFNGLUNIFORM2UI64NVPROC;
pub extern var __glewUniform2ui64vNV: PFNGLUNIFORM2UI64VNVPROC;
pub extern var __glewUniform3i64NV: PFNGLUNIFORM3I64NVPROC;
pub extern var __glewUniform3i64vNV: PFNGLUNIFORM3I64VNVPROC;
pub extern var __glewUniform3ui64NV: PFNGLUNIFORM3UI64NVPROC;
pub extern var __glewUniform3ui64vNV: PFNGLUNIFORM3UI64VNVPROC;
pub extern var __glewUniform4i64NV: PFNGLUNIFORM4I64NVPROC;
pub extern var __glewUniform4i64vNV: PFNGLUNIFORM4I64VNVPROC;
pub extern var __glewUniform4ui64NV: PFNGLUNIFORM4UI64NVPROC;
pub extern var __glewUniform4ui64vNV: PFNGLUNIFORM4UI64VNVPROC;
pub extern var __glewColor3hNV: PFNGLCOLOR3HNVPROC;
pub extern var __glewColor3hvNV: PFNGLCOLOR3HVNVPROC;
pub extern var __glewColor4hNV: PFNGLCOLOR4HNVPROC;
pub extern var __glewColor4hvNV: PFNGLCOLOR4HVNVPROC;
pub extern var __glewFogCoordhNV: PFNGLFOGCOORDHNVPROC;
pub extern var __glewFogCoordhvNV: PFNGLFOGCOORDHVNVPROC;
pub extern var __glewMultiTexCoord1hNV: PFNGLMULTITEXCOORD1HNVPROC;
pub extern var __glewMultiTexCoord1hvNV: PFNGLMULTITEXCOORD1HVNVPROC;
pub extern var __glewMultiTexCoord2hNV: PFNGLMULTITEXCOORD2HNVPROC;
pub extern var __glewMultiTexCoord2hvNV: PFNGLMULTITEXCOORD2HVNVPROC;
pub extern var __glewMultiTexCoord3hNV: PFNGLMULTITEXCOORD3HNVPROC;
pub extern var __glewMultiTexCoord3hvNV: PFNGLMULTITEXCOORD3HVNVPROC;
pub extern var __glewMultiTexCoord4hNV: PFNGLMULTITEXCOORD4HNVPROC;
pub extern var __glewMultiTexCoord4hvNV: PFNGLMULTITEXCOORD4HVNVPROC;
pub extern var __glewNormal3hNV: PFNGLNORMAL3HNVPROC;
pub extern var __glewNormal3hvNV: PFNGLNORMAL3HVNVPROC;
pub extern var __glewSecondaryColor3hNV: PFNGLSECONDARYCOLOR3HNVPROC;
pub extern var __glewSecondaryColor3hvNV: PFNGLSECONDARYCOLOR3HVNVPROC;
pub extern var __glewTexCoord1hNV: PFNGLTEXCOORD1HNVPROC;
pub extern var __glewTexCoord1hvNV: PFNGLTEXCOORD1HVNVPROC;
pub extern var __glewTexCoord2hNV: PFNGLTEXCOORD2HNVPROC;
pub extern var __glewTexCoord2hvNV: PFNGLTEXCOORD2HVNVPROC;
pub extern var __glewTexCoord3hNV: PFNGLTEXCOORD3HNVPROC;
pub extern var __glewTexCoord3hvNV: PFNGLTEXCOORD3HVNVPROC;
pub extern var __glewTexCoord4hNV: PFNGLTEXCOORD4HNVPROC;
pub extern var __glewTexCoord4hvNV: PFNGLTEXCOORD4HVNVPROC;
pub extern var __glewVertex2hNV: PFNGLVERTEX2HNVPROC;
pub extern var __glewVertex2hvNV: PFNGLVERTEX2HVNVPROC;
pub extern var __glewVertex3hNV: PFNGLVERTEX3HNVPROC;
pub extern var __glewVertex3hvNV: PFNGLVERTEX3HVNVPROC;
pub extern var __glewVertex4hNV: PFNGLVERTEX4HNVPROC;
pub extern var __glewVertex4hvNV: PFNGLVERTEX4HVNVPROC;
pub extern var __glewVertexAttrib1hNV: PFNGLVERTEXATTRIB1HNVPROC;
pub extern var __glewVertexAttrib1hvNV: PFNGLVERTEXATTRIB1HVNVPROC;
pub extern var __glewVertexAttrib2hNV: PFNGLVERTEXATTRIB2HNVPROC;
pub extern var __glewVertexAttrib2hvNV: PFNGLVERTEXATTRIB2HVNVPROC;
pub extern var __glewVertexAttrib3hNV: PFNGLVERTEXATTRIB3HNVPROC;
pub extern var __glewVertexAttrib3hvNV: PFNGLVERTEXATTRIB3HVNVPROC;
pub extern var __glewVertexAttrib4hNV: PFNGLVERTEXATTRIB4HNVPROC;
pub extern var __glewVertexAttrib4hvNV: PFNGLVERTEXATTRIB4HVNVPROC;
pub extern var __glewVertexAttribs1hvNV: PFNGLVERTEXATTRIBS1HVNVPROC;
pub extern var __glewVertexAttribs2hvNV: PFNGLVERTEXATTRIBS2HVNVPROC;
pub extern var __glewVertexAttribs3hvNV: PFNGLVERTEXATTRIBS3HVNVPROC;
pub extern var __glewVertexAttribs4hvNV: PFNGLVERTEXATTRIBS4HVNVPROC;
pub extern var __glewVertexWeighthNV: PFNGLVERTEXWEIGHTHNVPROC;
pub extern var __glewVertexWeighthvNV: PFNGLVERTEXWEIGHTHVNVPROC;
pub extern var __glewVertexAttribDivisorNV: PFNGLVERTEXATTRIBDIVISORNVPROC;
pub extern var __glewGetInternalformatSampleivNV: PFNGLGETINTERNALFORMATSAMPLEIVNVPROC;
pub extern var __glewBufferAttachMemoryNV: PFNGLBUFFERATTACHMEMORYNVPROC;
pub extern var __glewGetMemoryObjectDetachedResourcesuivNV: PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC;
pub extern var __glewNamedBufferAttachMemoryNV: PFNGLNAMEDBUFFERATTACHMEMORYNVPROC;
pub extern var __glewResetMemoryObjectParameterNV: PFNGLRESETMEMORYOBJECTPARAMETERNVPROC;
pub extern var __glewTexAttachMemoryNV: PFNGLTEXATTACHMEMORYNVPROC;
pub extern var __glewTextureAttachMemoryNV: PFNGLTEXTUREATTACHMEMORYNVPROC;
pub extern var __glewDrawMeshTasksIndirectNV: PFNGLDRAWMESHTASKSINDIRECTNVPROC;
pub extern var __glewDrawMeshTasksNV: PFNGLDRAWMESHTASKSNVPROC;
pub extern var __glewMultiDrawMeshTasksIndirectCountNV: PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC;
pub extern var __glewMultiDrawMeshTasksIndirectNV: PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC;
pub extern var __glewUniformMatrix2x3fvNV: PFNGLUNIFORMMATRIX2X3FVNVPROC;
pub extern var __glewUniformMatrix2x4fvNV: PFNGLUNIFORMMATRIX2X4FVNVPROC;
pub extern var __glewUniformMatrix3x2fvNV: PFNGLUNIFORMMATRIX3X2FVNVPROC;
pub extern var __glewUniformMatrix3x4fvNV: PFNGLUNIFORMMATRIX3X4FVNVPROC;
pub extern var __glewUniformMatrix4x2fvNV: PFNGLUNIFORMMATRIX4X2FVNVPROC;
pub extern var __glewUniformMatrix4x3fvNV: PFNGLUNIFORMMATRIX4X3FVNVPROC;
pub extern var __glewBeginOcclusionQueryNV: PFNGLBEGINOCCLUSIONQUERYNVPROC;
pub extern var __glewDeleteOcclusionQueriesNV: PFNGLDELETEOCCLUSIONQUERIESNVPROC;
pub extern var __glewEndOcclusionQueryNV: PFNGLENDOCCLUSIONQUERYNVPROC;
pub extern var __glewGenOcclusionQueriesNV: PFNGLGENOCCLUSIONQUERIESNVPROC;
pub extern var __glewGetOcclusionQueryivNV: PFNGLGETOCCLUSIONQUERYIVNVPROC;
pub extern var __glewGetOcclusionQueryuivNV: PFNGLGETOCCLUSIONQUERYUIVNVPROC;
pub extern var __glewIsOcclusionQueryNV: PFNGLISOCCLUSIONQUERYNVPROC;
pub extern var __glewProgramBufferParametersIivNV: PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC;
pub extern var __glewProgramBufferParametersIuivNV: PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC;
pub extern var __glewProgramBufferParametersfvNV: PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC;
pub extern var __glewCopyPathNV: PFNGLCOPYPATHNVPROC;
pub extern var __glewCoverFillPathInstancedNV: PFNGLCOVERFILLPATHINSTANCEDNVPROC;
pub extern var __glewCoverFillPathNV: PFNGLCOVERFILLPATHNVPROC;
pub extern var __glewCoverStrokePathInstancedNV: PFNGLCOVERSTROKEPATHINSTANCEDNVPROC;
pub extern var __glewCoverStrokePathNV: PFNGLCOVERSTROKEPATHNVPROC;
pub extern var __glewDeletePathsNV: PFNGLDELETEPATHSNVPROC;
pub extern var __glewGenPathsNV: PFNGLGENPATHSNVPROC;
pub extern var __glewGetPathColorGenfvNV: PFNGLGETPATHCOLORGENFVNVPROC;
pub extern var __glewGetPathColorGenivNV: PFNGLGETPATHCOLORGENIVNVPROC;
pub extern var __glewGetPathCommandsNV: PFNGLGETPATHCOMMANDSNVPROC;
pub extern var __glewGetPathCoordsNV: PFNGLGETPATHCOORDSNVPROC;
pub extern var __glewGetPathDashArrayNV: PFNGLGETPATHDASHARRAYNVPROC;
pub extern var __glewGetPathLengthNV: PFNGLGETPATHLENGTHNVPROC;
pub extern var __glewGetPathMetricRangeNV: PFNGLGETPATHMETRICRANGENVPROC;
pub extern var __glewGetPathMetricsNV: PFNGLGETPATHMETRICSNVPROC;
pub extern var __glewGetPathParameterfvNV: PFNGLGETPATHPARAMETERFVNVPROC;
pub extern var __glewGetPathParameterivNV: PFNGLGETPATHPARAMETERIVNVPROC;
pub extern var __glewGetPathSpacingNV: PFNGLGETPATHSPACINGNVPROC;
pub extern var __glewGetPathTexGenfvNV: PFNGLGETPATHTEXGENFVNVPROC;
pub extern var __glewGetPathTexGenivNV: PFNGLGETPATHTEXGENIVNVPROC;
pub extern var __glewGetProgramResourcefvNV: PFNGLGETPROGRAMRESOURCEFVNVPROC;
pub extern var __glewInterpolatePathsNV: PFNGLINTERPOLATEPATHSNVPROC;
pub extern var __glewIsPathNV: PFNGLISPATHNVPROC;
pub extern var __glewIsPointInFillPathNV: PFNGLISPOINTINFILLPATHNVPROC;
pub extern var __glewIsPointInStrokePathNV: PFNGLISPOINTINSTROKEPATHNVPROC;
pub extern var __glewMatrixLoad3x2fNV: PFNGLMATRIXLOAD3X2FNVPROC;
pub extern var __glewMatrixLoad3x3fNV: PFNGLMATRIXLOAD3X3FNVPROC;
pub extern var __glewMatrixLoadTranspose3x3fNV: PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC;
pub extern var __glewMatrixMult3x2fNV: PFNGLMATRIXMULT3X2FNVPROC;
pub extern var __glewMatrixMult3x3fNV: PFNGLMATRIXMULT3X3FNVPROC;
pub extern var __glewMatrixMultTranspose3x3fNV: PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC;
pub extern var __glewPathColorGenNV: PFNGLPATHCOLORGENNVPROC;
pub extern var __glewPathCommandsNV: PFNGLPATHCOMMANDSNVPROC;
pub extern var __glewPathCoordsNV: PFNGLPATHCOORDSNVPROC;
pub extern var __glewPathCoverDepthFuncNV: PFNGLPATHCOVERDEPTHFUNCNVPROC;
pub extern var __glewPathDashArrayNV: PFNGLPATHDASHARRAYNVPROC;
pub extern var __glewPathFogGenNV: PFNGLPATHFOGGENNVPROC;
pub extern var __glewPathGlyphIndexArrayNV: PFNGLPATHGLYPHINDEXARRAYNVPROC;
pub extern var __glewPathGlyphIndexRangeNV: PFNGLPATHGLYPHINDEXRANGENVPROC;
pub extern var __glewPathGlyphRangeNV: PFNGLPATHGLYPHRANGENVPROC;
pub extern var __glewPathGlyphsNV: PFNGLPATHGLYPHSNVPROC;
pub extern var __glewPathMemoryGlyphIndexArrayNV: PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC;
pub extern var __glewPathParameterfNV: PFNGLPATHPARAMETERFNVPROC;
pub extern var __glewPathParameterfvNV: PFNGLPATHPARAMETERFVNVPROC;
pub extern var __glewPathParameteriNV: PFNGLPATHPARAMETERINVPROC;
pub extern var __glewPathParameterivNV: PFNGLPATHPARAMETERIVNVPROC;
pub extern var __glewPathStencilDepthOffsetNV: PFNGLPATHSTENCILDEPTHOFFSETNVPROC;
pub extern var __glewPathStencilFuncNV: PFNGLPATHSTENCILFUNCNVPROC;
pub extern var __glewPathStringNV: PFNGLPATHSTRINGNVPROC;
pub extern var __glewPathSubCommandsNV: PFNGLPATHSUBCOMMANDSNVPROC;
pub extern var __glewPathSubCoordsNV: PFNGLPATHSUBCOORDSNVPROC;
pub extern var __glewPathTexGenNV: PFNGLPATHTEXGENNVPROC;
pub extern var __glewPointAlongPathNV: PFNGLPOINTALONGPATHNVPROC;
pub extern var __glewProgramPathFragmentInputGenNV: PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC;
pub extern var __glewStencilFillPathInstancedNV: PFNGLSTENCILFILLPATHINSTANCEDNVPROC;
pub extern var __glewStencilFillPathNV: PFNGLSTENCILFILLPATHNVPROC;
pub extern var __glewStencilStrokePathInstancedNV: PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC;
pub extern var __glewStencilStrokePathNV: PFNGLSTENCILSTROKEPATHNVPROC;
pub extern var __glewStencilThenCoverFillPathInstancedNV: PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC;
pub extern var __glewStencilThenCoverFillPathNV: PFNGLSTENCILTHENCOVERFILLPATHNVPROC;
pub extern var __glewStencilThenCoverStrokePathInstancedNV: PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC;
pub extern var __glewStencilThenCoverStrokePathNV: PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC;
pub extern var __glewTransformPathNV: PFNGLTRANSFORMPATHNVPROC;
pub extern var __glewWeightPathsNV: PFNGLWEIGHTPATHSNVPROC;
pub extern var __glewFlushPixelDataRangeNV: PFNGLFLUSHPIXELDATARANGENVPROC;
pub extern var __glewPixelDataRangeNV: PFNGLPIXELDATARANGENVPROC;
pub extern var __glewPointParameteriNV: PFNGLPOINTPARAMETERINVPROC;
pub extern var __glewPointParameterivNV: PFNGLPOINTPARAMETERIVNVPROC;
pub extern var __glewPolygonModeNV: PFNGLPOLYGONMODENVPROC;
pub extern var __glewGetVideoi64vNV: PFNGLGETVIDEOI64VNVPROC;
pub extern var __glewGetVideoivNV: PFNGLGETVIDEOIVNVPROC;
pub extern var __glewGetVideoui64vNV: PFNGLGETVIDEOUI64VNVPROC;
pub extern var __glewGetVideouivNV: PFNGLGETVIDEOUIVNVPROC;
pub extern var __glewPresentFrameDualFillNV: PFNGLPRESENTFRAMEDUALFILLNVPROC;
pub extern var __glewPresentFrameKeyedNV: PFNGLPRESENTFRAMEKEYEDNVPROC;
pub extern var __glewPrimitiveRestartIndexNV: PFNGLPRIMITIVERESTARTINDEXNVPROC;
pub extern var __glewPrimitiveRestartNV: PFNGLPRIMITIVERESTARTNVPROC;
pub extern var __glewReadBufferNV: PFNGLREADBUFFERNVPROC;
pub extern var __glewCombinerInputNV: PFNGLCOMBINERINPUTNVPROC;
pub extern var __glewCombinerOutputNV: PFNGLCOMBINEROUTPUTNVPROC;
pub extern var __glewCombinerParameterfNV: PFNGLCOMBINERPARAMETERFNVPROC;
pub extern var __glewCombinerParameterfvNV: PFNGLCOMBINERPARAMETERFVNVPROC;
pub extern var __glewCombinerParameteriNV: PFNGLCOMBINERPARAMETERINVPROC;
pub extern var __glewCombinerParameterivNV: PFNGLCOMBINERPARAMETERIVNVPROC;
pub extern var __glewFinalCombinerInputNV: PFNGLFINALCOMBINERINPUTNVPROC;
pub extern var __glewGetCombinerInputParameterfvNV: PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC;
pub extern var __glewGetCombinerInputParameterivNV: PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC;
pub extern var __glewGetCombinerOutputParameterfvNV: PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC;
pub extern var __glewGetCombinerOutputParameterivNV: PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC;
pub extern var __glewGetFinalCombinerInputParameterfvNV: PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC;
pub extern var __glewGetFinalCombinerInputParameterivNV: PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC;
pub extern var __glewCombinerStageParameterfvNV: PFNGLCOMBINERSTAGEPARAMETERFVNVPROC;
pub extern var __glewGetCombinerStageParameterfvNV: PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC;
pub extern var __glewFramebufferSampleLocationsfvNV: PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var __glewNamedFramebufferSampleLocationsfvNV: PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC;
pub extern var __glewResolveDepthValuesNV: PFNGLRESOLVEDEPTHVALUESNVPROC;
pub extern var __glewScissorExclusiveArrayvNV: PFNGLSCISSOREXCLUSIVEARRAYVNVPROC;
pub extern var __glewScissorExclusiveNV: PFNGLSCISSOREXCLUSIVENVPROC;
pub extern var __glewGetBufferParameterui64vNV: PFNGLGETBUFFERPARAMETERUI64VNVPROC;
pub extern var __glewGetIntegerui64vNV: PFNGLGETINTEGERUI64VNVPROC;
pub extern var __glewGetNamedBufferParameterui64vNV: PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC;
pub extern var __glewIsBufferResidentNV: PFNGLISBUFFERRESIDENTNVPROC;
pub extern var __glewIsNamedBufferResidentNV: PFNGLISNAMEDBUFFERRESIDENTNVPROC;
pub extern var __glewMakeBufferNonResidentNV: PFNGLMAKEBUFFERNONRESIDENTNVPROC;
pub extern var __glewMakeBufferResidentNV: PFNGLMAKEBUFFERRESIDENTNVPROC;
pub extern var __glewMakeNamedBufferNonResidentNV: PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC;
pub extern var __glewMakeNamedBufferResidentNV: PFNGLMAKENAMEDBUFFERRESIDENTNVPROC;
pub extern var __glewProgramUniformui64NV: PFNGLPROGRAMUNIFORMUI64NVPROC;
pub extern var __glewProgramUniformui64vNV: PFNGLPROGRAMUNIFORMUI64VNVPROC;
pub extern var __glewUniformui64NV: PFNGLUNIFORMUI64NVPROC;
pub extern var __glewUniformui64vNV: PFNGLUNIFORMUI64VNVPROC;
pub extern var __glewBindShadingRateImageNV: PFNGLBINDSHADINGRATEIMAGENVPROC;
pub extern var __glewGetShadingRateImagePaletteNV: PFNGLGETSHADINGRATEIMAGEPALETTENVPROC;
pub extern var __glewGetShadingRateSampleLocationivNV: PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC;
pub extern var __glewShadingRateImageBarrierNV: PFNGLSHADINGRATEIMAGEBARRIERNVPROC;
pub extern var __glewShadingRateImagePaletteNV: PFNGLSHADINGRATEIMAGEPALETTENVPROC;
pub extern var __glewShadingRateSampleOrderCustomNV: PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC;
pub extern var __glewCompressedTexImage3DNV: PFNGLCOMPRESSEDTEXIMAGE3DNVPROC;
pub extern var __glewCompressedTexSubImage3DNV: PFNGLCOMPRESSEDTEXSUBIMAGE3DNVPROC;
pub extern var __glewCopyTexSubImage3DNV: PFNGLCOPYTEXSUBIMAGE3DNVPROC;
pub extern var __glewFramebufferTextureLayerNV: PFNGLFRAMEBUFFERTEXTURELAYERNVPROC;
pub extern var __glewTexImage3DNV: PFNGLTEXIMAGE3DNVPROC;
pub extern var __glewTexSubImage3DNV: PFNGLTEXSUBIMAGE3DNVPROC;
pub extern var __glewTextureBarrierNV: PFNGLTEXTUREBARRIERNVPROC;
pub extern var __glewTexImage2DMultisampleCoverageNV: PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTexImage3DMultisampleCoverageNV: PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTextureImage2DMultisampleCoverageNV: PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTextureImage2DMultisampleNV: PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC;
pub extern var __glewTextureImage3DMultisampleCoverageNV: PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC;
pub extern var __glewTextureImage3DMultisampleNV: PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC;
pub extern var __glewActiveVaryingNV: PFNGLACTIVEVARYINGNVPROC;
pub extern var __glewBeginTransformFeedbackNV: PFNGLBEGINTRANSFORMFEEDBACKNVPROC;
pub extern var __glewBindBufferBaseNV: PFNGLBINDBUFFERBASENVPROC;
pub extern var __glewBindBufferOffsetNV: PFNGLBINDBUFFEROFFSETNVPROC;
pub extern var __glewBindBufferRangeNV: PFNGLBINDBUFFERRANGENVPROC;
pub extern var __glewEndTransformFeedbackNV: PFNGLENDTRANSFORMFEEDBACKNVPROC;
pub extern var __glewGetActiveVaryingNV: PFNGLGETACTIVEVARYINGNVPROC;
pub extern var __glewGetTransformFeedbackVaryingNV: PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC;
pub extern var __glewGetVaryingLocationNV: PFNGLGETVARYINGLOCATIONNVPROC;
pub extern var __glewTransformFeedbackAttribsNV: PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC;
pub extern var __glewTransformFeedbackVaryingsNV: PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC;
pub extern var __glewBindTransformFeedbackNV: PFNGLBINDTRANSFORMFEEDBACKNVPROC;
pub extern var __glewDeleteTransformFeedbacksNV: PFNGLDELETETRANSFORMFEEDBACKSNVPROC;
pub extern var __glewDrawTransformFeedbackNV: PFNGLDRAWTRANSFORMFEEDBACKNVPROC;
pub extern var __glewGenTransformFeedbacksNV: PFNGLGENTRANSFORMFEEDBACKSNVPROC;
pub extern var __glewIsTransformFeedbackNV: PFNGLISTRANSFORMFEEDBACKNVPROC;
pub extern var __glewPauseTransformFeedbackNV: PFNGLPAUSETRANSFORMFEEDBACKNVPROC;
pub extern var __glewResumeTransformFeedbackNV: PFNGLRESUMETRANSFORMFEEDBACKNVPROC;
pub extern var __glewVDPAUFiniNV: PFNGLVDPAUFININVPROC;
pub extern var __glewVDPAUGetSurfaceivNV: PFNGLVDPAUGETSURFACEIVNVPROC;
pub extern var __glewVDPAUInitNV: PFNGLVDPAUINITNVPROC;
pub extern var __glewVDPAUIsSurfaceNV: PFNGLVDPAUISSURFACENVPROC;
pub extern var __glewVDPAUMapSurfacesNV: PFNGLVDPAUMAPSURFACESNVPROC;
pub extern var __glewVDPAURegisterOutputSurfaceNV: PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC;
pub extern var __glewVDPAURegisterVideoSurfaceNV: PFNGLVDPAUREGISTERVIDEOSURFACENVPROC;
pub extern var __glewVDPAUSurfaceAccessNV: PFNGLVDPAUSURFACEACCESSNVPROC;
pub extern var __glewVDPAUUnmapSurfacesNV: PFNGLVDPAUUNMAPSURFACESNVPROC;
pub extern var __glewVDPAUUnregisterSurfaceNV: PFNGLVDPAUUNREGISTERSURFACENVPROC;
pub extern var __glewVDPAURegisterVideoSurfaceWithPictureStructureNV: PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC;
pub extern var __glewFlushVertexArrayRangeNV: PFNGLFLUSHVERTEXARRAYRANGENVPROC;
pub extern var __glewVertexArrayRangeNV: PFNGLVERTEXARRAYRANGENVPROC;
pub extern var __glewGetVertexAttribLi64vNV: PFNGLGETVERTEXATTRIBLI64VNVPROC;
pub extern var __glewGetVertexAttribLui64vNV: PFNGLGETVERTEXATTRIBLUI64VNVPROC;
pub extern var __glewVertexAttribL1i64NV: PFNGLVERTEXATTRIBL1I64NVPROC;
pub extern var __glewVertexAttribL1i64vNV: PFNGLVERTEXATTRIBL1I64VNVPROC;
pub extern var __glewVertexAttribL1ui64NV: PFNGLVERTEXATTRIBL1UI64NVPROC;
pub extern var __glewVertexAttribL1ui64vNV: PFNGLVERTEXATTRIBL1UI64VNVPROC;
pub extern var __glewVertexAttribL2i64NV: PFNGLVERTEXATTRIBL2I64NVPROC;
pub extern var __glewVertexAttribL2i64vNV: PFNGLVERTEXATTRIBL2I64VNVPROC;
pub extern var __glewVertexAttribL2ui64NV: PFNGLVERTEXATTRIBL2UI64NVPROC;
pub extern var __glewVertexAttribL2ui64vNV: PFNGLVERTEXATTRIBL2UI64VNVPROC;
pub extern var __glewVertexAttribL3i64NV: PFNGLVERTEXATTRIBL3I64NVPROC;
pub extern var __glewVertexAttribL3i64vNV: PFNGLVERTEXATTRIBL3I64VNVPROC;
pub extern var __glewVertexAttribL3ui64NV: PFNGLVERTEXATTRIBL3UI64NVPROC;
pub extern var __glewVertexAttribL3ui64vNV: PFNGLVERTEXATTRIBL3UI64VNVPROC;
pub extern var __glewVertexAttribL4i64NV: PFNGLVERTEXATTRIBL4I64NVPROC;
pub extern var __glewVertexAttribL4i64vNV: PFNGLVERTEXATTRIBL4I64VNVPROC;
pub extern var __glewVertexAttribL4ui64NV: PFNGLVERTEXATTRIBL4UI64NVPROC;
pub extern var __glewVertexAttribL4ui64vNV: PFNGLVERTEXATTRIBL4UI64VNVPROC;
pub extern var __glewVertexAttribLFormatNV: PFNGLVERTEXATTRIBLFORMATNVPROC;
pub extern var __glewBufferAddressRangeNV: PFNGLBUFFERADDRESSRANGENVPROC;
pub extern var __glewColorFormatNV: PFNGLCOLORFORMATNVPROC;
pub extern var __glewEdgeFlagFormatNV: PFNGLEDGEFLAGFORMATNVPROC;
pub extern var __glewFogCoordFormatNV: PFNGLFOGCOORDFORMATNVPROC;
pub extern var __glewGetIntegerui64i_vNV: PFNGLGETINTEGERUI64I_VNVPROC;
pub extern var __glewIndexFormatNV: PFNGLINDEXFORMATNVPROC;
pub extern var __glewNormalFormatNV: PFNGLNORMALFORMATNVPROC;
pub extern var __glewSecondaryColorFormatNV: PFNGLSECONDARYCOLORFORMATNVPROC;
pub extern var __glewTexCoordFormatNV: PFNGLTEXCOORDFORMATNVPROC;
pub extern var __glewVertexAttribFormatNV: PFNGLVERTEXATTRIBFORMATNVPROC;
pub extern var __glewVertexAttribIFormatNV: PFNGLVERTEXATTRIBIFORMATNVPROC;
pub extern var __glewVertexFormatNV: PFNGLVERTEXFORMATNVPROC;
pub extern var __glewAreProgramsResidentNV: PFNGLAREPROGRAMSRESIDENTNVPROC;
pub extern var __glewBindProgramNV: PFNGLBINDPROGRAMNVPROC;
pub extern var __glewDeleteProgramsNV: PFNGLDELETEPROGRAMSNVPROC;
pub extern var __glewExecuteProgramNV: PFNGLEXECUTEPROGRAMNVPROC;
pub extern var __glewGenProgramsNV: PFNGLGENPROGRAMSNVPROC;
pub extern var __glewGetProgramParameterdvNV: PFNGLGETPROGRAMPARAMETERDVNVPROC;
pub extern var __glewGetProgramParameterfvNV: PFNGLGETPROGRAMPARAMETERFVNVPROC;
pub extern var __glewGetProgramStringNV: PFNGLGETPROGRAMSTRINGNVPROC;
pub extern var __glewGetProgramivNV: PFNGLGETPROGRAMIVNVPROC;
pub extern var __glewGetTrackMatrixivNV: PFNGLGETTRACKMATRIXIVNVPROC;
pub extern var __glewGetVertexAttribPointervNV: PFNGLGETVERTEXATTRIBPOINTERVNVPROC;
pub extern var __glewGetVertexAttribdvNV: PFNGLGETVERTEXATTRIBDVNVPROC;
pub extern var __glewGetVertexAttribfvNV: PFNGLGETVERTEXATTRIBFVNVPROC;
pub extern var __glewGetVertexAttribivNV: PFNGLGETVERTEXATTRIBIVNVPROC;
pub extern var __glewIsProgramNV: PFNGLISPROGRAMNVPROC;
pub extern var __glewLoadProgramNV: PFNGLLOADPROGRAMNVPROC;
pub extern var __glewProgramParameter4dNV: PFNGLPROGRAMPARAMETER4DNVPROC;
pub extern var __glewProgramParameter4dvNV: PFNGLPROGRAMPARAMETER4DVNVPROC;
pub extern var __glewProgramParameter4fNV: PFNGLPROGRAMPARAMETER4FNVPROC;
pub extern var __glewProgramParameter4fvNV: PFNGLPROGRAMPARAMETER4FVNVPROC;
pub extern var __glewProgramParameters4dvNV: PFNGLPROGRAMPARAMETERS4DVNVPROC;
pub extern var __glewProgramParameters4fvNV: PFNGLPROGRAMPARAMETERS4FVNVPROC;
pub extern var __glewRequestResidentProgramsNV: PFNGLREQUESTRESIDENTPROGRAMSNVPROC;
pub extern var __glewTrackMatrixNV: PFNGLTRACKMATRIXNVPROC;
pub extern var __glewVertexAttrib1dNV: PFNGLVERTEXATTRIB1DNVPROC;
pub extern var __glewVertexAttrib1dvNV: PFNGLVERTEXATTRIB1DVNVPROC;
pub extern var __glewVertexAttrib1fNV: PFNGLVERTEXATTRIB1FNVPROC;
pub extern var __glewVertexAttrib1fvNV: PFNGLVERTEXATTRIB1FVNVPROC;
pub extern var __glewVertexAttrib1sNV: PFNGLVERTEXATTRIB1SNVPROC;
pub extern var __glewVertexAttrib1svNV: PFNGLVERTEXATTRIB1SVNVPROC;
pub extern var __glewVertexAttrib2dNV: PFNGLVERTEXATTRIB2DNVPROC;
pub extern var __glewVertexAttrib2dvNV: PFNGLVERTEXATTRIB2DVNVPROC;
pub extern var __glewVertexAttrib2fNV: PFNGLVERTEXATTRIB2FNVPROC;
pub extern var __glewVertexAttrib2fvNV: PFNGLVERTEXATTRIB2FVNVPROC;
pub extern var __glewVertexAttrib2sNV: PFNGLVERTEXATTRIB2SNVPROC;
pub extern var __glewVertexAttrib2svNV: PFNGLVERTEXATTRIB2SVNVPROC;
pub extern var __glewVertexAttrib3dNV: PFNGLVERTEXATTRIB3DNVPROC;
pub extern var __glewVertexAttrib3dvNV: PFNGLVERTEXATTRIB3DVNVPROC;
pub extern var __glewVertexAttrib3fNV: PFNGLVERTEXATTRIB3FNVPROC;
pub extern var __glewVertexAttrib3fvNV: PFNGLVERTEXATTRIB3FVNVPROC;
pub extern var __glewVertexAttrib3sNV: PFNGLVERTEXATTRIB3SNVPROC;
pub extern var __glewVertexAttrib3svNV: PFNGLVERTEXATTRIB3SVNVPROC;
pub extern var __glewVertexAttrib4dNV: PFNGLVERTEXATTRIB4DNVPROC;
pub extern var __glewVertexAttrib4dvNV: PFNGLVERTEXATTRIB4DVNVPROC;
pub extern var __glewVertexAttrib4fNV: PFNGLVERTEXATTRIB4FNVPROC;
pub extern var __glewVertexAttrib4fvNV: PFNGLVERTEXATTRIB4FVNVPROC;
pub extern var __glewVertexAttrib4sNV: PFNGLVERTEXATTRIB4SNVPROC;
pub extern var __glewVertexAttrib4svNV: PFNGLVERTEXATTRIB4SVNVPROC;
pub extern var __glewVertexAttrib4ubNV: PFNGLVERTEXATTRIB4UBNVPROC;
pub extern var __glewVertexAttrib4ubvNV: PFNGLVERTEXATTRIB4UBVNVPROC;
pub extern var __glewVertexAttribPointerNV: PFNGLVERTEXATTRIBPOINTERNVPROC;
pub extern var __glewVertexAttribs1dvNV: PFNGLVERTEXATTRIBS1DVNVPROC;
pub extern var __glewVertexAttribs1fvNV: PFNGLVERTEXATTRIBS1FVNVPROC;
pub extern var __glewVertexAttribs1svNV: PFNGLVERTEXATTRIBS1SVNVPROC;
pub extern var __glewVertexAttribs2dvNV: PFNGLVERTEXATTRIBS2DVNVPROC;
pub extern var __glewVertexAttribs2fvNV: PFNGLVERTEXATTRIBS2FVNVPROC;
pub extern var __glewVertexAttribs2svNV: PFNGLVERTEXATTRIBS2SVNVPROC;
pub extern var __glewVertexAttribs3dvNV: PFNGLVERTEXATTRIBS3DVNVPROC;
pub extern var __glewVertexAttribs3fvNV: PFNGLVERTEXATTRIBS3FVNVPROC;
pub extern var __glewVertexAttribs3svNV: PFNGLVERTEXATTRIBS3SVNVPROC;
pub extern var __glewVertexAttribs4dvNV: PFNGLVERTEXATTRIBS4DVNVPROC;
pub extern var __glewVertexAttribs4fvNV: PFNGLVERTEXATTRIBS4FVNVPROC;
pub extern var __glewVertexAttribs4svNV: PFNGLVERTEXATTRIBS4SVNVPROC;
pub extern var __glewVertexAttribs4ubvNV: PFNGLVERTEXATTRIBS4UBVNVPROC;
pub extern var __glewBeginVideoCaptureNV: PFNGLBEGINVIDEOCAPTURENVPROC;
pub extern var __glewBindVideoCaptureStreamBufferNV: PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC;
pub extern var __glewBindVideoCaptureStreamTextureNV: PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC;
pub extern var __glewEndVideoCaptureNV: PFNGLENDVIDEOCAPTURENVPROC;
pub extern var __glewGetVideoCaptureStreamdvNV: PFNGLGETVIDEOCAPTURESTREAMDVNVPROC;
pub extern var __glewGetVideoCaptureStreamfvNV: PFNGLGETVIDEOCAPTURESTREAMFVNVPROC;
pub extern var __glewGetVideoCaptureStreamivNV: PFNGLGETVIDEOCAPTURESTREAMIVNVPROC;
pub extern var __glewGetVideoCaptureivNV: PFNGLGETVIDEOCAPTUREIVNVPROC;
pub extern var __glewVideoCaptureNV: PFNGLVIDEOCAPTURENVPROC;
pub extern var __glewVideoCaptureStreamParameterdvNV: PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC;
pub extern var __glewVideoCaptureStreamParameterfvNV: PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC;
pub extern var __glewVideoCaptureStreamParameterivNV: PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC;
pub extern var __glewDepthRangeArrayfvNV: PFNGLDEPTHRANGEARRAYFVNVPROC;
pub extern var __glewDepthRangeIndexedfNV: PFNGLDEPTHRANGEINDEXEDFNVPROC;
pub extern var __glewDisableiNV: PFNGLDISABLEINVPROC;
pub extern var __glewEnableiNV: PFNGLENABLEINVPROC;
pub extern var __glewGetFloati_vNV: PFNGLGETFLOATI_VNVPROC;
pub extern var __glewIsEnablediNV: PFNGLISENABLEDINVPROC;
pub extern var __glewScissorArrayvNV: PFNGLSCISSORARRAYVNVPROC;
pub extern var __glewScissorIndexedNV: PFNGLSCISSORINDEXEDNVPROC;
pub extern var __glewScissorIndexedvNV: PFNGLSCISSORINDEXEDVNVPROC;
pub extern var __glewViewportArrayvNV: PFNGLVIEWPORTARRAYVNVPROC;
pub extern var __glewViewportIndexedfNV: PFNGLVIEWPORTINDEXEDFNVPROC;
pub extern var __glewViewportIndexedfvNV: PFNGLVIEWPORTINDEXEDFVNVPROC;
pub extern var __glewViewportSwizzleNV: PFNGLVIEWPORTSWIZZLENVPROC;
pub extern var __glewEGLImageTargetRenderbufferStorageOES: PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC;
pub extern var __glewEGLImageTargetTexture2DOES: PFNGLEGLIMAGETARGETTEXTURE2DOESPROC;
pub extern var __glewBlendEquationSeparateOES: PFNGLBLENDEQUATIONSEPARATEOESPROC;
pub extern var __glewBlendFuncSeparateOES: PFNGLBLENDFUNCSEPARATEOESPROC;
pub extern var __glewBlendEquationOES: PFNGLBLENDEQUATIONOESPROC;
pub extern var __glewCopyImageSubDataOES: PFNGLCOPYIMAGESUBDATAOESPROC;
pub extern var __glewBlendEquationSeparateiOES: PFNGLBLENDEQUATIONSEPARATEIOESPROC;
pub extern var __glewBlendEquationiOES: PFNGLBLENDEQUATIONIOESPROC;
pub extern var __glewBlendFuncSeparateiOES: PFNGLBLENDFUNCSEPARATEIOESPROC;
pub extern var __glewBlendFunciOES: PFNGLBLENDFUNCIOESPROC;
pub extern var __glewColorMaskiOES: PFNGLCOLORMASKIOESPROC;
pub extern var __glewDisableiOES: PFNGLDISABLEIOESPROC;
pub extern var __glewEnableiOES: PFNGLENABLEIOESPROC;
pub extern var __glewIsEnablediOES: PFNGLISENABLEDIOESPROC;
pub extern var __glewBindFramebufferOES: PFNGLBINDFRAMEBUFFEROESPROC;
pub extern var __glewBindRenderbufferOES: PFNGLBINDRENDERBUFFEROESPROC;
pub extern var __glewCheckFramebufferStatusOES: PFNGLCHECKFRAMEBUFFERSTATUSOESPROC;
pub extern var __glewDeleteFramebuffersOES: PFNGLDELETEFRAMEBUFFERSOESPROC;
pub extern var __glewDeleteRenderbuffersOES: PFNGLDELETERENDERBUFFERSOESPROC;
pub extern var __glewFramebufferRenderbufferOES: PFNGLFRAMEBUFFERRENDERBUFFEROESPROC;
pub extern var __glewFramebufferTexture2DOES: PFNGLFRAMEBUFFERTEXTURE2DOESPROC;
pub extern var __glewGenFramebuffersOES: PFNGLGENFRAMEBUFFERSOESPROC;
pub extern var __glewGenRenderbuffersOES: PFNGLGENRENDERBUFFERSOESPROC;
pub extern var __glewGenerateMipmapOES: PFNGLGENERATEMIPMAPOESPROC;
pub extern var __glewGetFramebufferAttachmentParameterivOES: PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC;
pub extern var __glewGetRenderbufferParameterivOES: PFNGLGETRENDERBUFFERPARAMETERIVOESPROC;
pub extern var __glewIsFramebufferOES: PFNGLISFRAMEBUFFEROESPROC;
pub extern var __glewIsRenderbufferOES: PFNGLISRENDERBUFFEROESPROC;
pub extern var __glewRenderbufferStorageOES: PFNGLRENDERBUFFERSTORAGEOESPROC;
pub extern var __glewGetProgramBinaryOES: PFNGLGETPROGRAMBINARYOESPROC;
pub extern var __glewProgramBinaryOES: PFNGLPROGRAMBINARYOESPROC;
pub extern var __glewGetBufferPointervOES: PFNGLGETBUFFERPOINTERVOESPROC;
pub extern var __glewMapBufferOES: PFNGLMAPBUFFEROESPROC;
pub extern var __glewUnmapBufferOES: PFNGLUNMAPBUFFEROESPROC;
pub extern var __glewCurrentPaletteMatrixOES: PFNGLCURRENTPALETTEMATRIXOESPROC;
pub extern var __glewMatrixIndexPointerOES: PFNGLMATRIXINDEXPOINTEROESPROC;
pub extern var __glewWeightPointerOES: PFNGLWEIGHTPOINTEROESPROC;
pub extern var __glewMinSampleShadingOES: PFNGLMINSAMPLESHADINGOESPROC;
pub extern var __glewClearDepthfOES: PFNGLCLEARDEPTHFOESPROC;
pub extern var __glewClipPlanefOES: PFNGLCLIPPLANEFOESPROC;
pub extern var __glewDepthRangefOES: PFNGLDEPTHRANGEFOESPROC;
pub extern var __glewFrustumfOES: PFNGLFRUSTUMFOESPROC;
pub extern var __glewGetClipPlanefOES: PFNGLGETCLIPPLANEFOESPROC;
pub extern var __glewOrthofOES: PFNGLORTHOFOESPROC;
pub extern var __glewCompressedTexImage3DOES: PFNGLCOMPRESSEDTEXIMAGE3DOESPROC;
pub extern var __glewCompressedTexSubImage3DOES: PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC;
pub extern var __glewCopyTexSubImage3DOES: PFNGLCOPYTEXSUBIMAGE3DOESPROC;
pub extern var __glewFramebufferTexture3DOES: PFNGLFRAMEBUFFERTEXTURE3DOESPROC;
pub extern var __glewTexImage3DOES: PFNGLTEXIMAGE3DOESPROC;
pub extern var __glewTexSubImage3DOES: PFNGLTEXSUBIMAGE3DOESPROC;
pub extern var __glewGetSamplerParameterIivOES: PFNGLGETSAMPLERPARAMETERIIVOESPROC;
pub extern var __glewGetSamplerParameterIuivOES: PFNGLGETSAMPLERPARAMETERIUIVOESPROC;
pub extern var __glewGetTexParameterIivOES: PFNGLGETTEXPARAMETERIIVOESPROC;
pub extern var __glewGetTexParameterIuivOES: PFNGLGETTEXPARAMETERIUIVOESPROC;
pub extern var __glewSamplerParameterIivOES: PFNGLSAMPLERPARAMETERIIVOESPROC;
pub extern var __glewSamplerParameterIuivOES: PFNGLSAMPLERPARAMETERIUIVOESPROC;
pub extern var __glewTexParameterIivOES: PFNGLTEXPARAMETERIIVOESPROC;
pub extern var __glewTexParameterIuivOES: PFNGLTEXPARAMETERIUIVOESPROC;
pub extern var __glewTexBufferOES: PFNGLTEXBUFFEROESPROC;
pub extern var __glewTexBufferRangeOES: PFNGLTEXBUFFERRANGEOESPROC;
pub extern var __glewGetTexGenfvOES: PFNGLGETTEXGENFVOESPROC;
pub extern var __glewGetTexGenivOES: PFNGLGETTEXGENIVOESPROC;
pub extern var __glewGetTexGenxvOES: PFNGLGETTEXGENXVOESPROC;
pub extern var __glewTexGenfOES: PFNGLTEXGENFOESPROC;
pub extern var __glewTexGenfvOES: PFNGLTEXGENFVOESPROC;
pub extern var __glewTexGeniOES: PFNGLTEXGENIOESPROC;
pub extern var __glewTexGenivOES: PFNGLTEXGENIVOESPROC;
pub extern var __glewTexGenxOES: PFNGLTEXGENXOESPROC;
pub extern var __glewTexGenxvOES: PFNGLTEXGENXVOESPROC;
pub extern var __glewTexStorage3DMultisampleOES: PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC;
pub extern var __glewTextureViewOES: PFNGLTEXTUREVIEWOESPROC;
pub extern var __glewBindVertexArrayOES: PFNGLBINDVERTEXARRAYOESPROC;
pub extern var __glewDeleteVertexArraysOES: PFNGLDELETEVERTEXARRAYSOESPROC;
pub extern var __glewGenVertexArraysOES: PFNGLGENVERTEXARRAYSOESPROC;
pub extern var __glewIsVertexArrayOES: PFNGLISVERTEXARRAYOESPROC;
pub extern var __glewFramebufferTextureMultiviewOVR: PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC;
pub extern var __glewNamedFramebufferTextureMultiviewOVR: PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC;
pub extern var __glewFramebufferTextureMultisampleMultiviewOVR: PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC;
pub extern var __glewAlphaFuncQCOM: PFNGLALPHAFUNCQCOMPROC;
pub extern var __glewDisableDriverControlQCOM: PFNGLDISABLEDRIVERCONTROLQCOMPROC;
pub extern var __glewEnableDriverControlQCOM: PFNGLENABLEDRIVERCONTROLQCOMPROC;
pub extern var __glewGetDriverControlStringQCOM: PFNGLGETDRIVERCONTROLSTRINGQCOMPROC;
pub extern var __glewGetDriverControlsQCOM: PFNGLGETDRIVERCONTROLSQCOMPROC;
pub extern var __glewExtGetBufferPointervQCOM: PFNGLEXTGETBUFFERPOINTERVQCOMPROC;
pub extern var __glewExtGetBuffersQCOM: PFNGLEXTGETBUFFERSQCOMPROC;
pub extern var __glewExtGetFramebuffersQCOM: PFNGLEXTGETFRAMEBUFFERSQCOMPROC;
pub extern var __glewExtGetRenderbuffersQCOM: PFNGLEXTGETRENDERBUFFERSQCOMPROC;
pub extern var __glewExtGetTexLevelParameterivQCOM: PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC;
pub extern var __glewExtGetTexSubImageQCOM: PFNGLEXTGETTEXSUBIMAGEQCOMPROC;
pub extern var __glewExtGetTexturesQCOM: PFNGLEXTGETTEXTURESQCOMPROC;
pub extern var __glewExtTexObjectStateOverrideiQCOM: PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC;
pub extern var __glewExtGetProgramBinarySourceQCOM: PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC;
pub extern var __glewExtGetProgramsQCOM: PFNGLEXTGETPROGRAMSQCOMPROC;
pub extern var __glewExtGetShadersQCOM: PFNGLEXTGETSHADERSQCOMPROC;
pub extern var __glewExtIsProgramBinaryQCOM: PFNGLEXTISPROGRAMBINARYQCOMPROC;
pub extern var __glewFramebufferFoveationConfigQCOM: PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC;
pub extern var __glewFramebufferFoveationParametersQCOM: PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC;
pub extern var __glewFramebufferFetchBarrierQCOM: PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC;
pub extern var __glewTextureFoveationParametersQCOM: PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC;
pub extern var __glewEndTilingQCOM: PFNGLENDTILINGQCOMPROC;
pub extern var __glewStartTilingQCOM: PFNGLSTARTTILINGQCOMPROC;
pub extern var __glewAlphaFuncx: PFNGLALPHAFUNCXPROC;
pub extern var __glewClearColorx: PFNGLCLEARCOLORXPROC;
pub extern var __glewClearDepthx: PFNGLCLEARDEPTHXPROC;
pub extern var __glewColor4x: PFNGLCOLOR4XPROC;
pub extern var __glewDepthRangex: PFNGLDEPTHRANGEXPROC;
pub extern var __glewFogx: PFNGLFOGXPROC;
pub extern var __glewFogxv: PFNGLFOGXVPROC;
pub extern var __glewFrustumf: PFNGLFRUSTUMFPROC;
pub extern var __glewFrustumx: PFNGLFRUSTUMXPROC;
pub extern var __glewLightModelx: PFNGLLIGHTMODELXPROC;
pub extern var __glewLightModelxv: PFNGLLIGHTMODELXVPROC;
pub extern var __glewLightx: PFNGLLIGHTXPROC;
pub extern var __glewLightxv: PFNGLLIGHTXVPROC;
pub extern var __glewLineWidthx: PFNGLLINEWIDTHXPROC;
pub extern var __glewLoadMatrixx: PFNGLLOADMATRIXXPROC;
pub extern var __glewMaterialx: PFNGLMATERIALXPROC;
pub extern var __glewMaterialxv: PFNGLMATERIALXVPROC;
pub extern var __glewMultMatrixx: PFNGLMULTMATRIXXPROC;
pub extern var __glewMultiTexCoord4x: PFNGLMULTITEXCOORD4XPROC;
pub extern var __glewNormal3x: PFNGLNORMAL3XPROC;
pub extern var __glewOrthof: PFNGLORTHOFPROC;
pub extern var __glewOrthox: PFNGLORTHOXPROC;
pub extern var __glewPointSizex: PFNGLPOINTSIZEXPROC;
pub extern var __glewPolygonOffsetx: PFNGLPOLYGONOFFSETXPROC;
pub extern var __glewRotatex: PFNGLROTATEXPROC;
pub extern var __glewSampleCoveragex: PFNGLSAMPLECOVERAGEXPROC;
pub extern var __glewScalex: PFNGLSCALEXPROC;
pub extern var __glewTexEnvx: PFNGLTEXENVXPROC;
pub extern var __glewTexEnvxv: PFNGLTEXENVXVPROC;
pub extern var __glewTexParameterx: PFNGLTEXPARAMETERXPROC;
pub extern var __glewTranslatex: PFNGLTRANSLATEXPROC;
pub extern var __glewClipPlanef: PFNGLCLIPPLANEFPROC;
pub extern var __glewClipPlanex: PFNGLCLIPPLANEXPROC;
pub extern var __glewGetClipPlanef: PFNGLGETCLIPPLANEFPROC;
pub extern var __glewGetClipPlanex: PFNGLGETCLIPPLANEXPROC;
pub extern var __glewGetFixedv: PFNGLGETFIXEDVPROC;
pub extern var __glewGetLightxv: PFNGLGETLIGHTXVPROC;
pub extern var __glewGetMaterialxv: PFNGLGETMATERIALXVPROC;
pub extern var __glewGetTexEnvxv: PFNGLGETTEXENVXVPROC;
pub extern var __glewGetTexParameterxv: PFNGLGETTEXPARAMETERXVPROC;
pub extern var __glewPointParameterx: PFNGLPOINTPARAMETERXPROC;
pub extern var __glewPointParameterxv: PFNGLPOINTPARAMETERXVPROC;
pub extern var __glewPointSizePointerOES: PFNGLPOINTSIZEPOINTEROESPROC;
pub extern var __glewTexParameterxv: PFNGLTEXPARAMETERXVPROC;
pub extern var __glewErrorStringREGAL: PFNGLERRORSTRINGREGALPROC;
pub extern var __glewGetExtensionREGAL: PFNGLGETEXTENSIONREGALPROC;
pub extern var __glewIsSupportedREGAL: PFNGLISSUPPORTEDREGALPROC;
pub extern var __glewLogMessageCallbackREGAL: PFNGLLOGMESSAGECALLBACKREGALPROC;
pub extern var __glewGetProcAddressREGAL: PFNGLGETPROCADDRESSREGALPROC;
pub extern var __glewDetailTexFuncSGIS: PFNGLDETAILTEXFUNCSGISPROC;
pub extern var __glewGetDetailTexFuncSGIS: PFNGLGETDETAILTEXFUNCSGISPROC;
pub extern var __glewFogFuncSGIS: PFNGLFOGFUNCSGISPROC;
pub extern var __glewGetFogFuncSGIS: PFNGLGETFOGFUNCSGISPROC;
pub extern var __glewSampleMaskSGIS: PFNGLSAMPLEMASKSGISPROC;
pub extern var __glewSamplePatternSGIS: PFNGLSAMPLEPATTERNSGISPROC;
pub extern var __glewInterleavedTextureCoordSetsSGIS: PFNGLINTERLEAVEDTEXTURECOORDSETSSGISPROC;
pub extern var __glewSelectTextureCoordSetSGIS: PFNGLSELECTTEXTURECOORDSETSGISPROC;
pub extern var __glewSelectTextureSGIS: PFNGLSELECTTEXTURESGISPROC;
pub extern var __glewSelectTextureTransformSGIS: PFNGLSELECTTEXTURETRANSFORMSGISPROC;
pub extern var __glewMultisampleSubRectPosSGIS: PFNGLMULTISAMPLESUBRECTPOSSGISPROC;
pub extern var __glewGetSharpenTexFuncSGIS: PFNGLGETSHARPENTEXFUNCSGISPROC;
pub extern var __glewSharpenTexFuncSGIS: PFNGLSHARPENTEXFUNCSGISPROC;
pub extern var __glewTexImage4DSGIS: PFNGLTEXIMAGE4DSGISPROC;
pub extern var __glewTexSubImage4DSGIS: PFNGLTEXSUBIMAGE4DSGISPROC;
pub extern var __glewGetTexFilterFuncSGIS: PFNGLGETTEXFILTERFUNCSGISPROC;
pub extern var __glewTexFilterFuncSGIS: PFNGLTEXFILTERFUNCSGISPROC;
pub extern var __glewAsyncMarkerSGIX: PFNGLASYNCMARKERSGIXPROC;
pub extern var __glewDeleteAsyncMarkersSGIX: PFNGLDELETEASYNCMARKERSSGIXPROC;
pub extern var __glewFinishAsyncSGIX: PFNGLFINISHASYNCSGIXPROC;
pub extern var __glewGenAsyncMarkersSGIX: PFNGLGENASYNCMARKERSSGIXPROC;
pub extern var __glewIsAsyncMarkerSGIX: PFNGLISASYNCMARKERSGIXPROC;
pub extern var __glewPollAsyncSGIX: PFNGLPOLLASYNCSGIXPROC;
pub extern var __glewAddressSpace: PFNGLADDRESSSPACEPROC;
pub extern var __glewDataPipe: PFNGLDATAPIPEPROC;
pub extern var __glewFlushRasterSGIX: PFNGLFLUSHRASTERSGIXPROC;
pub extern var __glewFogLayersSGIX: PFNGLFOGLAYERSSGIXPROC;
pub extern var __glewGetFogLayersSGIX: PFNGLGETFOGLAYERSSGIXPROC;
pub extern var __glewTextureFogSGIX: PFNGLTEXTUREFOGSGIXPROC;
pub extern var __glewFragmentColorMaterialSGIX: PFNGLFRAGMENTCOLORMATERIALSGIXPROC;
pub extern var __glewFragmentLightModelfSGIX: PFNGLFRAGMENTLIGHTMODELFSGIXPROC;
pub extern var __glewFragmentLightModelfvSGIX: PFNGLFRAGMENTLIGHTMODELFVSGIXPROC;
pub extern var __glewFragmentLightModeliSGIX: PFNGLFRAGMENTLIGHTMODELISGIXPROC;
pub extern var __glewFragmentLightModelivSGIX: PFNGLFRAGMENTLIGHTMODELIVSGIXPROC;
pub extern var __glewFragmentLightfSGIX: PFNGLFRAGMENTLIGHTFSGIXPROC;
pub extern var __glewFragmentLightfvSGIX: PFNGLFRAGMENTLIGHTFVSGIXPROC;
pub extern var __glewFragmentLightiSGIX: PFNGLFRAGMENTLIGHTISGIXPROC;
pub extern var __glewFragmentLightivSGIX: PFNGLFRAGMENTLIGHTIVSGIXPROC;
pub extern var __glewFragmentMaterialfSGIX: PFNGLFRAGMENTMATERIALFSGIXPROC;
pub extern var __glewFragmentMaterialfvSGIX: PFNGLFRAGMENTMATERIALFVSGIXPROC;
pub extern var __glewFragmentMaterialiSGIX: PFNGLFRAGMENTMATERIALISGIXPROC;
pub extern var __glewFragmentMaterialivSGIX: PFNGLFRAGMENTMATERIALIVSGIXPROC;
pub extern var __glewGetFragmentLightfvSGIX: PFNGLGETFRAGMENTLIGHTFVSGIXPROC;
pub extern var __glewGetFragmentLightivSGIX: PFNGLGETFRAGMENTLIGHTIVSGIXPROC;
pub extern var __glewGetFragmentMaterialfvSGIX: PFNGLGETFRAGMENTMATERIALFVSGIXPROC;
pub extern var __glewGetFragmentMaterialivSGIX: PFNGLGETFRAGMENTMATERIALIVSGIXPROC;
pub extern var __glewFrameZoomSGIX: PFNGLFRAMEZOOMSGIXPROC;
pub extern var __glewIglooInterfaceSGIX: PFNGLIGLOOINTERFACESGIXPROC;
pub extern var __glewAllocMPEGPredictorsSGIX: PFNGLALLOCMPEGPREDICTORSSGIXPROC;
pub extern var __glewDeleteMPEGPredictorsSGIX: PFNGLDELETEMPEGPREDICTORSSGIXPROC;
pub extern var __glewGenMPEGPredictorsSGIX: PFNGLGENMPEGPREDICTORSSGIXPROC;
pub extern var __glewGetMPEGParameterfvSGIX: PFNGLGETMPEGPARAMETERFVSGIXPROC;
pub extern var __glewGetMPEGParameterivSGIX: PFNGLGETMPEGPARAMETERIVSGIXPROC;
pub extern var __glewGetMPEGPredictorSGIX: PFNGLGETMPEGPREDICTORSGIXPROC;
pub extern var __glewGetMPEGQuantTableubv: PFNGLGETMPEGQUANTTABLEUBVPROC;
pub extern var __glewIsMPEGPredictorSGIX: PFNGLISMPEGPREDICTORSGIXPROC;
pub extern var __glewMPEGPredictorSGIX: PFNGLMPEGPREDICTORSGIXPROC;
pub extern var __glewMPEGQuantTableubv: PFNGLMPEGQUANTTABLEUBVPROC;
pub extern var __glewSwapMPEGPredictorsSGIX: PFNGLSWAPMPEGPREDICTORSSGIXPROC;
pub extern var __glewGetNonlinLightfvSGIX: PFNGLGETNONLINLIGHTFVSGIXPROC;
pub extern var __glewGetNonlinMaterialfvSGIX: PFNGLGETNONLINMATERIALFVSGIXPROC;
pub extern var __glewNonlinLightfvSGIX: PFNGLNONLINLIGHTFVSGIXPROC;
pub extern var __glewNonlinMaterialfvSGIX: PFNGLNONLINMATERIALFVSGIXPROC;
pub extern var __glewPixelTexGenSGIX: PFNGLPIXELTEXGENSGIXPROC;
pub extern var __glewDeformSGIX: PFNGLDEFORMSGIXPROC;
pub extern var __glewLoadIdentityDeformationMapSGIX: PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC;
pub extern var __glewMeshBreadthSGIX: PFNGLMESHBREADTHSGIXPROC;
pub extern var __glewMeshStrideSGIX: PFNGLMESHSTRIDESGIXPROC;
pub extern var __glewReferencePlaneSGIX: PFNGLREFERENCEPLANESGIXPROC;
pub extern var __glewSpriteParameterfSGIX: PFNGLSPRITEPARAMETERFSGIXPROC;
pub extern var __glewSpriteParameterfvSGIX: PFNGLSPRITEPARAMETERFVSGIXPROC;
pub extern var __glewSpriteParameteriSGIX: PFNGLSPRITEPARAMETERISGIXPROC;
pub extern var __glewSpriteParameterivSGIX: PFNGLSPRITEPARAMETERIVSGIXPROC;
pub extern var __glewTagSampleBufferSGIX: PFNGLTAGSAMPLEBUFFERSGIXPROC;
pub extern var __glewGetVectorOperationSGIX: PFNGLGETVECTOROPERATIONSGIXPROC;
pub extern var __glewVectorOperationSGIX: PFNGLVECTOROPERATIONSGIXPROC;
pub extern var __glewAreVertexArraysResidentSGIX: PFNGLAREVERTEXARRAYSRESIDENTSGIXPROC;
pub extern var __glewBindVertexArraySGIX: PFNGLBINDVERTEXARRAYSGIXPROC;
pub extern var __glewDeleteVertexArraysSGIX: PFNGLDELETEVERTEXARRAYSSGIXPROC;
pub extern var __glewGenVertexArraysSGIX: PFNGLGENVERTEXARRAYSSGIXPROC;
pub extern var __glewIsVertexArraySGIX: PFNGLISVERTEXARRAYSGIXPROC;
pub extern var __glewPrioritizeVertexArraysSGIX: PFNGLPRIORITIZEVERTEXARRAYSSGIXPROC;
pub extern var __glewColorTableParameterfvSGI: PFNGLCOLORTABLEPARAMETERFVSGIPROC;
pub extern var __glewColorTableParameterivSGI: PFNGLCOLORTABLEPARAMETERIVSGIPROC;
pub extern var __glewColorTableSGI: PFNGLCOLORTABLESGIPROC;
pub extern var __glewCopyColorTableSGI: PFNGLCOPYCOLORTABLESGIPROC;
pub extern var __glewGetColorTableParameterfvSGI: PFNGLGETCOLORTABLEPARAMETERFVSGIPROC;
pub extern var __glewGetColorTableParameterivSGI: PFNGLGETCOLORTABLEPARAMETERIVSGIPROC;
pub extern var __glewGetColorTableSGI: PFNGLGETCOLORTABLESGIPROC;
pub extern var __glewGetPixelTransformParameterfvSGI: PFNGLGETPIXELTRANSFORMPARAMETERFVSGIPROC;
pub extern var __glewGetPixelTransformParameterivSGI: PFNGLGETPIXELTRANSFORMPARAMETERIVSGIPROC;
pub extern var __glewPixelTransformParameterfSGI: PFNGLPIXELTRANSFORMPARAMETERFSGIPROC;
pub extern var __glewPixelTransformParameterfvSGI: PFNGLPIXELTRANSFORMPARAMETERFVSGIPROC;
pub extern var __glewPixelTransformParameteriSGI: PFNGLPIXELTRANSFORMPARAMETERISGIPROC;
pub extern var __glewPixelTransformParameterivSGI: PFNGLPIXELTRANSFORMPARAMETERIVSGIPROC;
pub extern var __glewPixelTransformSGI: PFNGLPIXELTRANSFORMSGIPROC;
pub extern var __glewFinishTextureSUNX: PFNGLFINISHTEXTURESUNXPROC;
pub extern var __glewGlobalAlphaFactorbSUN: PFNGLGLOBALALPHAFACTORBSUNPROC;
pub extern var __glewGlobalAlphaFactordSUN: PFNGLGLOBALALPHAFACTORDSUNPROC;
pub extern var __glewGlobalAlphaFactorfSUN: PFNGLGLOBALALPHAFACTORFSUNPROC;
pub extern var __glewGlobalAlphaFactoriSUN: PFNGLGLOBALALPHAFACTORISUNPROC;
pub extern var __glewGlobalAlphaFactorsSUN: PFNGLGLOBALALPHAFACTORSSUNPROC;
pub extern var __glewGlobalAlphaFactorubSUN: PFNGLGLOBALALPHAFACTORUBSUNPROC;
pub extern var __glewGlobalAlphaFactoruiSUN: PFNGLGLOBALALPHAFACTORUISUNPROC;
pub extern var __glewGlobalAlphaFactorusSUN: PFNGLGLOBALALPHAFACTORUSSUNPROC;
pub extern var __glewReadVideoPixelsSUN: PFNGLREADVIDEOPIXELSSUNPROC;
pub extern var __glewReplacementCodePointerSUN: PFNGLREPLACEMENTCODEPOINTERSUNPROC;
pub extern var __glewReplacementCodeubSUN: PFNGLREPLACEMENTCODEUBSUNPROC;
pub extern var __glewReplacementCodeubvSUN: PFNGLREPLACEMENTCODEUBVSUNPROC;
pub extern var __glewReplacementCodeuiSUN: PFNGLREPLACEMENTCODEUISUNPROC;
pub extern var __glewReplacementCodeuivSUN: PFNGLREPLACEMENTCODEUIVSUNPROC;
pub extern var __glewReplacementCodeusSUN: PFNGLREPLACEMENTCODEUSSUNPROC;
pub extern var __glewReplacementCodeusvSUN: PFNGLREPLACEMENTCODEUSVSUNPROC;
pub extern var __glewColor3fVertex3fSUN: PFNGLCOLOR3FVERTEX3FSUNPROC;
pub extern var __glewColor3fVertex3fvSUN: PFNGLCOLOR3FVERTEX3FVSUNPROC;
pub extern var __glewColor4fNormal3fVertex3fSUN: PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewColor4fNormal3fVertex3fvSUN: PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewColor4ubVertex2fSUN: PFNGLCOLOR4UBVERTEX2FSUNPROC;
pub extern var __glewColor4ubVertex2fvSUN: PFNGLCOLOR4UBVERTEX2FVSUNPROC;
pub extern var __glewColor4ubVertex3fSUN: PFNGLCOLOR4UBVERTEX3FSUNPROC;
pub extern var __glewColor4ubVertex3fvSUN: PFNGLCOLOR4UBVERTEX3FVSUNPROC;
pub extern var __glewNormal3fVertex3fSUN: PFNGLNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewNormal3fVertex3fvSUN: PFNGLNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiColor3fVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiColor3fVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiColor4fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiColor4ubVertex3fSUN: PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiColor4ubVertex3fvSUN: PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fVertex3fSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiTexCoord2fVertex3fvSUN: PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC;
pub extern var __glewReplacementCodeuiVertex3fSUN: PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC;
pub extern var __glewReplacementCodeuiVertex3fvSUN: PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fColor3fVertex3fSUN: PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fColor3fVertex3fvSUN: PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fColor4fNormal3fVertex3fSUN: PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fColor4fNormal3fVertex3fvSUN: PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fColor4ubVertex3fSUN: PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fColor4ubVertex3fvSUN: PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fNormal3fVertex3fSUN: PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fNormal3fVertex3fvSUN: PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord2fVertex3fSUN: PFNGLTEXCOORD2FVERTEX3FSUNPROC;
pub extern var __glewTexCoord2fVertex3fvSUN: PFNGLTEXCOORD2FVERTEX3FVSUNPROC;
pub extern var __glewTexCoord4fColor4fNormal3fVertex4fSUN: PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC;
pub extern var __glewTexCoord4fColor4fNormal3fVertex4fvSUN: PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC;
pub extern var __glewTexCoord4fVertex4fSUN: PFNGLTEXCOORD4FVERTEX4FSUNPROC;
pub extern var __glewTexCoord4fVertex4fvSUN: PFNGLTEXCOORD4FVERTEX4FVSUNPROC;
pub extern var __glewAddSwapHintRectWIN: PFNGLADDSWAPHINTRECTWINPROC;
pub extern var __GLEW_VERSION_1_1: GLboolean;
pub extern var __GLEW_VERSION_1_2: GLboolean;
pub extern var __GLEW_VERSION_1_2_1: GLboolean;
pub extern var __GLEW_VERSION_1_3: GLboolean;
pub extern var __GLEW_VERSION_1_4: GLboolean;
pub extern var __GLEW_VERSION_1_5: GLboolean;
pub extern var __GLEW_VERSION_2_0: GLboolean;
pub extern var __GLEW_VERSION_2_1: GLboolean;
pub extern var __GLEW_VERSION_3_0: GLboolean;
pub extern var __GLEW_VERSION_3_1: GLboolean;
pub extern var __GLEW_VERSION_3_2: GLboolean;
pub extern var __GLEW_VERSION_3_3: GLboolean;
pub extern var __GLEW_VERSION_4_0: GLboolean;
pub extern var __GLEW_VERSION_4_1: GLboolean;
pub extern var __GLEW_VERSION_4_2: GLboolean;
pub extern var __GLEW_VERSION_4_3: GLboolean;
pub extern var __GLEW_VERSION_4_4: GLboolean;
pub extern var __GLEW_VERSION_4_5: GLboolean;
pub extern var __GLEW_VERSION_4_6: GLboolean;
pub extern var __GLEW_3DFX_multisample: GLboolean;
pub extern var __GLEW_3DFX_tbuffer: GLboolean;
pub extern var __GLEW_3DFX_texture_compression_FXT1: GLboolean;
pub extern var __GLEW_AMD_blend_minmax_factor: GLboolean;
pub extern var __GLEW_AMD_compressed_3DC_texture: GLboolean;
pub extern var __GLEW_AMD_compressed_ATC_texture: GLboolean;
pub extern var __GLEW_AMD_conservative_depth: GLboolean;
pub extern var __GLEW_AMD_debug_output: GLboolean;
pub extern var __GLEW_AMD_depth_clamp_separate: GLboolean;
pub extern var __GLEW_AMD_draw_buffers_blend: GLboolean;
pub extern var __GLEW_AMD_framebuffer_multisample_advanced: GLboolean;
pub extern var __GLEW_AMD_framebuffer_sample_positions: GLboolean;
pub extern var __GLEW_AMD_gcn_shader: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_half_float: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_half_float_fetch: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_int16: GLboolean;
pub extern var __GLEW_AMD_gpu_shader_int64: GLboolean;
pub extern var __GLEW_AMD_interleaved_elements: GLboolean;
pub extern var __GLEW_AMD_multi_draw_indirect: GLboolean;
pub extern var __GLEW_AMD_name_gen_delete: GLboolean;
pub extern var __GLEW_AMD_occlusion_query_event: GLboolean;
pub extern var __GLEW_AMD_performance_monitor: GLboolean;
pub extern var __GLEW_AMD_pinned_memory: GLboolean;
pub extern var __GLEW_AMD_program_binary_Z400: GLboolean;
pub extern var __GLEW_AMD_query_buffer_object: GLboolean;
pub extern var __GLEW_AMD_sample_positions: GLboolean;
pub extern var __GLEW_AMD_seamless_cubemap_per_texture: GLboolean;
pub extern var __GLEW_AMD_shader_atomic_counter_ops: GLboolean;
pub extern var __GLEW_AMD_shader_ballot: GLboolean;
pub extern var __GLEW_AMD_shader_explicit_vertex_parameter: GLboolean;
pub extern var __GLEW_AMD_shader_image_load_store_lod: GLboolean;
pub extern var __GLEW_AMD_shader_stencil_export: GLboolean;
pub extern var __GLEW_AMD_shader_stencil_value_export: GLboolean;
pub extern var __GLEW_AMD_shader_trinary_minmax: GLboolean;
pub extern var __GLEW_AMD_sparse_texture: GLboolean;
pub extern var __GLEW_AMD_stencil_operation_extended: GLboolean;
pub extern var __GLEW_AMD_texture_gather_bias_lod: GLboolean;
pub extern var __GLEW_AMD_texture_texture4: GLboolean;
pub extern var __GLEW_AMD_transform_feedback3_lines_triangles: GLboolean;
pub extern var __GLEW_AMD_transform_feedback4: GLboolean;
pub extern var __GLEW_AMD_vertex_shader_layer: GLboolean;
pub extern var __GLEW_AMD_vertex_shader_tessellator: GLboolean;
pub extern var __GLEW_AMD_vertex_shader_viewport_index: GLboolean;
pub extern var __GLEW_ANDROID_extension_pack_es31a: GLboolean;
pub extern var __GLEW_ANGLE_depth_texture: GLboolean;
pub extern var __GLEW_ANGLE_framebuffer_blit: GLboolean;
pub extern var __GLEW_ANGLE_framebuffer_multisample: GLboolean;
pub extern var __GLEW_ANGLE_instanced_arrays: GLboolean;
pub extern var __GLEW_ANGLE_pack_reverse_row_order: GLboolean;
pub extern var __GLEW_ANGLE_program_binary: GLboolean;
pub extern var __GLEW_ANGLE_texture_compression_dxt1: GLboolean;
pub extern var __GLEW_ANGLE_texture_compression_dxt3: GLboolean;
pub extern var __GLEW_ANGLE_texture_compression_dxt5: GLboolean;
pub extern var __GLEW_ANGLE_texture_usage: GLboolean;
pub extern var __GLEW_ANGLE_timer_query: GLboolean;
pub extern var __GLEW_ANGLE_translated_shader_source: GLboolean;
pub extern var __GLEW_APPLE_aux_depth_stencil: GLboolean;
pub extern var __GLEW_APPLE_client_storage: GLboolean;
pub extern var __GLEW_APPLE_clip_distance: GLboolean;
pub extern var __GLEW_APPLE_color_buffer_packed_float: GLboolean;
pub extern var __GLEW_APPLE_copy_texture_levels: GLboolean;
pub extern var __GLEW_APPLE_element_array: GLboolean;
pub extern var __GLEW_APPLE_fence: GLboolean;
pub extern var __GLEW_APPLE_float_pixels: GLboolean;
pub extern var __GLEW_APPLE_flush_buffer_range: GLboolean;
pub extern var __GLEW_APPLE_framebuffer_multisample: GLboolean;
pub extern var __GLEW_APPLE_object_purgeable: GLboolean;
pub extern var __GLEW_APPLE_pixel_buffer: GLboolean;
pub extern var __GLEW_APPLE_rgb_422: GLboolean;
pub extern var __GLEW_APPLE_row_bytes: GLboolean;
pub extern var __GLEW_APPLE_specular_vector: GLboolean;
pub extern var __GLEW_APPLE_sync: GLboolean;
pub extern var __GLEW_APPLE_texture_2D_limited_npot: GLboolean;
pub extern var __GLEW_APPLE_texture_format_BGRA8888: GLboolean;
pub extern var __GLEW_APPLE_texture_max_level: GLboolean;
pub extern var __GLEW_APPLE_texture_packed_float: GLboolean;
pub extern var __GLEW_APPLE_texture_range: GLboolean;
pub extern var __GLEW_APPLE_transform_hint: GLboolean;
pub extern var __GLEW_APPLE_vertex_array_object: GLboolean;
pub extern var __GLEW_APPLE_vertex_array_range: GLboolean;
pub extern var __GLEW_APPLE_vertex_program_evaluators: GLboolean;
pub extern var __GLEW_APPLE_ycbcr_422: GLboolean;
pub extern var __GLEW_ARB_ES2_compatibility: GLboolean;
pub extern var __GLEW_ARB_ES3_1_compatibility: GLboolean;
pub extern var __GLEW_ARB_ES3_2_compatibility: GLboolean;
pub extern var __GLEW_ARB_ES3_compatibility: GLboolean;
pub extern var __GLEW_ARB_arrays_of_arrays: GLboolean;
pub extern var __GLEW_ARB_base_instance: GLboolean;
pub extern var __GLEW_ARB_bindless_texture: GLboolean;
pub extern var __GLEW_ARB_blend_func_extended: GLboolean;
pub extern var __GLEW_ARB_buffer_storage: GLboolean;
pub extern var __GLEW_ARB_cl_event: GLboolean;
pub extern var __GLEW_ARB_clear_buffer_object: GLboolean;
pub extern var __GLEW_ARB_clear_texture: GLboolean;
pub extern var __GLEW_ARB_clip_control: GLboolean;
pub extern var __GLEW_ARB_color_buffer_float: GLboolean;
pub extern var __GLEW_ARB_compatibility: GLboolean;
pub extern var __GLEW_ARB_compressed_texture_pixel_storage: GLboolean;
pub extern var __GLEW_ARB_compute_shader: GLboolean;
pub extern var __GLEW_ARB_compute_variable_group_size: GLboolean;
pub extern var __GLEW_ARB_conditional_render_inverted: GLboolean;
pub extern var __GLEW_ARB_conservative_depth: GLboolean;
pub extern var __GLEW_ARB_copy_buffer: GLboolean;
pub extern var __GLEW_ARB_copy_image: GLboolean;
pub extern var __GLEW_ARB_cull_distance: GLboolean;
pub extern var __GLEW_ARB_debug_output: GLboolean;
pub extern var __GLEW_ARB_depth_buffer_float: GLboolean;
pub extern var __GLEW_ARB_depth_clamp: GLboolean;
pub extern var __GLEW_ARB_depth_texture: GLboolean;
pub extern var __GLEW_ARB_derivative_control: GLboolean;
pub extern var __GLEW_ARB_direct_state_access: GLboolean;
pub extern var __GLEW_ARB_draw_buffers: GLboolean;
pub extern var __GLEW_ARB_draw_buffers_blend: GLboolean;
pub extern var __GLEW_ARB_draw_elements_base_vertex: GLboolean;
pub extern var __GLEW_ARB_draw_indirect: GLboolean;
pub extern var __GLEW_ARB_draw_instanced: GLboolean;
pub extern var __GLEW_ARB_enhanced_layouts: GLboolean;
pub extern var __GLEW_ARB_explicit_attrib_location: GLboolean;
pub extern var __GLEW_ARB_explicit_uniform_location: GLboolean;
pub extern var __GLEW_ARB_fragment_coord_conventions: GLboolean;
pub extern var __GLEW_ARB_fragment_layer_viewport: GLboolean;
pub extern var __GLEW_ARB_fragment_program: GLboolean;
pub extern var __GLEW_ARB_fragment_program_shadow: GLboolean;
pub extern var __GLEW_ARB_fragment_shader: GLboolean;
pub extern var __GLEW_ARB_fragment_shader_interlock: GLboolean;
pub extern var __GLEW_ARB_framebuffer_no_attachments: GLboolean;
pub extern var __GLEW_ARB_framebuffer_object: GLboolean;
pub extern var __GLEW_ARB_framebuffer_sRGB: GLboolean;
pub extern var __GLEW_ARB_geometry_shader4: GLboolean;
pub extern var __GLEW_ARB_get_program_binary: GLboolean;
pub extern var __GLEW_ARB_get_texture_sub_image: GLboolean;
pub extern var __GLEW_ARB_gl_spirv: GLboolean;
pub extern var __GLEW_ARB_gpu_shader5: GLboolean;
pub extern var __GLEW_ARB_gpu_shader_fp64: GLboolean;
pub extern var __GLEW_ARB_gpu_shader_int64: GLboolean;
pub extern var __GLEW_ARB_half_float_pixel: GLboolean;
pub extern var __GLEW_ARB_half_float_vertex: GLboolean;
pub extern var __GLEW_ARB_imaging: GLboolean;
pub extern var __GLEW_ARB_indirect_parameters: GLboolean;
pub extern var __GLEW_ARB_instanced_arrays: GLboolean;
pub extern var __GLEW_ARB_internalformat_query: GLboolean;
pub extern var __GLEW_ARB_internalformat_query2: GLboolean;
pub extern var __GLEW_ARB_invalidate_subdata: GLboolean;
pub extern var __GLEW_ARB_map_buffer_alignment: GLboolean;
pub extern var __GLEW_ARB_map_buffer_range: GLboolean;
pub extern var __GLEW_ARB_matrix_palette: GLboolean;
pub extern var __GLEW_ARB_multi_bind: GLboolean;
pub extern var __GLEW_ARB_multi_draw_indirect: GLboolean;
pub extern var __GLEW_ARB_multisample: GLboolean;
pub extern var __GLEW_ARB_multitexture: GLboolean;
pub extern var __GLEW_ARB_occlusion_query: GLboolean;
pub extern var __GLEW_ARB_occlusion_query2: GLboolean;
pub extern var __GLEW_ARB_parallel_shader_compile: GLboolean;
pub extern var __GLEW_ARB_pipeline_statistics_query: GLboolean;
pub extern var __GLEW_ARB_pixel_buffer_object: GLboolean;
pub extern var __GLEW_ARB_point_parameters: GLboolean;
pub extern var __GLEW_ARB_point_sprite: GLboolean;
pub extern var __GLEW_ARB_polygon_offset_clamp: GLboolean;
pub extern var __GLEW_ARB_post_depth_coverage: GLboolean;
pub extern var __GLEW_ARB_program_interface_query: GLboolean;
pub extern var __GLEW_ARB_provoking_vertex: GLboolean;
pub extern var __GLEW_ARB_query_buffer_object: GLboolean;
pub extern var __GLEW_ARB_robust_buffer_access_behavior: GLboolean;
pub extern var __GLEW_ARB_robustness: GLboolean;
pub extern var __GLEW_ARB_robustness_application_isolation: GLboolean;
pub extern var __GLEW_ARB_robustness_share_group_isolation: GLboolean;
pub extern var __GLEW_ARB_sample_locations: GLboolean;
pub extern var __GLEW_ARB_sample_shading: GLboolean;
pub extern var __GLEW_ARB_sampler_objects: GLboolean;
pub extern var __GLEW_ARB_seamless_cube_map: GLboolean;
pub extern var __GLEW_ARB_seamless_cubemap_per_texture: GLboolean;
pub extern var __GLEW_ARB_separate_shader_objects: GLboolean;
pub extern var __GLEW_ARB_shader_atomic_counter_ops: GLboolean;
pub extern var __GLEW_ARB_shader_atomic_counters: GLboolean;
pub extern var __GLEW_ARB_shader_ballot: GLboolean;
pub extern var __GLEW_ARB_shader_bit_encoding: GLboolean;
pub extern var __GLEW_ARB_shader_clock: GLboolean;
pub extern var __GLEW_ARB_shader_draw_parameters: GLboolean;
pub extern var __GLEW_ARB_shader_group_vote: GLboolean;
pub extern var __GLEW_ARB_shader_image_load_store: GLboolean;
pub extern var __GLEW_ARB_shader_image_size: GLboolean;
pub extern var __GLEW_ARB_shader_objects: GLboolean;
pub extern var __GLEW_ARB_shader_precision: GLboolean;
pub extern var __GLEW_ARB_shader_stencil_export: GLboolean;
pub extern var __GLEW_ARB_shader_storage_buffer_object: GLboolean;
pub extern var __GLEW_ARB_shader_subroutine: GLboolean;
pub extern var __GLEW_ARB_shader_texture_image_samples: GLboolean;
pub extern var __GLEW_ARB_shader_texture_lod: GLboolean;
pub extern var __GLEW_ARB_shader_viewport_layer_array: GLboolean;
pub extern var __GLEW_ARB_shading_language_100: GLboolean;
pub extern var __GLEW_ARB_shading_language_420pack: GLboolean;
pub extern var __GLEW_ARB_shading_language_include: GLboolean;
pub extern var __GLEW_ARB_shading_language_packing: GLboolean;
pub extern var __GLEW_ARB_shadow: GLboolean;
pub extern var __GLEW_ARB_shadow_ambient: GLboolean;
pub extern var __GLEW_ARB_sparse_buffer: GLboolean;
pub extern var __GLEW_ARB_sparse_texture: GLboolean;
pub extern var __GLEW_ARB_sparse_texture2: GLboolean;
pub extern var __GLEW_ARB_sparse_texture_clamp: GLboolean;
pub extern var __GLEW_ARB_spirv_extensions: GLboolean;
pub extern var __GLEW_ARB_stencil_texturing: GLboolean;
pub extern var __GLEW_ARB_sync: GLboolean;
pub extern var __GLEW_ARB_tessellation_shader: GLboolean;
pub extern var __GLEW_ARB_texture_barrier: GLboolean;
pub extern var __GLEW_ARB_texture_border_clamp: GLboolean;
pub extern var __GLEW_ARB_texture_buffer_object: GLboolean;
pub extern var __GLEW_ARB_texture_buffer_object_rgb32: GLboolean;
pub extern var __GLEW_ARB_texture_buffer_range: GLboolean;
pub extern var __GLEW_ARB_texture_compression: GLboolean;
pub extern var __GLEW_ARB_texture_compression_bptc: GLboolean;
pub extern var __GLEW_ARB_texture_compression_rgtc: GLboolean;
pub extern var __GLEW_ARB_texture_cube_map: GLboolean;
pub extern var __GLEW_ARB_texture_cube_map_array: GLboolean;
pub extern var __GLEW_ARB_texture_env_add: GLboolean;
pub extern var __GLEW_ARB_texture_env_combine: GLboolean;
pub extern var __GLEW_ARB_texture_env_crossbar: GLboolean;
pub extern var __GLEW_ARB_texture_env_dot3: GLboolean;
pub extern var __GLEW_ARB_texture_filter_anisotropic: GLboolean;
pub extern var __GLEW_ARB_texture_filter_minmax: GLboolean;
pub extern var __GLEW_ARB_texture_float: GLboolean;
pub extern var __GLEW_ARB_texture_gather: GLboolean;
pub extern var __GLEW_ARB_texture_mirror_clamp_to_edge: GLboolean;
pub extern var __GLEW_ARB_texture_mirrored_repeat: GLboolean;
pub extern var __GLEW_ARB_texture_multisample: GLboolean;
pub extern var __GLEW_ARB_texture_non_power_of_two: GLboolean;
pub extern var __GLEW_ARB_texture_query_levels: GLboolean;
pub extern var __GLEW_ARB_texture_query_lod: GLboolean;
pub extern var __GLEW_ARB_texture_rectangle: GLboolean;
pub extern var __GLEW_ARB_texture_rg: GLboolean;
pub extern var __GLEW_ARB_texture_rgb10_a2ui: GLboolean;
pub extern var __GLEW_ARB_texture_stencil8: GLboolean;
pub extern var __GLEW_ARB_texture_storage: GLboolean;
pub extern var __GLEW_ARB_texture_storage_multisample: GLboolean;
pub extern var __GLEW_ARB_texture_swizzle: GLboolean;
pub extern var __GLEW_ARB_texture_view: GLboolean;
pub extern var __GLEW_ARB_timer_query: GLboolean;
pub extern var __GLEW_ARB_transform_feedback2: GLboolean;
pub extern var __GLEW_ARB_transform_feedback3: GLboolean;
pub extern var __GLEW_ARB_transform_feedback_instanced: GLboolean;
pub extern var __GLEW_ARB_transform_feedback_overflow_query: GLboolean;
pub extern var __GLEW_ARB_transpose_matrix: GLboolean;
pub extern var __GLEW_ARB_uniform_buffer_object: GLboolean;
pub extern var __GLEW_ARB_vertex_array_bgra: GLboolean;
pub extern var __GLEW_ARB_vertex_array_object: GLboolean;
pub extern var __GLEW_ARB_vertex_attrib_64bit: GLboolean;
pub extern var __GLEW_ARB_vertex_attrib_binding: GLboolean;
pub extern var __GLEW_ARB_vertex_blend: GLboolean;
pub extern var __GLEW_ARB_vertex_buffer_object: GLboolean;
pub extern var __GLEW_ARB_vertex_program: GLboolean;
pub extern var __GLEW_ARB_vertex_shader: GLboolean;
pub extern var __GLEW_ARB_vertex_type_10f_11f_11f_rev: GLboolean;
pub extern var __GLEW_ARB_vertex_type_2_10_10_10_rev: GLboolean;
pub extern var __GLEW_ARB_viewport_array: GLboolean;
pub extern var __GLEW_ARB_window_pos: GLboolean;
pub extern var __GLEW_ARM_mali_program_binary: GLboolean;
pub extern var __GLEW_ARM_mali_shader_binary: GLboolean;
pub extern var __GLEW_ARM_rgba8: GLboolean;
pub extern var __GLEW_ARM_shader_framebuffer_fetch: GLboolean;
pub extern var __GLEW_ARM_shader_framebuffer_fetch_depth_stencil: GLboolean;
pub extern var __GLEW_ARM_texture_unnormalized_coordinates: GLboolean;
pub extern var __GLEW_ATIX_point_sprites: GLboolean;
pub extern var __GLEW_ATIX_texture_env_combine3: GLboolean;
pub extern var __GLEW_ATIX_texture_env_route: GLboolean;
pub extern var __GLEW_ATIX_vertex_shader_output_point_size: GLboolean;
pub extern var __GLEW_ATI_draw_buffers: GLboolean;
pub extern var __GLEW_ATI_element_array: GLboolean;
pub extern var __GLEW_ATI_envmap_bumpmap: GLboolean;
pub extern var __GLEW_ATI_fragment_shader: GLboolean;
pub extern var __GLEW_ATI_map_object_buffer: GLboolean;
pub extern var __GLEW_ATI_meminfo: GLboolean;
pub extern var __GLEW_ATI_pn_triangles: GLboolean;
pub extern var __GLEW_ATI_separate_stencil: GLboolean;
pub extern var __GLEW_ATI_shader_texture_lod: GLboolean;
pub extern var __GLEW_ATI_text_fragment_shader: GLboolean;
pub extern var __GLEW_ATI_texture_compression_3dc: GLboolean;
pub extern var __GLEW_ATI_texture_env_combine3: GLboolean;
pub extern var __GLEW_ATI_texture_float: GLboolean;
pub extern var __GLEW_ATI_texture_mirror_once: GLboolean;
pub extern var __GLEW_ATI_vertex_array_object: GLboolean;
pub extern var __GLEW_ATI_vertex_attrib_array_object: GLboolean;
pub extern var __GLEW_ATI_vertex_streams: GLboolean;
pub extern var __GLEW_DMP_program_binary: GLboolean;
pub extern var __GLEW_DMP_shader_binary: GLboolean;
pub extern var __GLEW_EXT_422_pixels: GLboolean;
pub extern var __GLEW_EXT_Cg_shader: GLboolean;
pub extern var __GLEW_EXT_EGL_image_array: GLboolean;
pub extern var __GLEW_EXT_EGL_image_external_wrap_modes: GLboolean;
pub extern var __GLEW_EXT_EGL_image_storage: GLboolean;
pub extern var __GLEW_EXT_EGL_sync: GLboolean;
pub extern var __GLEW_EXT_YUV_target: GLboolean;
pub extern var __GLEW_EXT_abgr: GLboolean;
pub extern var __GLEW_EXT_base_instance: GLboolean;
pub extern var __GLEW_EXT_bgra: GLboolean;
pub extern var __GLEW_EXT_bindable_uniform: GLboolean;
pub extern var __GLEW_EXT_blend_color: GLboolean;
pub extern var __GLEW_EXT_blend_equation_separate: GLboolean;
pub extern var __GLEW_EXT_blend_func_extended: GLboolean;
pub extern var __GLEW_EXT_blend_func_separate: GLboolean;
pub extern var __GLEW_EXT_blend_logic_op: GLboolean;
pub extern var __GLEW_EXT_blend_minmax: GLboolean;
pub extern var __GLEW_EXT_blend_subtract: GLboolean;
pub extern var __GLEW_EXT_buffer_storage: GLboolean;
pub extern var __GLEW_EXT_clear_texture: GLboolean;
pub extern var __GLEW_EXT_clip_control: GLboolean;
pub extern var __GLEW_EXT_clip_cull_distance: GLboolean;
pub extern var __GLEW_EXT_clip_volume_hint: GLboolean;
pub extern var __GLEW_EXT_cmyka: GLboolean;
pub extern var __GLEW_EXT_color_buffer_float: GLboolean;
pub extern var __GLEW_EXT_color_buffer_half_float: GLboolean;
pub extern var __GLEW_EXT_color_subtable: GLboolean;
pub extern var __GLEW_EXT_compiled_vertex_array: GLboolean;
pub extern var __GLEW_EXT_compressed_ETC1_RGB8_sub_texture: GLboolean;
pub extern var __GLEW_EXT_conservative_depth: GLboolean;
pub extern var __GLEW_EXT_convolution: GLboolean;
pub extern var __GLEW_EXT_coordinate_frame: GLboolean;
pub extern var __GLEW_EXT_copy_image: GLboolean;
pub extern var __GLEW_EXT_copy_texture: GLboolean;
pub extern var __GLEW_EXT_cull_vertex: GLboolean;
pub extern var __GLEW_EXT_debug_label: GLboolean;
pub extern var __GLEW_EXT_debug_marker: GLboolean;
pub extern var __GLEW_EXT_depth_bounds_test: GLboolean;
pub extern var __GLEW_EXT_depth_clamp: GLboolean;
pub extern var __GLEW_EXT_direct_state_access: GLboolean;
pub extern var __GLEW_EXT_discard_framebuffer: GLboolean;
pub extern var __GLEW_EXT_disjoint_timer_query: GLboolean;
pub extern var __GLEW_EXT_draw_buffers: GLboolean;
pub extern var __GLEW_EXT_draw_buffers2: GLboolean;
pub extern var __GLEW_EXT_draw_buffers_indexed: GLboolean;
pub extern var __GLEW_EXT_draw_elements_base_vertex: GLboolean;
pub extern var __GLEW_EXT_draw_instanced: GLboolean;
pub extern var __GLEW_EXT_draw_range_elements: GLboolean;
pub extern var __GLEW_EXT_draw_transform_feedback: GLboolean;
pub extern var __GLEW_EXT_external_buffer: GLboolean;
pub extern var __GLEW_EXT_float_blend: GLboolean;
pub extern var __GLEW_EXT_fog_coord: GLboolean;
pub extern var __GLEW_EXT_frag_depth: GLboolean;
pub extern var __GLEW_EXT_fragment_lighting: GLboolean;
pub extern var __GLEW_EXT_framebuffer_blit: GLboolean;
pub extern var __GLEW_EXT_framebuffer_multisample: GLboolean;
pub extern var __GLEW_EXT_framebuffer_multisample_blit_scaled: GLboolean;
pub extern var __GLEW_EXT_framebuffer_object: GLboolean;
pub extern var __GLEW_EXT_framebuffer_sRGB: GLboolean;
pub extern var __GLEW_EXT_geometry_point_size: GLboolean;
pub extern var __GLEW_EXT_geometry_shader: GLboolean;
pub extern var __GLEW_EXT_geometry_shader4: GLboolean;
pub extern var __GLEW_EXT_gpu_program_parameters: GLboolean;
pub extern var __GLEW_EXT_gpu_shader4: GLboolean;
pub extern var __GLEW_EXT_gpu_shader5: GLboolean;
pub extern var __GLEW_EXT_histogram: GLboolean;
pub extern var __GLEW_EXT_index_array_formats: GLboolean;
pub extern var __GLEW_EXT_index_func: GLboolean;
pub extern var __GLEW_EXT_index_material: GLboolean;
pub extern var __GLEW_EXT_index_texture: GLboolean;
pub extern var __GLEW_EXT_instanced_arrays: GLboolean;
pub extern var __GLEW_EXT_light_texture: GLboolean;
pub extern var __GLEW_EXT_map_buffer_range: GLboolean;
pub extern var __GLEW_EXT_memory_object: GLboolean;
pub extern var __GLEW_EXT_memory_object_fd: GLboolean;
pub extern var __GLEW_EXT_memory_object_win32: GLboolean;
pub extern var __GLEW_EXT_misc_attribute: GLboolean;
pub extern var __GLEW_EXT_multi_draw_arrays: GLboolean;
pub extern var __GLEW_EXT_multi_draw_indirect: GLboolean;
pub extern var __GLEW_EXT_multiple_textures: GLboolean;
pub extern var __GLEW_EXT_multisample: GLboolean;
pub extern var __GLEW_EXT_multisample_compatibility: GLboolean;
pub extern var __GLEW_EXT_multisampled_render_to_texture: GLboolean;
pub extern var __GLEW_EXT_multisampled_render_to_texture2: GLboolean;
pub extern var __GLEW_EXT_multiview_draw_buffers: GLboolean;
pub extern var __GLEW_EXT_multiview_tessellation_geometry_shader: GLboolean;
pub extern var __GLEW_EXT_multiview_texture_multisample: GLboolean;
pub extern var __GLEW_EXT_multiview_timer_query: GLboolean;
pub extern var __GLEW_EXT_occlusion_query_boolean: GLboolean;
pub extern var __GLEW_EXT_packed_depth_stencil: GLboolean;
pub extern var __GLEW_EXT_packed_float: GLboolean;
pub extern var __GLEW_EXT_packed_pixels: GLboolean;
pub extern var __GLEW_EXT_paletted_texture: GLboolean;
pub extern var __GLEW_EXT_pixel_buffer_object: GLboolean;
pub extern var __GLEW_EXT_pixel_transform: GLboolean;
pub extern var __GLEW_EXT_pixel_transform_color_table: GLboolean;
pub extern var __GLEW_EXT_point_parameters: GLboolean;
pub extern var __GLEW_EXT_polygon_offset: GLboolean;
pub extern var __GLEW_EXT_polygon_offset_clamp: GLboolean;
pub extern var __GLEW_EXT_post_depth_coverage: GLboolean;
pub extern var __GLEW_EXT_primitive_bounding_box: GLboolean;
pub extern var __GLEW_EXT_protected_textures: GLboolean;
pub extern var __GLEW_EXT_provoking_vertex: GLboolean;
pub extern var __GLEW_EXT_pvrtc_sRGB: GLboolean;
pub extern var __GLEW_EXT_raster_multisample: GLboolean;
pub extern var __GLEW_EXT_read_format_bgra: GLboolean;
pub extern var __GLEW_EXT_render_snorm: GLboolean;
pub extern var __GLEW_EXT_rescale_normal: GLboolean;
pub extern var __GLEW_EXT_robustness: GLboolean;
pub extern var __GLEW_EXT_sRGB: GLboolean;
pub extern var __GLEW_EXT_sRGB_write_control: GLboolean;
pub extern var __GLEW_EXT_scene_marker: GLboolean;
pub extern var __GLEW_EXT_secondary_color: GLboolean;
pub extern var __GLEW_EXT_semaphore: GLboolean;
pub extern var __GLEW_EXT_semaphore_fd: GLboolean;
pub extern var __GLEW_EXT_semaphore_win32: GLboolean;
pub extern var __GLEW_EXT_separate_shader_objects: GLboolean;
pub extern var __GLEW_EXT_separate_specular_color: GLboolean;
pub extern var __GLEW_EXT_shader_framebuffer_fetch: GLboolean;
pub extern var __GLEW_EXT_shader_framebuffer_fetch_non_coherent: GLboolean;
pub extern var __GLEW_EXT_shader_group_vote: GLboolean;
pub extern var __GLEW_EXT_shader_image_load_formatted: GLboolean;
pub extern var __GLEW_EXT_shader_image_load_store: GLboolean;
pub extern var __GLEW_EXT_shader_implicit_conversions: GLboolean;
pub extern var __GLEW_EXT_shader_integer_mix: GLboolean;
pub extern var __GLEW_EXT_shader_io_blocks: GLboolean;
pub extern var __GLEW_EXT_shader_non_constant_global_initializers: GLboolean;
pub extern var __GLEW_EXT_shader_pixel_local_storage: GLboolean;
pub extern var __GLEW_EXT_shader_pixel_local_storage2: GLboolean;
pub extern var __GLEW_EXT_shader_texture_lod: GLboolean;
pub extern var __GLEW_EXT_shadow_funcs: GLboolean;
pub extern var __GLEW_EXT_shadow_samplers: GLboolean;
pub extern var __GLEW_EXT_shared_texture_palette: GLboolean;
pub extern var __GLEW_EXT_sparse_texture: GLboolean;
pub extern var __GLEW_EXT_sparse_texture2: GLboolean;
pub extern var __GLEW_EXT_static_vertex_array: GLboolean;
pub extern var __GLEW_EXT_stencil_clear_tag: GLboolean;
pub extern var __GLEW_EXT_stencil_two_side: GLboolean;
pub extern var __GLEW_EXT_stencil_wrap: GLboolean;
pub extern var __GLEW_EXT_subtexture: GLboolean;
pub extern var __GLEW_EXT_tessellation_point_size: GLboolean;
pub extern var __GLEW_EXT_tessellation_shader: GLboolean;
pub extern var __GLEW_EXT_texture: GLboolean;
pub extern var __GLEW_EXT_texture3D: GLboolean;
pub extern var __GLEW_EXT_texture_array: GLboolean;
pub extern var __GLEW_EXT_texture_border_clamp: GLboolean;
pub extern var __GLEW_EXT_texture_buffer: GLboolean;
pub extern var __GLEW_EXT_texture_buffer_object: GLboolean;
pub extern var __GLEW_EXT_texture_compression_astc_decode_mode: GLboolean;
pub extern var __GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5: GLboolean;
pub extern var __GLEW_EXT_texture_compression_bptc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_dxt1: GLboolean;
pub extern var __GLEW_EXT_texture_compression_latc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_rgtc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_s3tc: GLboolean;
pub extern var __GLEW_EXT_texture_compression_s3tc_srgb: GLboolean;
pub extern var __GLEW_EXT_texture_cube_map: GLboolean;
pub extern var __GLEW_EXT_texture_cube_map_array: GLboolean;
pub extern var __GLEW_EXT_texture_edge_clamp: GLboolean;
pub extern var __GLEW_EXT_texture_env: GLboolean;
pub extern var __GLEW_EXT_texture_env_add: GLboolean;
pub extern var __GLEW_EXT_texture_env_combine: GLboolean;
pub extern var __GLEW_EXT_texture_env_dot3: GLboolean;
pub extern var __GLEW_EXT_texture_filter_anisotropic: GLboolean;
pub extern var __GLEW_EXT_texture_filter_minmax: GLboolean;
pub extern var __GLEW_EXT_texture_format_BGRA8888: GLboolean;
pub extern var __GLEW_EXT_texture_format_sRGB_override: GLboolean;
pub extern var __GLEW_EXT_texture_integer: GLboolean;
pub extern var __GLEW_EXT_texture_lod_bias: GLboolean;
pub extern var __GLEW_EXT_texture_mirror_clamp: GLboolean;
pub extern var __GLEW_EXT_texture_mirror_clamp_to_edge: GLboolean;
pub extern var __GLEW_EXT_texture_norm16: GLboolean;
pub extern var __GLEW_EXT_texture_object: GLboolean;
pub extern var __GLEW_EXT_texture_perturb_normal: GLboolean;
pub extern var __GLEW_EXT_texture_query_lod: GLboolean;
pub extern var __GLEW_EXT_texture_rectangle: GLboolean;
pub extern var __GLEW_EXT_texture_rg: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB_R8: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB_RG8: GLboolean;
pub extern var __GLEW_EXT_texture_sRGB_decode: GLboolean;
pub extern var __GLEW_EXT_texture_shadow_lod: GLboolean;
pub extern var __GLEW_EXT_texture_shared_exponent: GLboolean;
pub extern var __GLEW_EXT_texture_snorm: GLboolean;
pub extern var __GLEW_EXT_texture_storage: GLboolean;
pub extern var __GLEW_EXT_texture_swizzle: GLboolean;
pub extern var __GLEW_EXT_texture_type_2_10_10_10_REV: GLboolean;
pub extern var __GLEW_EXT_texture_view: GLboolean;
pub extern var __GLEW_EXT_timer_query: GLboolean;
pub extern var __GLEW_EXT_transform_feedback: GLboolean;
pub extern var __GLEW_EXT_unpack_subimage: GLboolean;
pub extern var __GLEW_EXT_vertex_array: GLboolean;
pub extern var __GLEW_EXT_vertex_array_bgra: GLboolean;
pub extern var __GLEW_EXT_vertex_array_setXXX: GLboolean;
pub extern var __GLEW_EXT_vertex_attrib_64bit: GLboolean;
pub extern var __GLEW_EXT_vertex_shader: GLboolean;
pub extern var __GLEW_EXT_vertex_weighting: GLboolean;
pub extern var __GLEW_EXT_win32_keyed_mutex: GLboolean;
pub extern var __GLEW_EXT_window_rectangles: GLboolean;
pub extern var __GLEW_EXT_x11_sync_object: GLboolean;
pub extern var __GLEW_FJ_shader_binary_GCCSO: GLboolean;
pub extern var __GLEW_GREMEDY_frame_terminator: GLboolean;
pub extern var __GLEW_GREMEDY_string_marker: GLboolean;
pub extern var __GLEW_HP_convolution_border_modes: GLboolean;
pub extern var __GLEW_HP_image_transform: GLboolean;
pub extern var __GLEW_HP_occlusion_test: GLboolean;
pub extern var __GLEW_HP_texture_lighting: GLboolean;
pub extern var __GLEW_IBM_cull_vertex: GLboolean;
pub extern var __GLEW_IBM_multimode_draw_arrays: GLboolean;
pub extern var __GLEW_IBM_rasterpos_clip: GLboolean;
pub extern var __GLEW_IBM_static_data: GLboolean;
pub extern var __GLEW_IBM_texture_mirrored_repeat: GLboolean;
pub extern var __GLEW_IBM_vertex_array_lists: GLboolean;
pub extern var __GLEW_IMG_bindless_texture: GLboolean;
pub extern var __GLEW_IMG_framebuffer_downsample: GLboolean;
pub extern var __GLEW_IMG_multisampled_render_to_texture: GLboolean;
pub extern var __GLEW_IMG_program_binary: GLboolean;
pub extern var __GLEW_IMG_read_format: GLboolean;
pub extern var __GLEW_IMG_shader_binary: GLboolean;
pub extern var __GLEW_IMG_texture_compression_pvrtc: GLboolean;
pub extern var __GLEW_IMG_texture_compression_pvrtc2: GLboolean;
pub extern var __GLEW_IMG_texture_env_enhanced_fixed_function: GLboolean;
pub extern var __GLEW_IMG_texture_filter_cubic: GLboolean;
pub extern var __GLEW_INGR_color_clamp: GLboolean;
pub extern var __GLEW_INGR_interlace_read: GLboolean;
pub extern var __GLEW_INTEL_blackhole_render: GLboolean;
pub extern var __GLEW_INTEL_conservative_rasterization: GLboolean;
pub extern var __GLEW_INTEL_fragment_shader_ordering: GLboolean;
pub extern var __GLEW_INTEL_framebuffer_CMAA: GLboolean;
pub extern var __GLEW_INTEL_map_texture: GLboolean;
pub extern var __GLEW_INTEL_parallel_arrays: GLboolean;
pub extern var __GLEW_INTEL_performance_query: GLboolean;
pub extern var __GLEW_INTEL_shader_integer_functions2: GLboolean;
pub extern var __GLEW_INTEL_texture_scissor: GLboolean;
pub extern var __GLEW_KHR_blend_equation_advanced: GLboolean;
pub extern var __GLEW_KHR_blend_equation_advanced_coherent: GLboolean;
pub extern var __GLEW_KHR_context_flush_control: GLboolean;
pub extern var __GLEW_KHR_debug: GLboolean;
pub extern var __GLEW_KHR_no_error: GLboolean;
pub extern var __GLEW_KHR_parallel_shader_compile: GLboolean;
pub extern var __GLEW_KHR_robust_buffer_access_behavior: GLboolean;
pub extern var __GLEW_KHR_robustness: GLboolean;
pub extern var __GLEW_KHR_shader_subgroup: GLboolean;
pub extern var __GLEW_KHR_texture_compression_astc_hdr: GLboolean;
pub extern var __GLEW_KHR_texture_compression_astc_ldr: GLboolean;
pub extern var __GLEW_KHR_texture_compression_astc_sliced_3d: GLboolean;
pub extern var __GLEW_KTX_buffer_region: GLboolean;
pub extern var __GLEW_MESAX_texture_stack: GLboolean;
pub extern var __GLEW_MESA_framebuffer_flip_y: GLboolean;
pub extern var __GLEW_MESA_pack_invert: GLboolean;
pub extern var __GLEW_MESA_program_binary_formats: GLboolean;
pub extern var __GLEW_MESA_resize_buffers: GLboolean;
pub extern var __GLEW_MESA_shader_integer_functions: GLboolean;
pub extern var __GLEW_MESA_tile_raster_order: GLboolean;
pub extern var __GLEW_MESA_window_pos: GLboolean;
pub extern var __GLEW_MESA_ycbcr_texture: GLboolean;
pub extern var __GLEW_NVX_blend_equation_advanced_multi_draw_buffers: GLboolean;
pub extern var __GLEW_NVX_conditional_render: GLboolean;
pub extern var __GLEW_NVX_gpu_memory_info: GLboolean;
pub extern var __GLEW_NVX_gpu_multicast2: GLboolean;
pub extern var __GLEW_NVX_linked_gpu_multicast: GLboolean;
pub extern var __GLEW_NVX_progress_fence: GLboolean;
pub extern var __GLEW_NV_3dvision_settings: GLboolean;
pub extern var __GLEW_NV_EGL_stream_consumer_external: GLboolean;
pub extern var __GLEW_NV_alpha_to_coverage_dither_control: GLboolean;
pub extern var __GLEW_NV_bgr: GLboolean;
pub extern var __GLEW_NV_bindless_multi_draw_indirect: GLboolean;
pub extern var __GLEW_NV_bindless_multi_draw_indirect_count: GLboolean;
pub extern var __GLEW_NV_bindless_texture: GLboolean;
pub extern var __GLEW_NV_blend_equation_advanced: GLboolean;
pub extern var __GLEW_NV_blend_equation_advanced_coherent: GLboolean;
pub extern var __GLEW_NV_blend_minmax_factor: GLboolean;
pub extern var __GLEW_NV_blend_square: GLboolean;
pub extern var __GLEW_NV_clip_space_w_scaling: GLboolean;
pub extern var __GLEW_NV_command_list: GLboolean;
pub extern var __GLEW_NV_compute_program5: GLboolean;
pub extern var __GLEW_NV_compute_shader_derivatives: GLboolean;
pub extern var __GLEW_NV_conditional_render: GLboolean;
pub extern var __GLEW_NV_conservative_raster: GLboolean;
pub extern var __GLEW_NV_conservative_raster_dilate: GLboolean;
pub extern var __GLEW_NV_conservative_raster_pre_snap: GLboolean;
pub extern var __GLEW_NV_conservative_raster_pre_snap_triangles: GLboolean;
pub extern var __GLEW_NV_conservative_raster_underestimation: GLboolean;
pub extern var __GLEW_NV_copy_buffer: GLboolean;
pub extern var __GLEW_NV_copy_depth_to_color: GLboolean;
pub extern var __GLEW_NV_copy_image: GLboolean;
pub extern var __GLEW_NV_deep_texture3D: GLboolean;
pub extern var __GLEW_NV_depth_buffer_float: GLboolean;
pub extern var __GLEW_NV_depth_clamp: GLboolean;
pub extern var __GLEW_NV_depth_nonlinear: GLboolean;
pub extern var __GLEW_NV_depth_range_unclamped: GLboolean;
pub extern var __GLEW_NV_draw_buffers: GLboolean;
pub extern var __GLEW_NV_draw_instanced: GLboolean;
pub extern var __GLEW_NV_draw_texture: GLboolean;
pub extern var __GLEW_NV_draw_vulkan_image: GLboolean;
pub extern var __GLEW_NV_evaluators: GLboolean;
pub extern var __GLEW_NV_explicit_attrib_location: GLboolean;
pub extern var __GLEW_NV_explicit_multisample: GLboolean;
pub extern var __GLEW_NV_fbo_color_attachments: GLboolean;
pub extern var __GLEW_NV_fence: GLboolean;
pub extern var __GLEW_NV_fill_rectangle: GLboolean;
pub extern var __GLEW_NV_float_buffer: GLboolean;
pub extern var __GLEW_NV_fog_distance: GLboolean;
pub extern var __GLEW_NV_fragment_coverage_to_color: GLboolean;
pub extern var __GLEW_NV_fragment_program: GLboolean;
pub extern var __GLEW_NV_fragment_program2: GLboolean;
pub extern var __GLEW_NV_fragment_program4: GLboolean;
pub extern var __GLEW_NV_fragment_program_option: GLboolean;
pub extern var __GLEW_NV_fragment_shader_barycentric: GLboolean;
pub extern var __GLEW_NV_fragment_shader_interlock: GLboolean;
pub extern var __GLEW_NV_framebuffer_blit: GLboolean;
pub extern var __GLEW_NV_framebuffer_mixed_samples: GLboolean;
pub extern var __GLEW_NV_framebuffer_multisample: GLboolean;
pub extern var __GLEW_NV_framebuffer_multisample_coverage: GLboolean;
pub extern var __GLEW_NV_generate_mipmap_sRGB: GLboolean;
pub extern var __GLEW_NV_geometry_program4: GLboolean;
pub extern var __GLEW_NV_geometry_shader4: GLboolean;
pub extern var __GLEW_NV_geometry_shader_passthrough: GLboolean;
pub extern var __GLEW_NV_gpu_multicast: GLboolean;
pub extern var __GLEW_NV_gpu_program4: GLboolean;
pub extern var __GLEW_NV_gpu_program5: GLboolean;
pub extern var __GLEW_NV_gpu_program5_mem_extended: GLboolean;
pub extern var __GLEW_NV_gpu_program_fp64: GLboolean;
pub extern var __GLEW_NV_gpu_shader5: GLboolean;
pub extern var __GLEW_NV_half_float: GLboolean;
pub extern var __GLEW_NV_image_formats: GLboolean;
pub extern var __GLEW_NV_instanced_arrays: GLboolean;
pub extern var __GLEW_NV_internalformat_sample_query: GLboolean;
pub extern var __GLEW_NV_light_max_exponent: GLboolean;
pub extern var __GLEW_NV_memory_attachment: GLboolean;
pub extern var __GLEW_NV_mesh_shader: GLboolean;
pub extern var __GLEW_NV_multisample_coverage: GLboolean;
pub extern var __GLEW_NV_multisample_filter_hint: GLboolean;
pub extern var __GLEW_NV_non_square_matrices: GLboolean;
pub extern var __GLEW_NV_occlusion_query: GLboolean;
pub extern var __GLEW_NV_pack_subimage: GLboolean;
pub extern var __GLEW_NV_packed_depth_stencil: GLboolean;
pub extern var __GLEW_NV_packed_float: GLboolean;
pub extern var __GLEW_NV_packed_float_linear: GLboolean;
pub extern var __GLEW_NV_parameter_buffer_object: GLboolean;
pub extern var __GLEW_NV_parameter_buffer_object2: GLboolean;
pub extern var __GLEW_NV_path_rendering: GLboolean;
pub extern var __GLEW_NV_path_rendering_shared_edge: GLboolean;
pub extern var __GLEW_NV_pixel_buffer_object: GLboolean;
pub extern var __GLEW_NV_pixel_data_range: GLboolean;
pub extern var __GLEW_NV_platform_binary: GLboolean;
pub extern var __GLEW_NV_point_sprite: GLboolean;
pub extern var __GLEW_NV_polygon_mode: GLboolean;
pub extern var __GLEW_NV_present_video: GLboolean;
pub extern var __GLEW_NV_primitive_restart: GLboolean;
pub extern var __GLEW_NV_query_resource_tag: GLboolean;
pub extern var __GLEW_NV_read_buffer: GLboolean;
pub extern var __GLEW_NV_read_buffer_front: GLboolean;
pub extern var __GLEW_NV_read_depth: GLboolean;
pub extern var __GLEW_NV_read_depth_stencil: GLboolean;
pub extern var __GLEW_NV_read_stencil: GLboolean;
pub extern var __GLEW_NV_register_combiners: GLboolean;
pub extern var __GLEW_NV_register_combiners2: GLboolean;
pub extern var __GLEW_NV_representative_fragment_test: GLboolean;
pub extern var __GLEW_NV_robustness_video_memory_purge: GLboolean;
pub extern var __GLEW_NV_sRGB_formats: GLboolean;
pub extern var __GLEW_NV_sample_locations: GLboolean;
pub extern var __GLEW_NV_sample_mask_override_coverage: GLboolean;
pub extern var __GLEW_NV_scissor_exclusive: GLboolean;
pub extern var __GLEW_NV_shader_atomic_counters: GLboolean;
pub extern var __GLEW_NV_shader_atomic_float: GLboolean;
pub extern var __GLEW_NV_shader_atomic_float64: GLboolean;
pub extern var __GLEW_NV_shader_atomic_fp16_vector: GLboolean;
pub extern var __GLEW_NV_shader_atomic_int64: GLboolean;
pub extern var __GLEW_NV_shader_buffer_load: GLboolean;
pub extern var __GLEW_NV_shader_noperspective_interpolation: GLboolean;
pub extern var __GLEW_NV_shader_storage_buffer_object: GLboolean;
pub extern var __GLEW_NV_shader_subgroup_partitioned: GLboolean;
pub extern var __GLEW_NV_shader_texture_footprint: GLboolean;
pub extern var __GLEW_NV_shader_thread_group: GLboolean;
pub extern var __GLEW_NV_shader_thread_shuffle: GLboolean;
pub extern var __GLEW_NV_shading_rate_image: GLboolean;
pub extern var __GLEW_NV_shadow_samplers_array: GLboolean;
pub extern var __GLEW_NV_shadow_samplers_cube: GLboolean;
pub extern var __GLEW_NV_stereo_view_rendering: GLboolean;
pub extern var __GLEW_NV_tessellation_program5: GLboolean;
pub extern var __GLEW_NV_texgen_emboss: GLboolean;
pub extern var __GLEW_NV_texgen_reflection: GLboolean;
pub extern var __GLEW_NV_texture_array: GLboolean;
pub extern var __GLEW_NV_texture_barrier: GLboolean;
pub extern var __GLEW_NV_texture_border_clamp: GLboolean;
pub extern var __GLEW_NV_texture_compression_latc: GLboolean;
pub extern var __GLEW_NV_texture_compression_s3tc: GLboolean;
pub extern var __GLEW_NV_texture_compression_s3tc_update: GLboolean;
pub extern var __GLEW_NV_texture_compression_vtc: GLboolean;
pub extern var __GLEW_NV_texture_env_combine4: GLboolean;
pub extern var __GLEW_NV_texture_expand_normal: GLboolean;
pub extern var __GLEW_NV_texture_multisample: GLboolean;
pub extern var __GLEW_NV_texture_npot_2D_mipmap: GLboolean;
pub extern var __GLEW_NV_texture_rectangle: GLboolean;
pub extern var __GLEW_NV_texture_rectangle_compressed: GLboolean;
pub extern var __GLEW_NV_texture_shader: GLboolean;
pub extern var __GLEW_NV_texture_shader2: GLboolean;
pub extern var __GLEW_NV_texture_shader3: GLboolean;
pub extern var __GLEW_NV_transform_feedback: GLboolean;
pub extern var __GLEW_NV_transform_feedback2: GLboolean;
pub extern var __GLEW_NV_uniform_buffer_unified_memory: GLboolean;
pub extern var __GLEW_NV_vdpau_interop: GLboolean;
pub extern var __GLEW_NV_vdpau_interop2: GLboolean;
pub extern var __GLEW_NV_vertex_array_range: GLboolean;
pub extern var __GLEW_NV_vertex_array_range2: GLboolean;
pub extern var __GLEW_NV_vertex_attrib_integer_64bit: GLboolean;
pub extern var __GLEW_NV_vertex_buffer_unified_memory: GLboolean;
pub extern var __GLEW_NV_vertex_program: GLboolean;
pub extern var __GLEW_NV_vertex_program1_1: GLboolean;
pub extern var __GLEW_NV_vertex_program2: GLboolean;
pub extern var __GLEW_NV_vertex_program2_option: GLboolean;
pub extern var __GLEW_NV_vertex_program3: GLboolean;
pub extern var __GLEW_NV_vertex_program4: GLboolean;
pub extern var __GLEW_NV_video_capture: GLboolean;
pub extern var __GLEW_NV_viewport_array: GLboolean;
pub extern var __GLEW_NV_viewport_array2: GLboolean;
pub extern var __GLEW_NV_viewport_swizzle: GLboolean;
pub extern var __GLEW_OES_EGL_image: GLboolean;
pub extern var __GLEW_OES_EGL_image_external: GLboolean;
pub extern var __GLEW_OES_EGL_image_external_essl3: GLboolean;
pub extern var __GLEW_OES_blend_equation_separate: GLboolean;
pub extern var __GLEW_OES_blend_func_separate: GLboolean;
pub extern var __GLEW_OES_blend_subtract: GLboolean;
pub extern var __GLEW_OES_byte_coordinates: GLboolean;
pub extern var __GLEW_OES_compressed_ETC1_RGB8_texture: GLboolean;
pub extern var __GLEW_OES_compressed_paletted_texture: GLboolean;
pub extern var __GLEW_OES_copy_image: GLboolean;
pub extern var __GLEW_OES_depth24: GLboolean;
pub extern var __GLEW_OES_depth32: GLboolean;
pub extern var __GLEW_OES_depth_texture: GLboolean;
pub extern var __GLEW_OES_depth_texture_cube_map: GLboolean;
pub extern var __GLEW_OES_draw_buffers_indexed: GLboolean;
pub extern var __GLEW_OES_draw_texture: GLboolean;
pub extern var __GLEW_OES_element_index_uint: GLboolean;
pub extern var __GLEW_OES_extended_matrix_palette: GLboolean;
pub extern var __GLEW_OES_fbo_render_mipmap: GLboolean;
pub extern var __GLEW_OES_fragment_precision_high: GLboolean;
pub extern var __GLEW_OES_framebuffer_object: GLboolean;
pub extern var __GLEW_OES_geometry_point_size: GLboolean;
pub extern var __GLEW_OES_geometry_shader: GLboolean;
pub extern var __GLEW_OES_get_program_binary: GLboolean;
pub extern var __GLEW_OES_gpu_shader5: GLboolean;
pub extern var __GLEW_OES_mapbuffer: GLboolean;
pub extern var __GLEW_OES_matrix_get: GLboolean;
pub extern var __GLEW_OES_matrix_palette: GLboolean;
pub extern var __GLEW_OES_packed_depth_stencil: GLboolean;
pub extern var __GLEW_OES_point_size_array: GLboolean;
pub extern var __GLEW_OES_point_sprite: GLboolean;
pub extern var __GLEW_OES_read_format: GLboolean;
pub extern var __GLEW_OES_required_internalformat: GLboolean;
pub extern var __GLEW_OES_rgb8_rgba8: GLboolean;
pub extern var __GLEW_OES_sample_shading: GLboolean;
pub extern var __GLEW_OES_sample_variables: GLboolean;
pub extern var __GLEW_OES_shader_image_atomic: GLboolean;
pub extern var __GLEW_OES_shader_io_blocks: GLboolean;
pub extern var __GLEW_OES_shader_multisample_interpolation: GLboolean;
pub extern var __GLEW_OES_single_precision: GLboolean;
pub extern var __GLEW_OES_standard_derivatives: GLboolean;
pub extern var __GLEW_OES_stencil1: GLboolean;
pub extern var __GLEW_OES_stencil4: GLboolean;
pub extern var __GLEW_OES_stencil8: GLboolean;
pub extern var __GLEW_OES_surfaceless_context: GLboolean;
pub extern var __GLEW_OES_tessellation_point_size: GLboolean;
pub extern var __GLEW_OES_tessellation_shader: GLboolean;
pub extern var __GLEW_OES_texture_3D: GLboolean;
pub extern var __GLEW_OES_texture_border_clamp: GLboolean;
pub extern var __GLEW_OES_texture_buffer: GLboolean;
pub extern var __GLEW_OES_texture_compression_astc: GLboolean;
pub extern var __GLEW_OES_texture_cube_map: GLboolean;
pub extern var __GLEW_OES_texture_cube_map_array: GLboolean;
pub extern var __GLEW_OES_texture_env_crossbar: GLboolean;
pub extern var __GLEW_OES_texture_mirrored_repeat: GLboolean;
pub extern var __GLEW_OES_texture_npot: GLboolean;
pub extern var __GLEW_OES_texture_stencil8: GLboolean;
pub extern var __GLEW_OES_texture_storage_multisample_2d_array: GLboolean;
pub extern var __GLEW_OES_texture_view: GLboolean;
pub extern var __GLEW_OES_vertex_array_object: GLboolean;
pub extern var __GLEW_OES_vertex_half_float: GLboolean;
pub extern var __GLEW_OES_vertex_type_10_10_10_2: GLboolean;
pub extern var __GLEW_OML_interlace: GLboolean;
pub extern var __GLEW_OML_resample: GLboolean;
pub extern var __GLEW_OML_subsample: GLboolean;
pub extern var __GLEW_OVR_multiview: GLboolean;
pub extern var __GLEW_OVR_multiview2: GLboolean;
pub extern var __GLEW_OVR_multiview_multisampled_render_to_texture: GLboolean;
pub extern var __GLEW_PGI_misc_hints: GLboolean;
pub extern var __GLEW_PGI_vertex_hints: GLboolean;
pub extern var __GLEW_QCOM_YUV_texture_gather: GLboolean;
pub extern var __GLEW_QCOM_alpha_test: GLboolean;
pub extern var __GLEW_QCOM_binning_control: GLboolean;
pub extern var __GLEW_QCOM_driver_control: GLboolean;
pub extern var __GLEW_QCOM_extended_get: GLboolean;
pub extern var __GLEW_QCOM_extended_get2: GLboolean;
pub extern var __GLEW_QCOM_framebuffer_foveated: GLboolean;
pub extern var __GLEW_QCOM_perfmon_global_mode: GLboolean;
pub extern var __GLEW_QCOM_shader_framebuffer_fetch_noncoherent: GLboolean;
pub extern var __GLEW_QCOM_shader_framebuffer_fetch_rate: GLboolean;
pub extern var __GLEW_QCOM_texture_foveated: GLboolean;
pub extern var __GLEW_QCOM_texture_foveated_subsampled_layout: GLboolean;
pub extern var __GLEW_QCOM_tiled_rendering: GLboolean;
pub extern var __GLEW_QCOM_writeonly_rendering: GLboolean;
pub extern var __GLEW_REGAL_ES1_0_compatibility: GLboolean;
pub extern var __GLEW_REGAL_ES1_1_compatibility: GLboolean;
pub extern var __GLEW_REGAL_enable: GLboolean;
pub extern var __GLEW_REGAL_error_string: GLboolean;
pub extern var __GLEW_REGAL_extension_query: GLboolean;
pub extern var __GLEW_REGAL_log: GLboolean;
pub extern var __GLEW_REGAL_proc_address: GLboolean;
pub extern var __GLEW_REND_screen_coordinates: GLboolean;
pub extern var __GLEW_S3_s3tc: GLboolean;
pub extern var __GLEW_SGIS_clip_band_hint: GLboolean;
pub extern var __GLEW_SGIS_color_range: GLboolean;
pub extern var __GLEW_SGIS_detail_texture: GLboolean;
pub extern var __GLEW_SGIS_fog_function: GLboolean;
pub extern var __GLEW_SGIS_generate_mipmap: GLboolean;
pub extern var __GLEW_SGIS_line_texgen: GLboolean;
pub extern var __GLEW_SGIS_multisample: GLboolean;
pub extern var __GLEW_SGIS_multitexture: GLboolean;
pub extern var __GLEW_SGIS_pixel_texture: GLboolean;
pub extern var __GLEW_SGIS_point_line_texgen: GLboolean;
pub extern var __GLEW_SGIS_shared_multisample: GLboolean;
pub extern var __GLEW_SGIS_sharpen_texture: GLboolean;
pub extern var __GLEW_SGIS_texture4D: GLboolean;
pub extern var __GLEW_SGIS_texture_border_clamp: GLboolean;
pub extern var __GLEW_SGIS_texture_edge_clamp: GLboolean;
pub extern var __GLEW_SGIS_texture_filter4: GLboolean;
pub extern var __GLEW_SGIS_texture_lod: GLboolean;
pub extern var __GLEW_SGIS_texture_select: GLboolean;
pub extern var __GLEW_SGIX_async: GLboolean;
pub extern var __GLEW_SGIX_async_histogram: GLboolean;
pub extern var __GLEW_SGIX_async_pixel: GLboolean;
pub extern var __GLEW_SGIX_bali_g_instruments: GLboolean;
pub extern var __GLEW_SGIX_bali_r_instruments: GLboolean;
pub extern var __GLEW_SGIX_bali_timer_instruments: GLboolean;
pub extern var __GLEW_SGIX_blend_alpha_minmax: GLboolean;
pub extern var __GLEW_SGIX_blend_cadd: GLboolean;
pub extern var __GLEW_SGIX_blend_cmultiply: GLboolean;
pub extern var __GLEW_SGIX_calligraphic_fragment: GLboolean;
pub extern var __GLEW_SGIX_clipmap: GLboolean;
pub extern var __GLEW_SGIX_color_matrix_accuracy: GLboolean;
pub extern var __GLEW_SGIX_color_table_index_mode: GLboolean;
pub extern var __GLEW_SGIX_complex_polar: GLboolean;
pub extern var __GLEW_SGIX_convolution_accuracy: GLboolean;
pub extern var __GLEW_SGIX_cube_map: GLboolean;
pub extern var __GLEW_SGIX_cylinder_texgen: GLboolean;
pub extern var __GLEW_SGIX_datapipe: GLboolean;
pub extern var __GLEW_SGIX_decimation: GLboolean;
pub extern var __GLEW_SGIX_depth_pass_instrument: GLboolean;
pub extern var __GLEW_SGIX_depth_texture: GLboolean;
pub extern var __GLEW_SGIX_dvc: GLboolean;
pub extern var __GLEW_SGIX_flush_raster: GLboolean;
pub extern var __GLEW_SGIX_fog_blend: GLboolean;
pub extern var __GLEW_SGIX_fog_factor_to_alpha: GLboolean;
pub extern var __GLEW_SGIX_fog_layers: GLboolean;
pub extern var __GLEW_SGIX_fog_offset: GLboolean;
pub extern var __GLEW_SGIX_fog_patchy: GLboolean;
pub extern var __GLEW_SGIX_fog_scale: GLboolean;
pub extern var __GLEW_SGIX_fog_texture: GLboolean;
pub extern var __GLEW_SGIX_fragment_lighting_space: GLboolean;
pub extern var __GLEW_SGIX_fragment_specular_lighting: GLboolean;
pub extern var __GLEW_SGIX_fragments_instrument: GLboolean;
pub extern var __GLEW_SGIX_framezoom: GLboolean;
pub extern var __GLEW_SGIX_icc_texture: GLboolean;
pub extern var __GLEW_SGIX_igloo_interface: GLboolean;
pub extern var __GLEW_SGIX_image_compression: GLboolean;
pub extern var __GLEW_SGIX_impact_pixel_texture: GLboolean;
pub extern var __GLEW_SGIX_instrument_error: GLboolean;
pub extern var __GLEW_SGIX_interlace: GLboolean;
pub extern var __GLEW_SGIX_ir_instrument1: GLboolean;
pub extern var __GLEW_SGIX_line_quality_hint: GLboolean;
pub extern var __GLEW_SGIX_list_priority: GLboolean;
pub extern var __GLEW_SGIX_mpeg1: GLboolean;
pub extern var __GLEW_SGIX_mpeg2: GLboolean;
pub extern var __GLEW_SGIX_nonlinear_lighting_pervertex: GLboolean;
pub extern var __GLEW_SGIX_nurbs_eval: GLboolean;
pub extern var __GLEW_SGIX_occlusion_instrument: GLboolean;
pub extern var __GLEW_SGIX_packed_6bytes: GLboolean;
pub extern var __GLEW_SGIX_pixel_texture: GLboolean;
pub extern var __GLEW_SGIX_pixel_texture_bits: GLboolean;
pub extern var __GLEW_SGIX_pixel_texture_lod: GLboolean;
pub extern var __GLEW_SGIX_pixel_tiles: GLboolean;
pub extern var __GLEW_SGIX_polynomial_ffd: GLboolean;
pub extern var __GLEW_SGIX_quad_mesh: GLboolean;
pub extern var __GLEW_SGIX_reference_plane: GLboolean;
pub extern var __GLEW_SGIX_resample: GLboolean;
pub extern var __GLEW_SGIX_scalebias_hint: GLboolean;
pub extern var __GLEW_SGIX_shadow: GLboolean;
pub extern var __GLEW_SGIX_shadow_ambient: GLboolean;
pub extern var __GLEW_SGIX_slim: GLboolean;
pub extern var __GLEW_SGIX_spotlight_cutoff: GLboolean;
pub extern var __GLEW_SGIX_sprite: GLboolean;
pub extern var __GLEW_SGIX_subdiv_patch: GLboolean;
pub extern var __GLEW_SGIX_subsample: GLboolean;
pub extern var __GLEW_SGIX_tag_sample_buffer: GLboolean;
pub extern var __GLEW_SGIX_texture_add_env: GLboolean;
pub extern var __GLEW_SGIX_texture_coordinate_clamp: GLboolean;
pub extern var __GLEW_SGIX_texture_lod_bias: GLboolean;
pub extern var __GLEW_SGIX_texture_mipmap_anisotropic: GLboolean;
pub extern var __GLEW_SGIX_texture_multi_buffer: GLboolean;
pub extern var __GLEW_SGIX_texture_phase: GLboolean;
pub extern var __GLEW_SGIX_texture_range: GLboolean;
pub extern var __GLEW_SGIX_texture_scale_bias: GLboolean;
pub extern var __GLEW_SGIX_texture_supersample: GLboolean;
pub extern var __GLEW_SGIX_vector_ops: GLboolean;
pub extern var __GLEW_SGIX_vertex_array_object: GLboolean;
pub extern var __GLEW_SGIX_vertex_preclip: GLboolean;
pub extern var __GLEW_SGIX_vertex_preclip_hint: GLboolean;
pub extern var __GLEW_SGIX_ycrcb: GLboolean;
pub extern var __GLEW_SGIX_ycrcb_subsample: GLboolean;
pub extern var __GLEW_SGIX_ycrcba: GLboolean;
pub extern var __GLEW_SGI_color_matrix: GLboolean;
pub extern var __GLEW_SGI_color_table: GLboolean;
pub extern var __GLEW_SGI_complex: GLboolean;
pub extern var __GLEW_SGI_complex_type: GLboolean;
pub extern var __GLEW_SGI_fft: GLboolean;
pub extern var __GLEW_SGI_texture_color_table: GLboolean;
pub extern var __GLEW_SUNX_constant_data: GLboolean;
pub extern var __GLEW_SUN_convolution_border_modes: GLboolean;
pub extern var __GLEW_SUN_global_alpha: GLboolean;
pub extern var __GLEW_SUN_mesh_array: GLboolean;
pub extern var __GLEW_SUN_read_video_pixels: GLboolean;
pub extern var __GLEW_SUN_slice_accum: GLboolean;
pub extern var __GLEW_SUN_triangle_list: GLboolean;
pub extern var __GLEW_SUN_vertex: GLboolean;
pub extern var __GLEW_VIV_shader_binary: GLboolean;
pub extern var __GLEW_WIN_phong_shading: GLboolean;
pub extern var __GLEW_WIN_scene_markerXXX: GLboolean;
pub extern var __GLEW_WIN_specular_fog: GLboolean;
pub extern var __GLEW_WIN_swap_hint: GLboolean;
pub extern fn glewInit() GLenum;
pub extern fn glewIsSupported(name: [*c]const u8) GLboolean;
pub extern var glewExperimental: GLboolean;
pub extern fn glewGetExtension(name: [*c]const u8) GLboolean;
pub extern fn glewGetErrorString(@"error": GLenum) [*c]const GLubyte;
pub extern fn glewGetString(name: GLenum) [*c]const GLubyte;
pub const __block = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):27:9
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):82:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):88:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):111:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):115:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):124:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):184:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):206:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):214:9
pub const __USER_LABEL_PREFIX__ = @compileError("unable to translate macro: undefined identifier `_`"); // (no file):305:9
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // (no file):336:9
pub const __null_unspecified = @compileError("unable to translate macro: undefined identifier `_Null_unspecified`"); // (no file):337:9
pub const __nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // (no file):338:9
pub const __weak = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):382:9
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /opt/homebrew/Cellar/zig/0.11.0/lib/zig/include/stddef.h:111:9
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:116:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:117:9
pub const __const = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:119:9
pub const __volatile = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:121:9
pub const __dead2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:165:9
pub const __pure2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:166:9
pub const __stateful_pure = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:167:9
pub const __unused = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:172:9
pub const __used = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:177:9
pub const __cold = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:183:9
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__attribute`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:190:9
pub const __exported = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:200:9
pub const __exported_push = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:201:9
pub const __exported_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:202:9
pub const __deprecated = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:214:9
pub const __deprecated_msg = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:218:10
pub const __kpi_deprecated = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:229:9
pub const __unavailable = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:235:9
pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:257:9
pub const __disable_tail_calls = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:290:9
pub const __not_tail_called = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:302:9
pub const __result_use_check = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:313:9
pub const __swift_unavailable = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:323:9
pub const __header_inline = @compileError("unable to translate C expr: unexpected token 'inline'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:357:10
pub const __header_always_inline = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:370:10
pub const __unreachable_ok_push = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:383:10
pub const __unreachable_ok_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:386:10
pub const __printflike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:407:9
pub const __printf0like = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:409:9
pub const __scanflike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:411:9
pub const __osloglike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:413:9
pub const __IDSTRING = @compileError("unable to translate C expr: unexpected token 'static'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:416:9
pub const __COPYRIGHT = @compileError("unable to translate macro: undefined identifier `copyright`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:419:9
pub const __RCSID = @compileError("unable to translate macro: undefined identifier `rcsid`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:423:9
pub const __SCCSID = @compileError("unable to translate macro: undefined identifier `sccsid`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:427:9
pub const __PROJECT_VERSION = @compileError("unable to translate macro: undefined identifier `project_version`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:431:9
pub const __FBSDID = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:436:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:440:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:444:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token 'const'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:448:9
pub const __alloc_align = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:457:9
pub const __alloc_size = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:478:9
pub const __DARWIN_ALIAS = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:751:9
pub const __DARWIN_ALIAS_C = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:752:9
pub const __DARWIN_ALIAS_I = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:753:9
pub const __DARWIN_NOCANCEL = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:754:9
pub const __DARWIN_INODE64 = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:755:9
pub const __DARWIN_1050 = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:757:9
pub const __DARWIN_1050ALIAS = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:758:9
pub const __DARWIN_1050ALIAS_C = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:759:9
pub const __DARWIN_1050ALIAS_I = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:760:9
pub const __DARWIN_1050INODE64 = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:761:9
pub const __DARWIN_EXTSN = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:763:9
pub const __DARWIN_EXTSN_C = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:764:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:35:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:41:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:47:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:53:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:59:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:65:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:71:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:77:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:83:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:89:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:95:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:101:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:107:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:113:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:119:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:125:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:131:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:137:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:143:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:149:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:155:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:161:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:167:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:173:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:179:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:185:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:191:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:197:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:203:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:209:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:215:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:221:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:227:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:233:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:239:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:245:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:251:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:257:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:263:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:269:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:275:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:281:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:287:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:293:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_5 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:299:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_6 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:305:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_7 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:311:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:317:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:323:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:329:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:335:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_5 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:341:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:347:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_6 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:359:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_7 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:365:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_8 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:371:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:377:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:383:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:389:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:395:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:401:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_5 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:407:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_6 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:413:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_7 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:419:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_8 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:425:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:431:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:437:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:443:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:449:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:455:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_5 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:461:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_6 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:467:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_16_7 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:473:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:479:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:485:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:491:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:497:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_17_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_symbol_aliasing.h:503:9
pub const __DARWIN_ALIAS_STARTING = @compileError("unable to translate macro: undefined identifier `__DARWIN_ALIAS_STARTING_MAC_`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:774:9
pub const __POSIX_C_DEPRECATED = @compileError("unable to translate macro: undefined identifier `___POSIX_C_DEPRECATED_STARTING_`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:837:9
pub const __CAST_AWAY_QUALIFIER = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:935:9
pub const __XNU_PRIVATE_EXTERN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:949:9
pub const __counted_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:963:9
pub const __sized_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:964:9
pub const __ended_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:965:9
pub const __terminated_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:966:9
pub const __ptrcheck_abi_assume_single = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:976:9
pub const __ptrcheck_abi_assume_unsafe_indexable = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:977:9
pub const __unsafe_terminated_by_from_indexable = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:988:9
pub const __unsafe_null_terminated_from_indexable = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:989:9
pub const __ptrcheck_unavailable_r = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:998:9
pub const __compiler_barrier = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1027:9
pub const __enum_open = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1030:9
pub const __enum_closed = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1031:9
pub const __enum_options = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1038:9
pub const __enum_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1051:9
pub const __enum_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1053:9
pub const __options_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1055:9
pub const __options_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/cdefs.h:1057:9
pub const __offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/sys/_types.h:83:9
pub const GLEWAPI = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /opt/homebrew/Cellar/glew/2.2.0_1/include/GL/glew.h:255:12
pub const GLAPI = @compileError("unable to translate C expr: unexpected token 'extern'"); // /opt/homebrew/Cellar/glew/2.2.0_1/include/GL/glew.h:265:9
pub const __MAC_OS_X_VERSION_MIN_REQUIRED = @compileError("unable to translate macro: undefined identifier `__ENVIRONMENT_OS_VERSION_MIN_REQUIRED__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:40:21
pub const __AVAILABILITY_INTERNAL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:160:9
pub const __AVAILABILITY_INTERNAL_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:163:17
pub const __AVAILABILITY_INTERNAL_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:172:9
pub const __AVAILABILITY_INTERNAL_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:173:9
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2831:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2832:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2833:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2835:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2839:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2841:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2846:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2850:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2851:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2853:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2857:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2859:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2863:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2865:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2870:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2874:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2875:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2877:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2881:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2883:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2887:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2889:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2894:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2899:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2903:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2905:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2909:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2911:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2915:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2917:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2921:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2923:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2927:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2929:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2933:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2935:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2939:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2941:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2945:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2947:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2951:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2952:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2953:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2954:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2955:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2956:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2958:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2962:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2964:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2969:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2973:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2974:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2976:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2980:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2982:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2986:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2988:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2993:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2997:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:2998:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3000:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3004:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3006:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3010:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3012:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3017:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3021:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3022:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3024:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3028:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3030:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3034:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3036:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3040:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3042:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3046:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3048:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3052:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3054:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3058:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3060:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3064:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3066:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3070:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3071:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3072:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3073:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3074:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3075:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3077:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3081:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3083:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3088:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3092:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3093:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3095:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3099:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3101:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3105:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3107:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3112:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3116:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3117:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3119:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3123:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3125:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3129:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3131:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3136:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3140:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3141:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3143:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3147:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3149:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3153:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3155:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3159:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3161:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3165:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3167:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3171:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3173:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3177:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3179:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3183:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3184:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3185:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3186:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3187:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3188:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3190:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3194:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3196:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3201:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3205:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3206:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3208:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3212:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3214:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3218:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3220:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3225:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3229:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3230:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3232:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3236:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3238:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3242:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3244:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3249:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3253:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3254:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3256:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3260:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3262:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3266:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3268:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3272:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3274:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3280:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3284:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3286:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3290:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3291:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3292:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3293:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3294:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3295:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3296:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3298:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3302:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3304:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3309:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3313:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3314:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3316:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3320:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3322:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3326:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3328:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3333:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3337:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3338:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3340:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3344:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3346:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3350:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3352:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3357:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3361:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3363:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3367:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3369:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3373:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3375:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3379:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3381:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3385:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3387:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3391:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3392:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3393:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3394:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3395:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3396:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3398:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3402:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3404:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3409:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3413:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3414:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3416:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3420:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3422:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3426:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3428:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3433:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3437:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3438:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3440:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3444:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3446:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3450:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3452:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3457:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3461:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3462:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3464:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3468:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3470:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3474:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3476:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3480:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3482:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3486:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3487:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3488:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3489:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3490:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3491:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3493:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3497:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3499:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3504:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3508:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3509:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3511:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3515:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3517:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3521:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3523:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3528:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3532:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3533:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3535:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3539:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3541:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3545:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3547:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3552:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3556:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3557:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3559:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3563:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3565:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3569:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3571:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3575:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3576:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3577:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3578:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3579:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3580:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3582:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3586:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3588:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3593:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3597:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3598:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3600:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3604:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3606:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3610:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3612:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3617:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3621:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3622:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3624:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3628:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3630:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3634:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3636:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3641:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3645:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3646:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3648:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3652:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3654:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3658:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3659:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3660:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3661:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3662:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3663:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3665:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3669:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3671:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3676:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3680:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3681:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3683:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3687:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3689:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3693:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3695:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3700:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3704:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3705:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3707:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3711:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3713:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3717:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3719:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3724:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3728:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3729:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3730:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3732:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3736:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3737:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3738:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3739:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3741:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3745:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3746:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3747:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3749:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3753:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3755:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3760:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3764:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3765:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3767:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3771:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3773:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3777:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3779:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3784:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3788:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3789:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3791:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3795:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3797:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3801:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3803:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3808:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3812:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3814:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3818:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3820:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3824:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3826:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3830:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3832:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3836:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3838:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3842:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3844:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3848:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3850:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3854:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3856:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3860:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3862:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3867:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3871:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3872:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3873:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3874:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3875:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3876:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3878:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3882:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3884:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3888:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3889:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3891:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3895:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3897:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3901:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3903:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3908:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3912:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3913:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3915:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3919:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3921:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3925:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3927:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3932:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3936:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3937:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3938:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3939:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3941:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3945:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3946:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3948:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3952:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3954:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3958:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3960:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3965:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3969:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3970:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3972:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3976:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3978:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3982:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3984:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3989:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3993:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3994:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3995:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3996:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3997:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:3999:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4003:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4005:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4010:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4014:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4015:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4017:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4021:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4023:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4027:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4029:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4034:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4038:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4039:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4041:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4045:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4047:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4051:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4053:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4058:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4062:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4064:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4068:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4069:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4070:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4071:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4072:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4073:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4075:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4079:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4081:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4085:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4087:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4091:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4092:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4094:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4098:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4100:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4104:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4106:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4111:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4115:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4116:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4117:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4118:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4120:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4124:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4126:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4130:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4131:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4133:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4137:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4139:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4143:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4145:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4150:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4154:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4155:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4156:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4157:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4159:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4163:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4164:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4166:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4170:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4172:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4176:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4178:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4183:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4187:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4188:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4189:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4190:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4191:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4193:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4197:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4199:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4203:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4205:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4210:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4214:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4215:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4217:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4221:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4223:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4227:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4229:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4234:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4238:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4239:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4240:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4241:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4242:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4244:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4248:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4250:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4254:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4256:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4260:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4261:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4262:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4263:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4265:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4269:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4271:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4275:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4276:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4277:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4280:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4284:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4285:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4286:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4287:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4289:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4293:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4295:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4299:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4301:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4306:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4310:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4312:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4316:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4317:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4318:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4319:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4320:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4321:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4322:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4323:21
pub const __AVAILABILITY_INTERNAL__MAC_10_15 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4324:21
pub const __AVAILABILITY_INTERNAL__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4326:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4327:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4328:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4330:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4331:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4332:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4333:21
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4336:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4337:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternalLegacy.h:4338:22
pub const __API_AVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:180:12
pub const __API_DEPRECATED_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:181:12
pub const __API_UNAVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:182:12
pub const __API_AVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:183:12
pub const __API_DEPRECATED_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:184:12
pub const __API_UNAVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:185:12
pub const __API_AVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:186:12
pub const __API_DEPRECATED_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:187:12
pub const __API_UNAVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:188:12
pub const __API_AVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:189:12
pub const __API_DEPRECATED_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:190:12
pub const __API_UNAVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:191:12
pub const __API_AVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:195:12
pub const __API_DEPRECATED_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:196:12
pub const __API_UNAVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:197:12
pub const __API_AVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:198:12
pub const __API_DEPRECATED_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:199:12
pub const __API_UNAVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:200:12
pub const __API_AVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:204:12
pub const __API_DEPRECATED_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:205:12
pub const __API_UNAVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:206:12
pub const __API_AVAILABLE_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:207:12
pub const __API_DEPRECATED_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:208:12
pub const __API_UNAVAILABLE_PLATFORM_visionos = @compileError("unable to translate macro: undefined identifier `visionos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:209:12
pub const __API_AVAILABLE_PLATFORM_xros = @compileError("unable to translate macro: undefined identifier `visionos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:210:12
pub const __API_DEPRECATED_PLATFORM_xros = @compileError("unable to translate macro: undefined identifier `visionos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:211:12
pub const __API_UNAVAILABLE_PLATFORM_xros = @compileError("unable to translate macro: undefined identifier `visionos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:212:12
pub const __API_APPLY_TO = @compileError("unable to translate macro: undefined identifier `any`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:219:11
pub const __API_RANGE_STRINGIFY2 = @compileError("unable to translate C expr: unexpected token '#'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:221:11
pub const __API_A = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:235:13
pub const __API_AVAILABLE1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:238:13
pub const __API_AVAILABLE2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:239:13
pub const __API_AVAILABLE3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:240:13
pub const __API_AVAILABLE4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:241:13
pub const __API_AVAILABLE5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:242:13
pub const __API_AVAILABLE6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:243:13
pub const __API_AVAILABLE7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:244:13
pub const __API_AVAILABLE8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:245:13
pub const __API_AVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:246:13
pub const __API_A_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:248:13
pub const __API_AVAILABLE_BEGIN1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:251:13
pub const __API_AVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:252:13
pub const __API_AVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:253:13
pub const __API_AVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:254:13
pub const __API_AVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:255:13
pub const __API_AVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:256:13
pub const __API_AVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:257:13
pub const __API_AVAILABLE_BEGIN8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:258:13
pub const __API_AVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:259:13
pub const __API_D = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:263:13
pub const __API_DEPRECATED_MSG1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:266:13
pub const __API_DEPRECATED_MSG2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:267:13
pub const __API_DEPRECATED_MSG3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:268:13
pub const __API_DEPRECATED_MSG4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:269:13
pub const __API_DEPRECATED_MSG5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:270:13
pub const __API_DEPRECATED_MSG6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:271:13
pub const __API_DEPRECATED_MSG7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:272:13
pub const __API_DEPRECATED_MSG8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:273:13
pub const __API_DEPRECATED_MSG_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:274:13
pub const __API_D_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:276:13
pub const __API_DEPRECATED_BEGIN1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:279:13
pub const __API_DEPRECATED_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:280:13
pub const __API_DEPRECATED_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:281:13
pub const __API_DEPRECATED_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:282:13
pub const __API_DEPRECATED_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:283:13
pub const __API_DEPRECATED_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:284:13
pub const __API_DEPRECATED_BEGIN7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:285:13
pub const __API_DEPRECATED_BEGIN8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:286:13
pub const __API_DEPRECATED_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:287:13
pub const __API_R = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:290:17
pub const __API_DEPRECATED_REP1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:296:13
pub const __API_DEPRECATED_REP2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:297:13
pub const __API_DEPRECATED_REP3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:298:13
pub const __API_DEPRECATED_REP4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:299:13
pub const __API_DEPRECATED_REP5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:300:13
pub const __API_DEPRECATED_REP6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:301:13
pub const __API_DEPRECATED_REP7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:302:13
pub const __API_DEPRECATED_REP8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:303:13
pub const __API_DEPRECATED_REP_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:304:13
pub const __API_R_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:307:17
pub const __API_DEPRECATED_BEGIN_REP1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:313:13
pub const __API_DEPRECATED_BEGIN_REP2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:314:13
pub const __API_DEPRECATED_BEGIN_REP3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:315:13
pub const __API_DEPRECATED_BEGIN_REP4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:316:13
pub const __API_DEPRECATED_BEGIN_REP5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:317:13
pub const __API_DEPRECATED_BEGIN_REP6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:318:13
pub const __API_DEPRECATED_BEGIN_REP7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:319:13
pub const __API_DEPRECATED_BEGIN_REP8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:320:13
pub const __API_DEPRECATED_BEGIN_REP_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:321:13
pub const __API_U = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:332:13
pub const __API_UNAVAILABLE1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:335:13
pub const __API_UNAVAILABLE2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:336:13
pub const __API_UNAVAILABLE3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:337:13
pub const __API_UNAVAILABLE4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:338:13
pub const __API_UNAVAILABLE5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:339:13
pub const __API_UNAVAILABLE6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:340:13
pub const __API_UNAVAILABLE7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:341:13
pub const __API_UNAVAILABLE8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:342:13
pub const __API_UNAVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:343:13
pub const __API_U_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:345:13
pub const __API_UNAVAILABLE_BEGIN1 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:348:13
pub const __API_UNAVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:349:13
pub const __API_UNAVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:350:13
pub const __API_UNAVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:351:13
pub const __API_UNAVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:352:13
pub const __API_UNAVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:353:13
pub const __API_UNAVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:354:13
pub const __API_UNAVAILABLE_BEGIN8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:355:13
pub const __API_UNAVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:356:13
pub const __swift_compiler_version_at_least = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:378:13
pub const __SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:386:11
pub const __SPI_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:390:11
pub const __SPI_AVAILABLE_END = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/AvailabilityInternal.h:394:11
pub const __OSX_AVAILABLE_STARTING = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:213:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:214:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:216:17
pub const __OS_AVAILABILITY = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:239:13
pub const __OS_AVAILABILITY_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:240:13
pub const __OSX_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx_app_extension`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:257:13
pub const __IOS_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios_app_extension`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:258:13
pub const __OS_EXTENSION_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:268:9
pub const __OSX_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:275:13
pub const __OSX_AVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:276:13
pub const __OSX_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:277:13
pub const __IOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:301:13
pub const __IOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:303:15
pub const __IOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:305:13
pub const __IOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:306:13
pub const __TVOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:330:13
pub const __TVOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:332:15
pub const __TVOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:334:13
pub const __TVOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:335:13
pub const __WATCHOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:359:13
pub const __WATCHOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:361:15
pub const __WATCHOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:363:13
pub const __WATCHOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:364:13
pub const __SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `swift`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:387:13
pub const __SWIFT_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `swift`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:388:13
pub const __API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:431:13
pub const __API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:433:13
pub const __API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:434:13
pub const __API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:452:13
pub const __API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:453:13
pub const __API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:455:13
pub const __API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:456:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:458:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:459:13
pub const __API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:469:13
pub const __API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:471:13
pub const __API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:472:13
pub const __SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:545:11
pub const __SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/Availability.h:549:11
pub const API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:97:13
pub const API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:98:13
pub const API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:99:13
pub const API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:118:13
pub const API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:119:13
pub const API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:121:13
pub const API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:122:13
pub const API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:124:13
pub const API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:125:13
pub const API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:136:13
pub const API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:138:13
pub const API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:139:13
pub const SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:204:11
pub const SPI_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:208:11
pub const SPI_AVAILABLE_END = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:212:11
pub const SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:216:11
pub const SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/usr/include/os/availability.h:220:11
pub const OPENGL_AVAILABLE = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/System/Library/Frameworks/OpenGL.framework/Headers/OpenGLAvailability.h:11:10
pub const OPENGL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/System/Library/Frameworks/OpenGL.framework/Headers/OpenGLAvailability.h:12:10
pub const OPENGL_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `macos`"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk/System/Library/Frameworks/OpenGL.framework/Headers/OpenGLAvailability.h:13:10
pub const GLEW_GET_VAR = @compileError("unable to translate C expr: unexpected token 'const'"); // /opt/homebrew/Cellar/glew/2.2.0_1/include/GL/glew.h:26393:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "16.0.6 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Homebrew Clang 16.0.6";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 1);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __BLOCKS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __AARCH64EL__ = @as(c_int, 1);
pub const __aarch64__ = @as(c_int, 1);
pub const __AARCH64_CMODEL_SMALL__ = @as(c_int, 1);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_ARCH = @as(c_int, 8);
pub const __ARM_ARCH_PROFILE = 'A';
pub const __ARM_64BIT_STATE = @as(c_int, 1);
pub const __ARM_PCS_AAPCS64 = @as(c_int, 1);
pub const __ARM_ARCH_ISA_A64 = @as(c_int, 1);
pub const __ARM_FEATURE_CLZ = @as(c_int, 1);
pub const __ARM_FEATURE_FMA = @as(c_int, 1);
pub const __ARM_FEATURE_LDREX = @as(c_int, 0xF);
pub const __ARM_FEATURE_IDIV = @as(c_int, 1);
pub const __ARM_FEATURE_DIV = @as(c_int, 1);
pub const __ARM_FEATURE_NUMERIC_MAXMIN = @as(c_int, 1);
pub const __ARM_FEATURE_DIRECTED_ROUNDING = @as(c_int, 1);
pub const __ARM_ALIGN_MAX_STACK_PWR = @as(c_int, 4);
pub const __ARM_FP = @as(c_int, 0xE);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_NEON = @as(c_int, 1);
pub const __ARM_NEON_FP = @as(c_int, 0xE);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __FP_FAST_FMA = @as(c_int, 1);
pub const __FP_FAST_FMAF = @as(c_int, 1);
pub const __AARCH64_SIMD__ = @as(c_int, 1);
pub const __ARM64_ARCH_8__ = @as(c_int, 1);
pub const __ARM_NEON__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __arm64 = @as(c_int, 1);
pub const __arm64__ = @as(c_int, 1);
pub const __APPLE_CC__ = @as(c_int, 6000);
pub const __APPLE__ = @as(c_int, 1);
pub const __STDC_NO_THREADS__ = @as(c_int, 1);
pub const __strong = "";
pub const __unsafe_unretained = "";
pub const __DYNAMIC__ = @as(c_int, 1);
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140401, .decimal);
pub const __MACH__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __glew_h__ = "";
pub const __GLEW_H__ = "";
pub const __gl_h_ = "";
pub const __gl2_h_ = "";
pub const __GL_H__ = "";
pub const _GL_H = "";
pub const __gltypes_h_ = "";
pub const __REGAL_H__ = "";
pub const __X_GL_H = "";
pub const __glext_h_ = "";
pub const __GLEXT_H_ = "";
pub const __gl_glext_h_ = "";
pub const __gl_ATI_h_ = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H_ = "";
pub const __WORDSIZE = @as(c_int, 64);
pub const _INT8_T = "";
pub const _INT16_T = "";
pub const _INT32_T = "";
pub const _INT64_T = "";
pub const _UINT8_T = "";
pub const _UINT16_T = "";
pub const _UINT32_T = "";
pub const _UINT64_T = "";
pub const _SYS__TYPES_H_ = "";
pub const _CDEFS_H_ = "";
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __has_cpp_attribute(x: anytype) @TypeOf(@as(c_int, 0)) {
    _ = @TypeOf(x);
    return @as(c_int, 0);
}
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    return protos;
}
pub const __signed = c_int;
pub inline fn __deprecated_enum_msg(_msg: anytype) @TypeOf(__deprecated_msg(_msg)) {
    return __deprecated_msg(_msg);
}
pub const __kpi_unavailable = "";
pub const __kpi_deprecated_arm64_macos_unavailable = "";
pub const __dead = "";
pub const __pure = "";
pub const __abortlike = __dead2 ++ __cold ++ __not_tail_called;
pub const __has_safe_buffers = @as(c_int, 0);
pub const __unsafe_buffer_usage = "";
pub const __unsafe_buffer_usage_begin = "";
pub const __unsafe_buffer_usage_end = "";
pub const __DARWIN_ONLY_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const __DARWIN_ONLY_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_UNIX03 = @as(c_int, 1);
pub const __DARWIN_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_NON_CANCELABLE = @as(c_int, 0);
pub const __DARWIN_SUF_UNIX03 = "";
pub const __DARWIN_SUF_64_BIT_INO_T = "";
pub const __DARWIN_SUF_1050 = "";
pub const __DARWIN_SUF_NON_CANCELABLE = "";
pub const __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_9(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_16(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_7(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_13_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_14_4(x: anytype) @TypeOf(x) {
    return x;
}
pub const ___POSIX_C_DEPRECATED_STARTING_198808L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199009L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199209L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199309L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199506L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200112L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200809L = "";
pub const __DARWIN_C_ANSI = @as(c_long, 0o10000);
pub const __DARWIN_C_FULL = @as(c_long, 900000);
pub const __DARWIN_C_LEVEL = __DARWIN_C_FULL;
pub const __STDC_WANT_LIB_EXT1__ = @as(c_int, 1);
pub const __DARWIN_NO_LONG_LONG = @as(c_int, 0);
pub const _DARWIN_FEATURE_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_VERS_1050 = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE = @as(c_int, 3);
pub const __has_ptrcheck = @as(c_int, 0);
pub const __single = "";
pub const __unsafe_indexable = "";
pub const __null_terminated = "";
pub inline fn __unsafe_forge_bidi_indexable(T: anytype, P: anytype, S: anytype) @TypeOf(T(P)) {
    _ = @TypeOf(S);
    return T(P);
}
pub const __unsafe_forge_single = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn __unsafe_forge_terminated_by(T: anytype, P: anytype, E: anytype) @TypeOf(T(P)) {
    _ = @TypeOf(E);
    return T(P);
}
pub const __unsafe_forge_null_terminated = @import("std").zig.c_translation.Macros.CAST_OR_CALL;
pub inline fn __terminated_by_to_indexable(P: anytype) @TypeOf(P) {
    return P;
}
pub inline fn __unsafe_terminated_by_to_indexable(P: anytype) @TypeOf(P) {
    return P;
}
pub inline fn __null_terminated_to_indexable(P: anytype) @TypeOf(P) {
    return P;
}
pub inline fn __unsafe_null_terminated_to_indexable(P: anytype) @TypeOf(P) {
    return P;
}
pub const __array_decay_dicards_count_in_parameters = "";
pub const __unsafe_late_const = "";
pub const __ptrcheck_unavailable = "";
pub const __ASSUME_PTR_ABI_SINGLE_BEGIN = __ptrcheck_abi_assume_single();
pub const __ASSUME_PTR_ABI_SINGLE_END = __ptrcheck_abi_assume_unsafe_indexable();
pub const __header_indexable = "";
pub const __header_bidi_indexable = "";
pub const __kernel_ptr_semantics = "";
pub const __kernel_data_semantics = "";
pub const __kernel_dual_semantics = "";
pub const _BSD_MACHINE__TYPES_H_ = "";
pub const _BSD_ARM__TYPES_H_ = "";
pub const __DARWIN_NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _SYS__PTHREAD_TYPES_H_ = "";
pub const __PTHREAD_SIZE__ = @as(c_int, 8176);
pub const __PTHREAD_ATTR_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_MUTEXATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_MUTEX_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_CONDATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_COND_SIZE__ = @as(c_int, 40);
pub const __PTHREAD_ONCE_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_RWLOCK_SIZE__ = @as(c_int, 192);
pub const __PTHREAD_RWLOCKATTR_SIZE__ = @as(c_int, 16);
pub const _INTPTR_T = "";
pub const _BSD_MACHINE_TYPES_H_ = "";
pub const _ARM_MACHTYPES_H_ = "";
pub const _MACHTYPES_H_ = "";
pub const _U_INT8_T = "";
pub const _U_INT16_T = "";
pub const _U_INT32_T = "";
pub const _U_INT64_T = "";
pub const _UINTPTR_T = "";
pub const USER_ADDR_NULL = @import("std").zig.c_translation.cast(user_addr_t, @as(c_int, 0));
pub inline fn CAST_USER_ADDR_T(a_ptr: anytype) user_addr_t {
    return @import("std").zig.c_translation.cast(user_addr_t, @import("std").zig.c_translation.cast(usize, a_ptr));
}
pub const _INTMAX_T = "";
pub const _UINTMAX_T = "";
pub inline fn INT8_C(v: anytype) @TypeOf(v) {
    return v;
}
pub inline fn INT16_C(v: anytype) @TypeOf(v) {
    return v;
}
pub inline fn INT32_C(v: anytype) @TypeOf(v) {
    return v;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub inline fn UINT8_C(v: anytype) @TypeOf(v) {
    return v;
}
pub inline fn UINT16_C(v: anytype) @TypeOf(v) {
    return v;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const INT32_MIN = -INT32_MAX - @as(c_int, 1);
pub const INT64_MIN = -INT64_MAX - @as(c_int, 1);
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = @as(c_ulonglong, 18446744073709551615);
pub const INT_LEAST8_MIN = INT8_MIN;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const INT_FAST16_MIN = INT16_MIN;
pub const INT_FAST32_MIN = INT32_MIN;
pub const INT_FAST64_MIN = INT64_MIN;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INTPTR_MIN = -INTPTR_MAX - @as(c_int, 1);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MAX = INTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = UINTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTMAX_MIN = -INTMAX_MAX - @as(c_int, 1);
pub const PTRDIFF_MIN = INTMAX_MIN;
pub const PTRDIFF_MAX = INTMAX_MAX;
pub const SIZE_MAX = UINTPTR_MAX;
pub const RSIZE_MAX = SIZE_MAX >> @as(c_int, 1);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = -WCHAR_MAX - @as(c_int, 1);
pub const WINT_MIN = INT32_MIN;
pub const WINT_MAX = INT32_MAX;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const GLEW_APIENTRY_DEFINED = "";
pub const APIENTRY = "";
pub const GLAPIENTRY = "";
pub const GLEWAPIENTRY = "";
pub const GLEW_VAR_EXPORT = GLEWAPI;
pub const GLEW_FUN_EXPORT = GLEWAPI;
pub const GL_VERSION_1_1 = @as(c_int, 1);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_NONE = @as(c_int, 0);
pub const GL_TEXTURE_COMPONENTS = @as(c_int, 0x1003);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_CURRENT_BIT = @as(c_int, 0x00000001);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_ONE = @as(c_int, 1);
pub const GL_CLIENT_PIXEL_STORE_BIT = @as(c_int, 0x00000001);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_POINT_BIT = @as(c_int, 0x00000002);
pub const GL_CLIENT_VERTEX_ARRAY_BIT = @as(c_int, 0x00000002);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_LINE_BIT = @as(c_int, 0x00000004);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_QUADS = @as(c_int, 0x0007);
pub const GL_QUAD_STRIP = @as(c_int, 0x0008);
pub const GL_POLYGON_BIT = @as(c_int, 0x00000008);
pub const GL_POLYGON = @as(c_int, 0x0009);
pub const GL_POLYGON_STIPPLE_BIT = @as(c_int, 0x00000010);
pub const GL_PIXEL_MODE_BIT = @as(c_int, 0x00000020);
pub const GL_LIGHTING_BIT = @as(c_int, 0x00000040);
pub const GL_FOG_BIT = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_ACCUM = @as(c_int, 0x0100);
pub const GL_LOAD = @as(c_int, 0x0101);
pub const GL_RETURN = @as(c_int, 0x0102);
pub const GL_MULT = @as(c_int, 0x0103);
pub const GL_ADD = @as(c_int, 0x0104);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_ACCUM_BUFFER_BIT = @as(c_int, 0x00000200);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_FRONT_LEFT = @as(c_int, 0x0400);
pub const GL_FRONT_RIGHT = @as(c_int, 0x0401);
pub const GL_BACK_LEFT = @as(c_int, 0x0402);
pub const GL_BACK_RIGHT = @as(c_int, 0x0403);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_LEFT = @as(c_int, 0x0406);
pub const GL_RIGHT = @as(c_int, 0x0407);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_AUX0 = @as(c_int, 0x0409);
pub const GL_AUX1 = @as(c_int, 0x040A);
pub const GL_AUX2 = @as(c_int, 0x040B);
pub const GL_AUX3 = @as(c_int, 0x040C);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_STACK_OVERFLOW = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_2D = @as(c_int, 0x0600);
pub const GL_3D = @as(c_int, 0x0601);
pub const GL_3D_COLOR = @as(c_int, 0x0602);
pub const GL_3D_COLOR_TEXTURE = @as(c_int, 0x0603);
pub const GL_4D_COLOR_TEXTURE = @as(c_int, 0x0604);
pub const GL_PASS_THROUGH_TOKEN = @as(c_int, 0x0700);
pub const GL_POINT_TOKEN = @as(c_int, 0x0701);
pub const GL_LINE_TOKEN = @as(c_int, 0x0702);
pub const GL_POLYGON_TOKEN = @as(c_int, 0x0703);
pub const GL_BITMAP_TOKEN = @as(c_int, 0x0704);
pub const GL_DRAW_PIXEL_TOKEN = @as(c_int, 0x0705);
pub const GL_COPY_PIXEL_TOKEN = @as(c_int, 0x0706);
pub const GL_LINE_RESET_TOKEN = @as(c_int, 0x0707);
pub const GL_EXP = @as(c_int, 0x0800);
pub const GL_VIEWPORT_BIT = @as(c_int, 0x00000800);
pub const GL_EXP2 = @as(c_int, 0x0801);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_COEFF = @as(c_int, 0x0A00);
pub const GL_ORDER = @as(c_int, 0x0A01);
pub const GL_DOMAIN = @as(c_int, 0x0A02);
pub const GL_CURRENT_COLOR = @as(c_int, 0x0B00);
pub const GL_CURRENT_INDEX = @as(c_int, 0x0B01);
pub const GL_CURRENT_NORMAL = @as(c_int, 0x0B02);
pub const GL_CURRENT_TEXTURE_COORDS = @as(c_int, 0x0B03);
pub const GL_CURRENT_RASTER_COLOR = @as(c_int, 0x0B04);
pub const GL_CURRENT_RASTER_INDEX = @as(c_int, 0x0B05);
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = @as(c_int, 0x0B06);
pub const GL_CURRENT_RASTER_POSITION = @as(c_int, 0x0B07);
pub const GL_CURRENT_RASTER_POSITION_VALID = @as(c_int, 0x0B08);
pub const GL_CURRENT_RASTER_DISTANCE = @as(c_int, 0x0B09);
pub const GL_POINT_SMOOTH = @as(c_int, 0x0B10);
pub const GL_POINT_SIZE = @as(c_int, 0x0B11);
pub const GL_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_LINE_SMOOTH = @as(c_int, 0x0B20);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_LINE_STIPPLE = @as(c_int, 0x0B24);
pub const GL_LINE_STIPPLE_PATTERN = @as(c_int, 0x0B25);
pub const GL_LINE_STIPPLE_REPEAT = @as(c_int, 0x0B26);
pub const GL_LIST_MODE = @as(c_int, 0x0B30);
pub const GL_MAX_LIST_NESTING = @as(c_int, 0x0B31);
pub const GL_LIST_BASE = @as(c_int, 0x0B32);
pub const GL_LIST_INDEX = @as(c_int, 0x0B33);
pub const GL_POLYGON_MODE = @as(c_int, 0x0B40);
pub const GL_POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const GL_POLYGON_STIPPLE = @as(c_int, 0x0B42);
pub const GL_EDGE_FLAG = @as(c_int, 0x0B43);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_LIGHTING = @as(c_int, 0x0B50);
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = @as(c_int, 0x0B51);
pub const GL_LIGHT_MODEL_TWO_SIDE = @as(c_int, 0x0B52);
pub const GL_LIGHT_MODEL_AMBIENT = @as(c_int, 0x0B53);
pub const GL_SHADE_MODEL = @as(c_int, 0x0B54);
pub const GL_COLOR_MATERIAL_FACE = @as(c_int, 0x0B55);
pub const GL_COLOR_MATERIAL_PARAMETER = @as(c_int, 0x0B56);
pub const GL_COLOR_MATERIAL = @as(c_int, 0x0B57);
pub const GL_FOG = @as(c_int, 0x0B60);
pub const GL_FOG_INDEX = @as(c_int, 0x0B61);
pub const GL_FOG_DENSITY = @as(c_int, 0x0B62);
pub const GL_FOG_START = @as(c_int, 0x0B63);
pub const GL_FOG_END = @as(c_int, 0x0B64);
pub const GL_FOG_MODE = @as(c_int, 0x0B65);
pub const GL_FOG_COLOR = @as(c_int, 0x0B66);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_ACCUM_CLEAR_VALUE = @as(c_int, 0x0B80);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_MATRIX_MODE = @as(c_int, 0x0BA0);
pub const GL_NORMALIZE = @as(c_int, 0x0BA1);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0BA3);
pub const GL_PROJECTION_STACK_DEPTH = @as(c_int, 0x0BA4);
pub const GL_TEXTURE_STACK_DEPTH = @as(c_int, 0x0BA5);
pub const GL_MODELVIEW_MATRIX = @as(c_int, 0x0BA6);
pub const GL_PROJECTION_MATRIX = @as(c_int, 0x0BA7);
pub const GL_TEXTURE_MATRIX = @as(c_int, 0x0BA8);
pub const GL_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB0);
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB1);
pub const GL_ALPHA_TEST = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF = @as(c_int, 0x0BC2);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_BLEND_DST = @as(c_int, 0x0BE0);
pub const GL_BLEND_SRC = @as(c_int, 0x0BE1);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const GL_INDEX_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const GL_AUX_BUFFERS = @as(c_int, 0x0C00);
pub const GL_DRAW_BUFFER = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER = @as(c_int, 0x0C02);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_INDEX_CLEAR_VALUE = @as(c_int, 0x0C20);
pub const GL_INDEX_WRITEMASK = @as(c_int, 0x0C21);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_INDEX_MODE = @as(c_int, 0x0C30);
pub const GL_RGBA_MODE = @as(c_int, 0x0C31);
pub const GL_DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const GL_STEREO = @as(c_int, 0x0C33);
pub const GL_RENDER_MODE = @as(c_int, 0x0C40);
pub const GL_PERSPECTIVE_CORRECTION_HINT = @as(c_int, 0x0C50);
pub const GL_POINT_SMOOTH_HINT = @as(c_int, 0x0C51);
pub const GL_LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const GL_POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const GL_FOG_HINT = @as(c_int, 0x0C54);
pub const GL_TEXTURE_GEN_S = @as(c_int, 0x0C60);
pub const GL_TEXTURE_GEN_T = @as(c_int, 0x0C61);
pub const GL_TEXTURE_GEN_R = @as(c_int, 0x0C62);
pub const GL_TEXTURE_GEN_Q = @as(c_int, 0x0C63);
pub const GL_PIXEL_MAP_I_TO_I = @as(c_int, 0x0C70);
pub const GL_PIXEL_MAP_S_TO_S = @as(c_int, 0x0C71);
pub const GL_PIXEL_MAP_I_TO_R = @as(c_int, 0x0C72);
pub const GL_PIXEL_MAP_I_TO_G = @as(c_int, 0x0C73);
pub const GL_PIXEL_MAP_I_TO_B = @as(c_int, 0x0C74);
pub const GL_PIXEL_MAP_I_TO_A = @as(c_int, 0x0C75);
pub const GL_PIXEL_MAP_R_TO_R = @as(c_int, 0x0C76);
pub const GL_PIXEL_MAP_G_TO_G = @as(c_int, 0x0C77);
pub const GL_PIXEL_MAP_B_TO_B = @as(c_int, 0x0C78);
pub const GL_PIXEL_MAP_A_TO_A = @as(c_int, 0x0C79);
pub const GL_PIXEL_MAP_I_TO_I_SIZE = @as(c_int, 0x0CB0);
pub const GL_PIXEL_MAP_S_TO_S_SIZE = @as(c_int, 0x0CB1);
pub const GL_PIXEL_MAP_I_TO_R_SIZE = @as(c_int, 0x0CB2);
pub const GL_PIXEL_MAP_I_TO_G_SIZE = @as(c_int, 0x0CB3);
pub const GL_PIXEL_MAP_I_TO_B_SIZE = @as(c_int, 0x0CB4);
pub const GL_PIXEL_MAP_I_TO_A_SIZE = @as(c_int, 0x0CB5);
pub const GL_PIXEL_MAP_R_TO_R_SIZE = @as(c_int, 0x0CB6);
pub const GL_PIXEL_MAP_G_TO_G_SIZE = @as(c_int, 0x0CB7);
pub const GL_PIXEL_MAP_B_TO_B_SIZE = @as(c_int, 0x0CB8);
pub const GL_PIXEL_MAP_A_TO_A_SIZE = @as(c_int, 0x0CB9);
pub const GL_UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const GL_UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const GL_UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const GL_PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const GL_PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_MAP_COLOR = @as(c_int, 0x0D10);
pub const GL_MAP_STENCIL = @as(c_int, 0x0D11);
pub const GL_INDEX_SHIFT = @as(c_int, 0x0D12);
pub const GL_INDEX_OFFSET = @as(c_int, 0x0D13);
pub const GL_RED_SCALE = @as(c_int, 0x0D14);
pub const GL_RED_BIAS = @as(c_int, 0x0D15);
pub const GL_ZOOM_X = @as(c_int, 0x0D16);
pub const GL_ZOOM_Y = @as(c_int, 0x0D17);
pub const GL_GREEN_SCALE = @as(c_int, 0x0D18);
pub const GL_GREEN_BIAS = @as(c_int, 0x0D19);
pub const GL_BLUE_SCALE = @as(c_int, 0x0D1A);
pub const GL_BLUE_BIAS = @as(c_int, 0x0D1B);
pub const GL_ALPHA_SCALE = @as(c_int, 0x0D1C);
pub const GL_ALPHA_BIAS = @as(c_int, 0x0D1D);
pub const GL_DEPTH_SCALE = @as(c_int, 0x0D1E);
pub const GL_DEPTH_BIAS = @as(c_int, 0x0D1F);
pub const GL_MAX_EVAL_ORDER = @as(c_int, 0x0D30);
pub const GL_MAX_LIGHTS = @as(c_int, 0x0D31);
pub const GL_MAX_CLIP_PLANES = @as(c_int, 0x0D32);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_PIXEL_MAP_TABLE = @as(c_int, 0x0D34);
pub const GL_MAX_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D35);
pub const GL_MAX_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0D36);
pub const GL_MAX_NAME_STACK_DEPTH = @as(c_int, 0x0D37);
pub const GL_MAX_PROJECTION_STACK_DEPTH = @as(c_int, 0x0D38);
pub const GL_MAX_TEXTURE_STACK_DEPTH = @as(c_int, 0x0D39);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D3B);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_INDEX_BITS = @as(c_int, 0x0D51);
pub const GL_RED_BITS = @as(c_int, 0x0D52);
pub const GL_GREEN_BITS = @as(c_int, 0x0D53);
pub const GL_BLUE_BITS = @as(c_int, 0x0D54);
pub const GL_ALPHA_BITS = @as(c_int, 0x0D55);
pub const GL_DEPTH_BITS = @as(c_int, 0x0D56);
pub const GL_STENCIL_BITS = @as(c_int, 0x0D57);
pub const GL_ACCUM_RED_BITS = @as(c_int, 0x0D58);
pub const GL_ACCUM_GREEN_BITS = @as(c_int, 0x0D59);
pub const GL_ACCUM_BLUE_BITS = @as(c_int, 0x0D5A);
pub const GL_ACCUM_ALPHA_BITS = @as(c_int, 0x0D5B);
pub const GL_NAME_STACK_DEPTH = @as(c_int, 0x0D70);
pub const GL_AUTO_NORMAL = @as(c_int, 0x0D80);
pub const GL_MAP1_COLOR_4 = @as(c_int, 0x0D90);
pub const GL_MAP1_INDEX = @as(c_int, 0x0D91);
pub const GL_MAP1_NORMAL = @as(c_int, 0x0D92);
pub const GL_MAP1_TEXTURE_COORD_1 = @as(c_int, 0x0D93);
pub const GL_MAP1_TEXTURE_COORD_2 = @as(c_int, 0x0D94);
pub const GL_MAP1_TEXTURE_COORD_3 = @as(c_int, 0x0D95);
pub const GL_MAP1_TEXTURE_COORD_4 = @as(c_int, 0x0D96);
pub const GL_MAP1_VERTEX_3 = @as(c_int, 0x0D97);
pub const GL_MAP1_VERTEX_4 = @as(c_int, 0x0D98);
pub const GL_MAP2_COLOR_4 = @as(c_int, 0x0DB0);
pub const GL_MAP2_INDEX = @as(c_int, 0x0DB1);
pub const GL_MAP2_NORMAL = @as(c_int, 0x0DB2);
pub const GL_MAP2_TEXTURE_COORD_1 = @as(c_int, 0x0DB3);
pub const GL_MAP2_TEXTURE_COORD_2 = @as(c_int, 0x0DB4);
pub const GL_MAP2_TEXTURE_COORD_3 = @as(c_int, 0x0DB5);
pub const GL_MAP2_TEXTURE_COORD_4 = @as(c_int, 0x0DB6);
pub const GL_MAP2_VERTEX_3 = @as(c_int, 0x0DB7);
pub const GL_MAP2_VERTEX_4 = @as(c_int, 0x0DB8);
pub const GL_MAP1_GRID_DOMAIN = @as(c_int, 0x0DD0);
pub const GL_MAP1_GRID_SEGMENTS = @as(c_int, 0x0DD1);
pub const GL_MAP2_GRID_DOMAIN = @as(c_int, 0x0DD2);
pub const GL_MAP2_GRID_SEGMENTS = @as(c_int, 0x0DD3);
pub const GL_TEXTURE_1D = @as(c_int, 0x0DE0);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_FEEDBACK_BUFFER_POINTER = @as(c_int, 0x0DF0);
pub const GL_FEEDBACK_BUFFER_SIZE = @as(c_int, 0x0DF1);
pub const GL_FEEDBACK_BUFFER_TYPE = @as(c_int, 0x0DF2);
pub const GL_SELECTION_BUFFER_POINTER = @as(c_int, 0x0DF3);
pub const GL_SELECTION_BUFFER_SIZE = @as(c_int, 0x0DF4);
pub const GL_TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const GL_TRANSFORM_BIT = @as(c_int, 0x00001000);
pub const GL_TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const GL_TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER = @as(c_int, 0x1005);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_AMBIENT = @as(c_int, 0x1200);
pub const GL_DIFFUSE = @as(c_int, 0x1201);
pub const GL_SPECULAR = @as(c_int, 0x1202);
pub const GL_POSITION = @as(c_int, 0x1203);
pub const GL_SPOT_DIRECTION = @as(c_int, 0x1204);
pub const GL_SPOT_EXPONENT = @as(c_int, 0x1205);
pub const GL_SPOT_CUTOFF = @as(c_int, 0x1206);
pub const GL_CONSTANT_ATTENUATION = @as(c_int, 0x1207);
pub const GL_LINEAR_ATTENUATION = @as(c_int, 0x1208);
pub const GL_QUADRATIC_ATTENUATION = @as(c_int, 0x1209);
pub const GL_COMPILE = @as(c_int, 0x1300);
pub const GL_COMPILE_AND_EXECUTE = @as(c_int, 0x1301);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_2_BYTES = @as(c_int, 0x1407);
pub const GL_3_BYTES = @as(c_int, 0x1408);
pub const GL_4_BYTES = @as(c_int, 0x1409);
pub const GL_DOUBLE = @as(c_int, 0x140A);
pub const GL_CLEAR = @as(c_int, 0x1500);
pub const GL_AND = @as(c_int, 0x1501);
pub const GL_AND_REVERSE = @as(c_int, 0x1502);
pub const GL_COPY = @as(c_int, 0x1503);
pub const GL_AND_INVERTED = @as(c_int, 0x1504);
pub const GL_NOOP = @as(c_int, 0x1505);
pub const GL_XOR = @as(c_int, 0x1506);
pub const GL_OR = @as(c_int, 0x1507);
pub const GL_NOR = @as(c_int, 0x1508);
pub const GL_EQUIV = @as(c_int, 0x1509);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_OR_REVERSE = @as(c_int, 0x150B);
pub const GL_COPY_INVERTED = @as(c_int, 0x150C);
pub const GL_OR_INVERTED = @as(c_int, 0x150D);
pub const GL_NAND = @as(c_int, 0x150E);
pub const GL_SET = @as(c_int, 0x150F);
pub const GL_EMISSION = @as(c_int, 0x1600);
pub const GL_SHININESS = @as(c_int, 0x1601);
pub const GL_AMBIENT_AND_DIFFUSE = @as(c_int, 0x1602);
pub const GL_COLOR_INDEXES = @as(c_int, 0x1603);
pub const GL_MODELVIEW = @as(c_int, 0x1700);
pub const GL_PROJECTION = @as(c_int, 0x1701);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_COLOR = @as(c_int, 0x1800);
pub const GL_DEPTH = @as(c_int, 0x1801);
pub const GL_STENCIL = @as(c_int, 0x1802);
pub const GL_COLOR_INDEX = @as(c_int, 0x1900);
pub const GL_STENCIL_INDEX = @as(c_int, 0x1901);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_RED = @as(c_int, 0x1903);
pub const GL_GREEN = @as(c_int, 0x1904);
pub const GL_BLUE = @as(c_int, 0x1905);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_LUMINANCE = @as(c_int, 0x1909);
pub const GL_LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const GL_BITMAP = @as(c_int, 0x1A00);
pub const GL_POINT = @as(c_int, 0x1B00);
pub const GL_LINE = @as(c_int, 0x1B01);
pub const GL_FILL = @as(c_int, 0x1B02);
pub const GL_RENDER = @as(c_int, 0x1C00);
pub const GL_FEEDBACK = @as(c_int, 0x1C01);
pub const GL_SELECT = @as(c_int, 0x1C02);
pub const GL_FLAT = @as(c_int, 0x1D00);
pub const GL_SMOOTH = @as(c_int, 0x1D01);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_S = @as(c_int, 0x2000);
pub const GL_ENABLE_BIT = @as(c_int, 0x00002000);
pub const GL_T = @as(c_int, 0x2001);
pub const GL_R = @as(c_int, 0x2002);
pub const GL_Q = @as(c_int, 0x2003);
pub const GL_MODULATE = @as(c_int, 0x2100);
pub const GL_DECAL = @as(c_int, 0x2101);
pub const GL_TEXTURE_ENV_MODE = @as(c_int, 0x2200);
pub const GL_TEXTURE_ENV_COLOR = @as(c_int, 0x2201);
pub const GL_TEXTURE_ENV = @as(c_int, 0x2300);
pub const GL_EYE_LINEAR = @as(c_int, 0x2400);
pub const GL_OBJECT_LINEAR = @as(c_int, 0x2401);
pub const GL_SPHERE_MAP = @as(c_int, 0x2402);
pub const GL_TEXTURE_GEN_MODE = @as(c_int, 0x2500);
pub const GL_OBJECT_PLANE = @as(c_int, 0x2501);
pub const GL_EYE_PLANE = @as(c_int, 0x2502);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_CLAMP = @as(c_int, 0x2900);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const GL_R3_G3_B2 = @as(c_int, 0x2A10);
pub const GL_V2F = @as(c_int, 0x2A20);
pub const GL_V3F = @as(c_int, 0x2A21);
pub const GL_C4UB_V2F = @as(c_int, 0x2A22);
pub const GL_C4UB_V3F = @as(c_int, 0x2A23);
pub const GL_C3F_V3F = @as(c_int, 0x2A24);
pub const GL_N3F_V3F = @as(c_int, 0x2A25);
pub const GL_C4F_N3F_V3F = @as(c_int, 0x2A26);
pub const GL_T2F_V3F = @as(c_int, 0x2A27);
pub const GL_T4F_V4F = @as(c_int, 0x2A28);
pub const GL_T2F_C4UB_V3F = @as(c_int, 0x2A29);
pub const GL_T2F_C3F_V3F = @as(c_int, 0x2A2A);
pub const GL_T2F_N3F_V3F = @as(c_int, 0x2A2B);
pub const GL_T2F_C4F_N3F_V3F = @as(c_int, 0x2A2C);
pub const GL_T4F_C4F_N3F_V4F = @as(c_int, 0x2A2D);
pub const GL_CLIP_PLANE0 = @as(c_int, 0x3000);
pub const GL_CLIP_PLANE1 = @as(c_int, 0x3001);
pub const GL_CLIP_PLANE2 = @as(c_int, 0x3002);
pub const GL_CLIP_PLANE3 = @as(c_int, 0x3003);
pub const GL_CLIP_PLANE4 = @as(c_int, 0x3004);
pub const GL_CLIP_PLANE5 = @as(c_int, 0x3005);
pub const GL_LIGHT0 = @as(c_int, 0x4000);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_LIGHT1 = @as(c_int, 0x4001);
pub const GL_LIGHT2 = @as(c_int, 0x4002);
pub const GL_LIGHT3 = @as(c_int, 0x4003);
pub const GL_LIGHT4 = @as(c_int, 0x4004);
pub const GL_LIGHT5 = @as(c_int, 0x4005);
pub const GL_LIGHT6 = @as(c_int, 0x4006);
pub const GL_LIGHT7 = @as(c_int, 0x4007);
pub const GL_HINT_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const GL_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const GL_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const GL_LUMINANCE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const GL_LUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const GL_LUMINANCE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE6_ALPHA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const GL_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const GL_INTENSITY4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const GL_INTENSITY8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const GL_INTENSITY12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const GL_INTENSITY16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const GL_RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GL_TEXTURE_PRIORITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const GL_TEXTURE_RESIDENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_NORMAL_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const GL_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const GL_INDEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const GL_VERTEX_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const GL_VERTEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const GL_VERTEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const GL_NORMAL_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const GL_NORMAL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const GL_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const GL_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const GL_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const GL_INDEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const GL_INDEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const GL_VERTEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const GL_NORMAL_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const GL_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const GL_INDEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const GL_COLOR_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E2, .hexadecimal);
pub const GL_COLOR_INDEX2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E3, .hexadecimal);
pub const GL_COLOR_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E4, .hexadecimal);
pub const GL_COLOR_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E5, .hexadecimal);
pub const GL_COLOR_INDEX12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E6, .hexadecimal);
pub const GL_COLOR_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E7, .hexadecimal);
pub const GL_EVAL_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_LIST_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_TEXTURE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_SCISSOR_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000fffff, .hexadecimal);
pub const GL_CLIENT_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal);
pub const GLEW_VERSION_1_1 = GLEW_GET_VAR(__GLEW_VERSION_1_1);
pub const __AVAILABILITY__ = "";
pub const __API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_IOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_MACCATALYST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_WATCHOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_TVOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_DRIVERKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __API_TO_BE_DEPRECATED_VISIONOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __AVAILABILITY_VERSIONS__ = "";
pub const __MAC_10_0 = @as(c_int, 1000);
pub const __MAC_10_1 = @as(c_int, 1010);
pub const __MAC_10_2 = @as(c_int, 1020);
pub const __MAC_10_3 = @as(c_int, 1030);
pub const __MAC_10_4 = @as(c_int, 1040);
pub const __MAC_10_5 = @as(c_int, 1050);
pub const __MAC_10_6 = @as(c_int, 1060);
pub const __MAC_10_7 = @as(c_int, 1070);
pub const __MAC_10_8 = @as(c_int, 1080);
pub const __MAC_10_9 = @as(c_int, 1090);
pub const __MAC_10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101000, .decimal);
pub const __MAC_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101002, .decimal);
pub const __MAC_10_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101003, .decimal);
pub const __MAC_10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101100, .decimal);
pub const __MAC_10_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101102, .decimal);
pub const __MAC_10_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101103, .decimal);
pub const __MAC_10_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101104, .decimal);
pub const __MAC_10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101200, .decimal);
pub const __MAC_10_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101201, .decimal);
pub const __MAC_10_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101202, .decimal);
pub const __MAC_10_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101204, .decimal);
pub const __MAC_10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101300, .decimal);
pub const __MAC_10_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101301, .decimal);
pub const __MAC_10_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101302, .decimal);
pub const __MAC_10_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101304, .decimal);
pub const __MAC_10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101400, .decimal);
pub const __MAC_10_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101401, .decimal);
pub const __MAC_10_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101404, .decimal);
pub const __MAC_10_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101405, .decimal);
pub const __MAC_10_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101406, .decimal);
pub const __MAC_10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101500, .decimal);
pub const __MAC_10_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101501, .decimal);
pub const __MAC_10_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101504, .decimal);
pub const __MAC_10_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101600, .decimal);
pub const __MAC_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __MAC_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __MAC_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __MAC_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __MAC_11_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110500, .decimal);
pub const __MAC_11_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110600, .decimal);
pub const __MAC_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __MAC_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __MAC_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __MAC_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __MAC_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __MAC_12_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120500, .decimal);
pub const __MAC_12_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120600, .decimal);
pub const __MAC_12_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120700, .decimal);
pub const __MAC_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __MAC_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __MAC_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __MAC_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __MAC_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __MAC_13_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130500, .decimal);
pub const __MAC_13_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130600, .decimal);
pub const __MAC_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __MAC_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __MAC_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __MAC_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __MAC_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140400, .decimal);
pub const __IPHONE_2_0 = @as(c_int, 20000);
pub const __IPHONE_2_1 = @as(c_int, 20100);
pub const __IPHONE_2_2 = @as(c_int, 20200);
pub const __IPHONE_3_0 = @as(c_int, 30000);
pub const __IPHONE_3_1 = @as(c_int, 30100);
pub const __IPHONE_3_2 = @as(c_int, 30200);
pub const __IPHONE_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __IPHONE_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __IPHONE_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __IPHONE_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __IPHONE_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __IPHONE_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __IPHONE_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __IPHONE_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __IPHONE_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __IPHONE_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __IPHONE_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __IPHONE_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __IPHONE_8_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80200, .decimal);
pub const __IPHONE_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __IPHONE_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __IPHONE_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __IPHONE_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __IPHONE_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __IPHONE_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __IPHONE_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __IPHONE_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __IPHONE_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __IPHONE_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100300, .decimal);
pub const __IPHONE_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __IPHONE_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __IPHONE_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __IPHONE_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __IPHONE_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __IPHONE_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __IPHONE_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __IPHONE_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __IPHONE_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __IPHONE_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __IPHONE_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __IPHONE_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __IPHONE_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __IPHONE_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __IPHONE_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __IPHONE_13_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130500, .decimal);
pub const __IPHONE_13_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130600, .decimal);
pub const __IPHONE_13_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130700, .decimal);
pub const __IPHONE_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __IPHONE_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __IPHONE_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __IPHONE_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __IPHONE_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __IPHONE_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140400, .decimal);
pub const __IPHONE_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __IPHONE_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __IPHONE_14_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140800, .decimal);
pub const __IPHONE_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __IPHONE_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __IPHONE_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __IPHONE_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __IPHONE_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __IPHONE_15_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150500, .decimal);
pub const __IPHONE_15_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150600, .decimal);
pub const __IPHONE_15_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150700, .decimal);
pub const __IPHONE_15_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150800, .decimal);
pub const __IPHONE_16_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160000, .decimal);
pub const __IPHONE_16_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160100, .decimal);
pub const __IPHONE_16_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160200, .decimal);
pub const __IPHONE_16_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160300, .decimal);
pub const __IPHONE_16_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160400, .decimal);
pub const __IPHONE_16_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160500, .decimal);
pub const __IPHONE_16_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160600, .decimal);
pub const __IPHONE_16_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160700, .decimal);
pub const __IPHONE_17_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170000, .decimal);
pub const __IPHONE_17_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170100, .decimal);
pub const __IPHONE_17_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170200, .decimal);
pub const __IPHONE_17_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170300, .decimal);
pub const __IPHONE_17_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170400, .decimal);
pub const __WATCHOS_1_0 = @as(c_int, 10000);
pub const __WATCHOS_2_0 = @as(c_int, 20000);
pub const __WATCHOS_2_1 = @as(c_int, 20100);
pub const __WATCHOS_2_2 = @as(c_int, 20200);
pub const __WATCHOS_3_0 = @as(c_int, 30000);
pub const __WATCHOS_3_1 = @as(c_int, 30100);
pub const __WATCHOS_3_1_1 = @as(c_int, 30101);
pub const __WATCHOS_3_2 = @as(c_int, 30200);
pub const __WATCHOS_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __WATCHOS_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __WATCHOS_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __WATCHOS_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __WATCHOS_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __WATCHOS_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __WATCHOS_5_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50200, .decimal);
pub const __WATCHOS_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50300, .decimal);
pub const __WATCHOS_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __WATCHOS_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __WATCHOS_6_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60200, .decimal);
pub const __WATCHOS_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __WATCHOS_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __WATCHOS_7_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70200, .decimal);
pub const __WATCHOS_7_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70300, .decimal);
pub const __WATCHOS_7_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70400, .decimal);
pub const __WATCHOS_7_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70500, .decimal);
pub const __WATCHOS_7_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70600, .decimal);
pub const __WATCHOS_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __WATCHOS_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __WATCHOS_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __WATCHOS_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __WATCHOS_8_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80500, .decimal);
pub const __WATCHOS_8_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80600, .decimal);
pub const __WATCHOS_8_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80700, .decimal);
pub const __WATCHOS_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80800, .decimal);
pub const __WATCHOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __WATCHOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __WATCHOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __WATCHOS_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __WATCHOS_9_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90400, .decimal);
pub const __WATCHOS_9_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90500, .decimal);
pub const __WATCHOS_9_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90600, .decimal);
pub const __WATCHOS_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __WATCHOS_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __WATCHOS_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __WATCHOS_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100300, .decimal);
pub const __WATCHOS_10_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100400, .decimal);
pub const __TVOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __TVOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __TVOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __TVOS_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __TVOS_10_0_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100001, .decimal);
pub const __TVOS_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __TVOS_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __TVOS_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __TVOS_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __TVOS_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __TVOS_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __TVOS_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __TVOS_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __TVOS_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __TVOS_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __TVOS_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __TVOS_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __TVOS_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __TVOS_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __TVOS_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __TVOS_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __TVOS_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __TVOS_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __TVOS_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __TVOS_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __TVOS_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __TVOS_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __TVOS_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __TVOS_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __TVOS_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150100, .decimal);
pub const __TVOS_15_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150200, .decimal);
pub const __TVOS_15_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150300, .decimal);
pub const __TVOS_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150400, .decimal);
pub const __TVOS_15_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150500, .decimal);
pub const __TVOS_15_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150600, .decimal);
pub const __TVOS_16_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160000, .decimal);
pub const __TVOS_16_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160100, .decimal);
pub const __TVOS_16_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160200, .decimal);
pub const __TVOS_16_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160300, .decimal);
pub const __TVOS_16_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160400, .decimal);
pub const __TVOS_16_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160500, .decimal);
pub const __TVOS_16_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 160600, .decimal);
pub const __TVOS_17_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170000, .decimal);
pub const __TVOS_17_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170100, .decimal);
pub const __TVOS_17_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170200, .decimal);
pub const __TVOS_17_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170300, .decimal);
pub const __TVOS_17_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 170400, .decimal);
pub const __BRIDGEOS_2_0 = @as(c_int, 20000);
pub const __BRIDGEOS_3_0 = @as(c_int, 30000);
pub const __BRIDGEOS_3_1 = @as(c_int, 30100);
pub const __BRIDGEOS_3_4 = @as(c_int, 30400);
pub const __BRIDGEOS_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __BRIDGEOS_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __BRIDGEOS_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __BRIDGEOS_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __BRIDGEOS_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50300, .decimal);
pub const __BRIDGEOS_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __BRIDGEOS_6_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60200, .decimal);
pub const __BRIDGEOS_6_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60400, .decimal);
pub const __BRIDGEOS_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60500, .decimal);
pub const __BRIDGEOS_6_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60600, .decimal);
pub const __BRIDGEOS_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __BRIDGEOS_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __BRIDGEOS_7_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70200, .decimal);
pub const __BRIDGEOS_7_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70300, .decimal);
pub const __BRIDGEOS_7_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70400, .decimal);
pub const __BRIDGEOS_7_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70600, .decimal);
pub const __BRIDGEOS_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __BRIDGEOS_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __BRIDGEOS_8_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80200, .decimal);
pub const __BRIDGEOS_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __BRIDGEOS_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __DRIVERKIT_19_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 190000, .decimal);
pub const __DRIVERKIT_20_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 200000, .decimal);
pub const __DRIVERKIT_21_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 210000, .decimal);
pub const __DRIVERKIT_22_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220000, .decimal);
pub const __DRIVERKIT_22_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220400, .decimal);
pub const __DRIVERKIT_22_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220500, .decimal);
pub const __DRIVERKIT_22_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 220600, .decimal);
pub const __DRIVERKIT_23_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230000, .decimal);
pub const __DRIVERKIT_23_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230100, .decimal);
pub const __DRIVERKIT_23_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230200, .decimal);
pub const __DRIVERKIT_23_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230300, .decimal);
pub const __DRIVERKIT_23_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 230400, .decimal);
pub const __VISIONOS_1_0 = @as(c_int, 10000);
pub const __VISIONOS_1_1 = @as(c_int, 10100);
pub const MAC_OS_X_VERSION_10_0 = __MAC_10_0;
pub const MAC_OS_X_VERSION_10_1 = __MAC_10_1;
pub const MAC_OS_X_VERSION_10_2 = __MAC_10_2;
pub const MAC_OS_X_VERSION_10_3 = __MAC_10_3;
pub const MAC_OS_X_VERSION_10_4 = __MAC_10_4;
pub const MAC_OS_X_VERSION_10_5 = __MAC_10_5;
pub const MAC_OS_X_VERSION_10_6 = __MAC_10_6;
pub const MAC_OS_X_VERSION_10_7 = __MAC_10_7;
pub const MAC_OS_X_VERSION_10_8 = __MAC_10_8;
pub const MAC_OS_X_VERSION_10_9 = __MAC_10_9;
pub const MAC_OS_X_VERSION_10_10 = __MAC_10_10;
pub const MAC_OS_X_VERSION_10_10_2 = __MAC_10_10_2;
pub const MAC_OS_X_VERSION_10_10_3 = __MAC_10_10_3;
pub const MAC_OS_X_VERSION_10_11 = __MAC_10_11;
pub const MAC_OS_X_VERSION_10_11_2 = __MAC_10_11_2;
pub const MAC_OS_X_VERSION_10_11_3 = __MAC_10_11_3;
pub const MAC_OS_X_VERSION_10_11_4 = __MAC_10_11_4;
pub const MAC_OS_X_VERSION_10_12 = __MAC_10_12;
pub const MAC_OS_X_VERSION_10_12_1 = __MAC_10_12_1;
pub const MAC_OS_X_VERSION_10_12_2 = __MAC_10_12_2;
pub const MAC_OS_X_VERSION_10_12_4 = __MAC_10_12_4;
pub const MAC_OS_X_VERSION_10_13 = __MAC_10_13;
pub const MAC_OS_X_VERSION_10_13_1 = __MAC_10_13_1;
pub const MAC_OS_X_VERSION_10_13_2 = __MAC_10_13_2;
pub const MAC_OS_X_VERSION_10_13_4 = __MAC_10_13_4;
pub const MAC_OS_X_VERSION_10_14 = __MAC_10_14;
pub const MAC_OS_X_VERSION_10_14_1 = __MAC_10_14_1;
pub const MAC_OS_X_VERSION_10_14_4 = __MAC_10_14_4;
pub const MAC_OS_X_VERSION_10_14_5 = __MAC_10_14_5;
pub const MAC_OS_X_VERSION_10_14_6 = __MAC_10_14_6;
pub const MAC_OS_X_VERSION_10_15 = __MAC_10_15;
pub const MAC_OS_X_VERSION_10_15_1 = __MAC_10_15_1;
pub const MAC_OS_X_VERSION_10_15_4 = __MAC_10_15_4;
pub const MAC_OS_X_VERSION_10_16 = __MAC_10_16;
pub const MAC_OS_VERSION_11_0 = __MAC_11_0;
pub const MAC_OS_VERSION_11_1 = __MAC_11_1;
pub const MAC_OS_VERSION_11_3 = __MAC_11_3;
pub const MAC_OS_VERSION_11_4 = __MAC_11_4;
pub const MAC_OS_VERSION_11_5 = __MAC_11_5;
pub const MAC_OS_VERSION_11_6 = __MAC_11_6;
pub const MAC_OS_VERSION_12_0 = __MAC_12_0;
pub const MAC_OS_VERSION_12_1 = __MAC_12_1;
pub const MAC_OS_VERSION_12_2 = __MAC_12_2;
pub const MAC_OS_VERSION_12_3 = __MAC_12_3;
pub const MAC_OS_VERSION_12_4 = __MAC_12_4;
pub const MAC_OS_VERSION_12_5 = __MAC_12_5;
pub const MAC_OS_VERSION_12_6 = __MAC_12_6;
pub const MAC_OS_VERSION_12_7 = __MAC_12_7;
pub const MAC_OS_VERSION_13_0 = __MAC_13_0;
pub const MAC_OS_VERSION_13_1 = __MAC_13_1;
pub const MAC_OS_VERSION_13_2 = __MAC_13_2;
pub const MAC_OS_VERSION_13_3 = __MAC_13_3;
pub const MAC_OS_VERSION_13_4 = __MAC_13_4;
pub const MAC_OS_VERSION_13_5 = __MAC_13_5;
pub const MAC_OS_VERSION_13_6 = __MAC_13_6;
pub const MAC_OS_VERSION_14_0 = __MAC_14_0;
pub const MAC_OS_VERSION_14_1 = __MAC_14_1;
pub const MAC_OS_VERSION_14_2 = __MAC_14_2;
pub const MAC_OS_VERSION_14_3 = __MAC_14_3;
pub const MAC_OS_VERSION_14_4 = __MAC_14_4;
pub const __AVAILABILITY_INTERNAL__ = "";
pub const __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_14_4;
pub const __AVAILABILITY_INTERNAL_REGULAR = "";
pub const __AVAILABILITY_INTERNAL_LEGACY__ = "";
pub const __ENABLE_LEGACY_MAC_AVAILABILITY = @as(c_int, 1);
pub inline fn __API_RANGE_STRINGIFY(x: anytype) @TypeOf(__API_RANGE_STRINGIFY2(x)) {
    return __API_RANGE_STRINGIFY2(x);
}
pub inline fn __API_AVAILABLE0(arg0: anytype) @TypeOf(__API_A(arg0)) {
    return __API_A(arg0);
}
pub inline fn __API_AVAILABLE_BEGIN0(arg0: anytype) @TypeOf(__API_A_BEGIN(arg0)) {
    return __API_A_BEGIN(arg0);
}
pub inline fn __API_DEPRECATED_MSG0(msg: anytype, arg0: anytype) @TypeOf(__API_D(msg, arg0)) {
    return __API_D(msg, arg0);
}
pub inline fn __API_DEPRECATED_BEGIN0(msg: anytype, arg0: anytype) @TypeOf(__API_D_BEGIN(msg, arg0)) {
    return __API_D_BEGIN(msg, arg0);
}
pub inline fn __API_DEPRECATED_REP0(msg: anytype, arg0: anytype) @TypeOf(__API_R(msg, arg0)) {
    return __API_R(msg, arg0);
}
pub inline fn __API_DEPRECATED_BEGIN_REP0(msg: anytype, arg0: anytype) @TypeOf(__API_R_BEGIN(msg, arg0)) {
    return __API_R_BEGIN(msg, arg0);
}
pub inline fn __API_UNAVAILABLE0(arg0: anytype) @TypeOf(__API_U(arg0)) {
    return __API_U(arg0);
}
pub inline fn __API_UNAVAILABLE_BEGIN0(arg0: anytype) @TypeOf(__API_U_BEGIN(arg0)) {
    return __API_U_BEGIN(arg0);
}
pub const __glu_h__ = "";
pub const _OpenGLAvailability_H = "";
pub const __OS_AVAILABILITY__ = "";
pub const API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_MACOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_IOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_TVOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_WATCHOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_DRIVERKIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const API_TO_BE_DEPRECATED_VISIONOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub inline fn OPENGL_ENUM_AVAILABLE(from: anytype) @TypeOf(OPENGL_AVAILABLE(from)) {
    return OPENGL_AVAILABLE(from);
}
pub inline fn OPENGL_ENUM_DEPRECATED(from: anytype, to: anytype) @TypeOf(OPENGL_DEPRECATED(from, to)) {
    return OPENGL_DEPRECATED(from, to);
}
pub inline fn OPENGL_ENUM_DEPRECATED_MSG(from: anytype, to: anytype, msg: anytype) @TypeOf(OPENGL_DEPRECATED_MSG(from, to, msg)) {
    return OPENGL_DEPRECATED_MSG(from, to, msg);
}
pub const GLU_EXT_object_space_tess = @as(c_int, 1);
pub const GLU_EXT_nurbs_tessellator = @as(c_int, 1);
pub const GLU_FALSE = @as(c_int, 0);
pub const GLU_TRUE = @as(c_int, 1);
pub const GLU_VERSION_1_1 = @as(c_int, 1);
pub const GLU_VERSION_1_2 = @as(c_int, 1);
pub const GLU_VERSION_1_3 = @as(c_int, 1);
pub const GLU_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100800, .decimal);
pub const GLU_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100801, .decimal);
pub const GLU_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100900, .decimal);
pub const GLU_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100901, .decimal);
pub const GLU_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100902, .decimal);
pub const GLU_INCOMPATIBLE_GL_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100903, .decimal);
pub const GLU_INVALID_OPERATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100904, .decimal);
pub const GLU_OUTLINE_POLYGON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100240, .decimal);
pub const GLU_OUTLINE_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100241, .decimal);
pub const GLU_NURBS_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100103, .decimal);
pub const GLU_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100103, .decimal);
pub const GLU_NURBS_BEGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100164, .decimal);
pub const GLU_NURBS_BEGIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100164, .decimal);
pub const GLU_NURBS_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100165, .decimal);
pub const GLU_NURBS_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100165, .decimal);
pub const GLU_NURBS_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100166, .decimal);
pub const GLU_NURBS_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100166, .decimal);
pub const GLU_NURBS_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100167, .decimal);
pub const GLU_NURBS_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100167, .decimal);
pub const GLU_NURBS_TEXTURE_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100168, .decimal);
pub const GLU_NURBS_TEX_COORD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100168, .decimal);
pub const GLU_NURBS_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100169, .decimal);
pub const GLU_NURBS_END_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100169, .decimal);
pub const GLU_NURBS_BEGIN_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100170, .decimal);
pub const GLU_NURBS_BEGIN_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100170, .decimal);
pub const GLU_NURBS_VERTEX_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100171, .decimal);
pub const GLU_NURBS_VERTEX_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100171, .decimal);
pub const GLU_NURBS_NORMAL_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100172, .decimal);
pub const GLU_NURBS_NORMAL_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100172, .decimal);
pub const GLU_NURBS_COLOR_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100173, .decimal);
pub const GLU_NURBS_COLOR_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100173, .decimal);
pub const GLU_NURBS_TEXTURE_COORD_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100174, .decimal);
pub const GLU_NURBS_TEX_COORD_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100174, .decimal);
pub const GLU_NURBS_END_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100175, .decimal);
pub const GLU_NURBS_END_DATA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100175, .decimal);
pub const GLU_NURBS_ERROR1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100251, .decimal);
pub const GLU_NURBS_ERROR2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100252, .decimal);
pub const GLU_NURBS_ERROR3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100253, .decimal);
pub const GLU_NURBS_ERROR4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100254, .decimal);
pub const GLU_NURBS_ERROR5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100255, .decimal);
pub const GLU_NURBS_ERROR6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100256, .decimal);
pub const GLU_NURBS_ERROR7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100257, .decimal);
pub const GLU_NURBS_ERROR8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100258, .decimal);
pub const GLU_NURBS_ERROR9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100259, .decimal);
pub const GLU_NURBS_ERROR10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100260, .decimal);
pub const GLU_NURBS_ERROR11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100261, .decimal);
pub const GLU_NURBS_ERROR12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100262, .decimal);
pub const GLU_NURBS_ERROR13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100263, .decimal);
pub const GLU_NURBS_ERROR14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100264, .decimal);
pub const GLU_NURBS_ERROR15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100265, .decimal);
pub const GLU_NURBS_ERROR16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100266, .decimal);
pub const GLU_NURBS_ERROR17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100267, .decimal);
pub const GLU_NURBS_ERROR18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100268, .decimal);
pub const GLU_NURBS_ERROR19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100269, .decimal);
pub const GLU_NURBS_ERROR20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100270, .decimal);
pub const GLU_NURBS_ERROR21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100271, .decimal);
pub const GLU_NURBS_ERROR22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100272, .decimal);
pub const GLU_NURBS_ERROR23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100273, .decimal);
pub const GLU_NURBS_ERROR24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100274, .decimal);
pub const GLU_NURBS_ERROR25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100275, .decimal);
pub const GLU_NURBS_ERROR26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100276, .decimal);
pub const GLU_NURBS_ERROR27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100277, .decimal);
pub const GLU_NURBS_ERROR28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100278, .decimal);
pub const GLU_NURBS_ERROR29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100279, .decimal);
pub const GLU_NURBS_ERROR30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100280, .decimal);
pub const GLU_NURBS_ERROR31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100281, .decimal);
pub const GLU_NURBS_ERROR32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100282, .decimal);
pub const GLU_NURBS_ERROR33 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100283, .decimal);
pub const GLU_NURBS_ERROR34 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100284, .decimal);
pub const GLU_NURBS_ERROR35 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100285, .decimal);
pub const GLU_NURBS_ERROR36 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100286, .decimal);
pub const GLU_NURBS_ERROR37 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100287, .decimal);
pub const GLU_AUTO_LOAD_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const GLU_CULLING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100201, .decimal);
pub const GLU_SAMPLING_TOLERANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100203, .decimal);
pub const GLU_DISPLAY_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100204, .decimal);
pub const GLU_PARAMETRIC_TOLERANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100202, .decimal);
pub const GLU_SAMPLING_METHOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100205, .decimal);
pub const GLU_U_STEP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100206, .decimal);
pub const GLU_V_STEP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100207, .decimal);
pub const GLU_NURBS_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100160, .decimal);
pub const GLU_NURBS_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100160, .decimal);
pub const GLU_NURBS_TESSELLATOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100161, .decimal);
pub const GLU_NURBS_TESSELLATOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100161, .decimal);
pub const GLU_NURBS_RENDERER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100162, .decimal);
pub const GLU_NURBS_RENDERER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100162, .decimal);
pub const GLU_OBJECT_PARAMETRIC_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100208, .decimal);
pub const GLU_OBJECT_PARAMETRIC_ERROR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100208, .decimal);
pub const GLU_OBJECT_PATH_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100209, .decimal);
pub const GLU_OBJECT_PATH_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100209, .decimal);
pub const GLU_PATH_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100215, .decimal);
pub const GLU_PARAMETRIC_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100216, .decimal);
pub const GLU_DOMAIN_DISTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100217, .decimal);
pub const GLU_MAP1_TRIM_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100210, .decimal);
pub const GLU_MAP1_TRIM_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100211, .decimal);
pub const GLU_POINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100010, .decimal);
pub const GLU_LINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100011, .decimal);
pub const GLU_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100012, .decimal);
pub const GLU_SILHOUETTE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100013, .decimal);
pub const GLU_SMOOTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const GLU_FLAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100001, .decimal);
pub const GLU_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100002, .decimal);
pub const GLU_OUTSIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100020, .decimal);
pub const GLU_INSIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100021, .decimal);
pub const GLU_TESS_BEGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const GLU_BEGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const GLU_TESS_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100101, .decimal);
pub const GLU_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100101, .decimal);
pub const GLU_TESS_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100102, .decimal);
pub const GLU_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100102, .decimal);
pub const GLU_TESS_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100103, .decimal);
pub const GLU_TESS_EDGE_FLAG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100104, .decimal);
pub const GLU_EDGE_FLAG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100104, .decimal);
pub const GLU_TESS_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100105, .decimal);
pub const GLU_TESS_BEGIN_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100106, .decimal);
pub const GLU_TESS_VERTEX_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100107, .decimal);
pub const GLU_TESS_END_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100108, .decimal);
pub const GLU_TESS_ERROR_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100109, .decimal);
pub const GLU_TESS_EDGE_FLAG_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100110, .decimal);
pub const GLU_TESS_COMBINE_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100111, .decimal);
pub const GLU_CW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100120, .decimal);
pub const GLU_CCW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100121, .decimal);
pub const GLU_INTERIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100122, .decimal);
pub const GLU_EXTERIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100123, .decimal);
pub const GLU_UNKNOWN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100124, .decimal);
pub const GLU_TESS_WINDING_RULE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100140, .decimal);
pub const GLU_TESS_BOUNDARY_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100141, .decimal);
pub const GLU_TESS_TOLERANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100142, .decimal);
pub const GLU_TESS_ERROR1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100151, .decimal);
pub const GLU_TESS_ERROR2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100152, .decimal);
pub const GLU_TESS_ERROR3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100153, .decimal);
pub const GLU_TESS_ERROR4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100154, .decimal);
pub const GLU_TESS_ERROR5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100155, .decimal);
pub const GLU_TESS_ERROR6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100156, .decimal);
pub const GLU_TESS_ERROR7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100157, .decimal);
pub const GLU_TESS_ERROR8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100158, .decimal);
pub const GLU_TESS_MISSING_BEGIN_POLYGON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100151, .decimal);
pub const GLU_TESS_MISSING_BEGIN_CONTOUR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100152, .decimal);
pub const GLU_TESS_MISSING_END_POLYGON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100153, .decimal);
pub const GLU_TESS_MISSING_END_CONTOUR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100154, .decimal);
pub const GLU_TESS_COORD_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100155, .decimal);
pub const GLU_TESS_NEED_COMBINE_CALLBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100156, .decimal);
pub const GLU_TESS_WINDING_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100130, .decimal);
pub const GLU_TESS_WINDING_NONZERO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100131, .decimal);
pub const GLU_TESS_WINDING_POSITIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100132, .decimal);
pub const GLU_TESS_WINDING_NEGATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100133, .decimal);
pub const GLU_TESS_WINDING_ABS_GEQ_TWO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100134, .decimal);
pub const GLU_TESS_MAX_COORD = @as(f64, 1.0e150);
pub const GL_VERSION_1_2 = @as(c_int, 1);
pub const GL_SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GL_RESCALE_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const GL_TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GL_BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GL_TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_LIGHT_MODEL_COLOR_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const GL_SINGLE_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const GL_SEPARATE_SPECULAR_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const GL_UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hexadecimal);
pub const GL_ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hexadecimal);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hexadecimal);
pub const glCopyTexSubImage3D = GLEW_GET_FUN(__glewCopyTexSubImage3D);
pub const glDrawRangeElements = GLEW_GET_FUN(__glewDrawRangeElements);
pub const glTexImage3D = GLEW_GET_FUN(__glewTexImage3D);
pub const glTexSubImage3D = GLEW_GET_FUN(__glewTexSubImage3D);
pub const GLEW_VERSION_1_2 = GLEW_GET_VAR(__GLEW_VERSION_1_2);
pub const GL_VERSION_1_2_1 = @as(c_int, 1);
pub const GLEW_VERSION_1_2_1 = GLEW_GET_VAR(__GLEW_VERSION_1_2_1);
pub const GL_VERSION_1_3 = @as(c_int, 1);
pub const GL_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_CLIENT_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const GL_MAX_TEXTURE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_TRANSPOSE_PROJECTION_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_TEXTURE_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const GL_TRANSPOSE_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const GL_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const GL_COMPRESSED_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const GL_COMPRESSED_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const GL_COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_NORMAL_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_RGB_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_ADD_SIGNED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_INTERPOLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_CONSTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_PRIMARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PREVIOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_SOURCE0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_OPERAND0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const GL_DOT3_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const GL_DOT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_MULTISAMPLE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const glActiveTexture = GLEW_GET_FUN(__glewActiveTexture);
pub const glClientActiveTexture = GLEW_GET_FUN(__glewClientActiveTexture);
pub const glCompressedTexImage1D = GLEW_GET_FUN(__glewCompressedTexImage1D);
pub const glCompressedTexImage2D = GLEW_GET_FUN(__glewCompressedTexImage2D);
pub const glCompressedTexImage3D = GLEW_GET_FUN(__glewCompressedTexImage3D);
pub const glCompressedTexSubImage1D = GLEW_GET_FUN(__glewCompressedTexSubImage1D);
pub const glCompressedTexSubImage2D = GLEW_GET_FUN(__glewCompressedTexSubImage2D);
pub const glCompressedTexSubImage3D = GLEW_GET_FUN(__glewCompressedTexSubImage3D);
pub const glGetCompressedTexImage = GLEW_GET_FUN(__glewGetCompressedTexImage);
pub const glLoadTransposeMatrixd = GLEW_GET_FUN(__glewLoadTransposeMatrixd);
pub const glLoadTransposeMatrixf = GLEW_GET_FUN(__glewLoadTransposeMatrixf);
pub const glMultTransposeMatrixd = GLEW_GET_FUN(__glewMultTransposeMatrixd);
pub const glMultTransposeMatrixf = GLEW_GET_FUN(__glewMultTransposeMatrixf);
pub const glMultiTexCoord1d = GLEW_GET_FUN(__glewMultiTexCoord1d);
pub const glMultiTexCoord1dv = GLEW_GET_FUN(__glewMultiTexCoord1dv);
pub const glMultiTexCoord1f = GLEW_GET_FUN(__glewMultiTexCoord1f);
pub const glMultiTexCoord1fv = GLEW_GET_FUN(__glewMultiTexCoord1fv);
pub const glMultiTexCoord1i = GLEW_GET_FUN(__glewMultiTexCoord1i);
pub const glMultiTexCoord1iv = GLEW_GET_FUN(__glewMultiTexCoord1iv);
pub const glMultiTexCoord1s = GLEW_GET_FUN(__glewMultiTexCoord1s);
pub const glMultiTexCoord1sv = GLEW_GET_FUN(__glewMultiTexCoord1sv);
pub const glMultiTexCoord2d = GLEW_GET_FUN(__glewMultiTexCoord2d);
pub const glMultiTexCoord2dv = GLEW_GET_FUN(__glewMultiTexCoord2dv);
pub const glMultiTexCoord2f = GLEW_GET_FUN(__glewMultiTexCoord2f);
pub const glMultiTexCoord2fv = GLEW_GET_FUN(__glewMultiTexCoord2fv);
pub const glMultiTexCoord2i = GLEW_GET_FUN(__glewMultiTexCoord2i);
pub const glMultiTexCoord2iv = GLEW_GET_FUN(__glewMultiTexCoord2iv);
pub const glMultiTexCoord2s = GLEW_GET_FUN(__glewMultiTexCoord2s);
pub const glMultiTexCoord2sv = GLEW_GET_FUN(__glewMultiTexCoord2sv);
pub const glMultiTexCoord3d = GLEW_GET_FUN(__glewMultiTexCoord3d);
pub const glMultiTexCoord3dv = GLEW_GET_FUN(__glewMultiTexCoord3dv);
pub const glMultiTexCoord3f = GLEW_GET_FUN(__glewMultiTexCoord3f);
pub const glMultiTexCoord3fv = GLEW_GET_FUN(__glewMultiTexCoord3fv);
pub const glMultiTexCoord3i = GLEW_GET_FUN(__glewMultiTexCoord3i);
pub const glMultiTexCoord3iv = GLEW_GET_FUN(__glewMultiTexCoord3iv);
pub const glMultiTexCoord3s = GLEW_GET_FUN(__glewMultiTexCoord3s);
pub const glMultiTexCoord3sv = GLEW_GET_FUN(__glewMultiTexCoord3sv);
pub const glMultiTexCoord4d = GLEW_GET_FUN(__glewMultiTexCoord4d);
pub const glMultiTexCoord4dv = GLEW_GET_FUN(__glewMultiTexCoord4dv);
pub const glMultiTexCoord4f = GLEW_GET_FUN(__glewMultiTexCoord4f);
pub const glMultiTexCoord4fv = GLEW_GET_FUN(__glewMultiTexCoord4fv);
pub const glMultiTexCoord4i = GLEW_GET_FUN(__glewMultiTexCoord4i);
pub const glMultiTexCoord4iv = GLEW_GET_FUN(__glewMultiTexCoord4iv);
pub const glMultiTexCoord4s = GLEW_GET_FUN(__glewMultiTexCoord4s);
pub const glMultiTexCoord4sv = GLEW_GET_FUN(__glewMultiTexCoord4sv);
pub const glSampleCoverage = GLEW_GET_FUN(__glewSampleCoverage);
pub const GLEW_VERSION_1_3 = GLEW_GET_VAR(__GLEW_VERSION_1_3);
pub const GL_VERSION_1_4 = @as(c_int, 1);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_POINT_SIZE_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_DISTANCE_ATTENUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GL_GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_FOG_COORDINATE_SOURCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FRAGMENT_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const GL_CURRENT_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_COLOR_SUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_CURRENT_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const GL_MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_TEXTURE_FILTER_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_DEPTH_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_COMPARE_R_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const glBlendColor = GLEW_GET_FUN(__glewBlendColor);
pub const glBlendEquation = GLEW_GET_FUN(__glewBlendEquation);
pub const glBlendFuncSeparate = GLEW_GET_FUN(__glewBlendFuncSeparate);
pub const glFogCoordPointer = GLEW_GET_FUN(__glewFogCoordPointer);
pub const glFogCoordd = GLEW_GET_FUN(__glewFogCoordd);
pub const glFogCoorddv = GLEW_GET_FUN(__glewFogCoorddv);
pub const glFogCoordf = GLEW_GET_FUN(__glewFogCoordf);
pub const glFogCoordfv = GLEW_GET_FUN(__glewFogCoordfv);
pub const glMultiDrawArrays = GLEW_GET_FUN(__glewMultiDrawArrays);
pub const glMultiDrawElements = GLEW_GET_FUN(__glewMultiDrawElements);
pub const glPointParameterf = GLEW_GET_FUN(__glewPointParameterf);
pub const glPointParameterfv = GLEW_GET_FUN(__glewPointParameterfv);
pub const glPointParameteri = GLEW_GET_FUN(__glewPointParameteri);
pub const glPointParameteriv = GLEW_GET_FUN(__glewPointParameteriv);
pub const glSecondaryColor3b = GLEW_GET_FUN(__glewSecondaryColor3b);
pub const glSecondaryColor3bv = GLEW_GET_FUN(__glewSecondaryColor3bv);
pub const glSecondaryColor3d = GLEW_GET_FUN(__glewSecondaryColor3d);
pub const glSecondaryColor3dv = GLEW_GET_FUN(__glewSecondaryColor3dv);
pub const glSecondaryColor3f = GLEW_GET_FUN(__glewSecondaryColor3f);
pub const glSecondaryColor3fv = GLEW_GET_FUN(__glewSecondaryColor3fv);
pub const glSecondaryColor3i = GLEW_GET_FUN(__glewSecondaryColor3i);
pub const glSecondaryColor3iv = GLEW_GET_FUN(__glewSecondaryColor3iv);
pub const glSecondaryColor3s = GLEW_GET_FUN(__glewSecondaryColor3s);
pub const glSecondaryColor3sv = GLEW_GET_FUN(__glewSecondaryColor3sv);
pub const glSecondaryColor3ub = GLEW_GET_FUN(__glewSecondaryColor3ub);
pub const glSecondaryColor3ubv = GLEW_GET_FUN(__glewSecondaryColor3ubv);
pub const glSecondaryColor3ui = GLEW_GET_FUN(__glewSecondaryColor3ui);
pub const glSecondaryColor3uiv = GLEW_GET_FUN(__glewSecondaryColor3uiv);
pub const glSecondaryColor3us = GLEW_GET_FUN(__glewSecondaryColor3us);
pub const glSecondaryColor3usv = GLEW_GET_FUN(__glewSecondaryColor3usv);
pub const glSecondaryColorPointer = GLEW_GET_FUN(__glewSecondaryColorPointer);
pub const glWindowPos2d = GLEW_GET_FUN(__glewWindowPos2d);
pub const glWindowPos2dv = GLEW_GET_FUN(__glewWindowPos2dv);
pub const glWindowPos2f = GLEW_GET_FUN(__glewWindowPos2f);
pub const glWindowPos2fv = GLEW_GET_FUN(__glewWindowPos2fv);
pub const glWindowPos2i = GLEW_GET_FUN(__glewWindowPos2i);
pub const glWindowPos2iv = GLEW_GET_FUN(__glewWindowPos2iv);
pub const glWindowPos2s = GLEW_GET_FUN(__glewWindowPos2s);
pub const glWindowPos2sv = GLEW_GET_FUN(__glewWindowPos2sv);
pub const glWindowPos3d = GLEW_GET_FUN(__glewWindowPos3d);
pub const glWindowPos3dv = GLEW_GET_FUN(__glewWindowPos3dv);
pub const glWindowPos3f = GLEW_GET_FUN(__glewWindowPos3f);
pub const glWindowPos3fv = GLEW_GET_FUN(__glewWindowPos3fv);
pub const glWindowPos3i = GLEW_GET_FUN(__glewWindowPos3i);
pub const glWindowPos3iv = GLEW_GET_FUN(__glewWindowPos3iv);
pub const glWindowPos3s = GLEW_GET_FUN(__glewWindowPos3s);
pub const glWindowPos3sv = GLEW_GET_FUN(__glewWindowPos3sv);
pub const GLEW_VERSION_1_4 = GLEW_GET_VAR(__GLEW_VERSION_1_4);
pub const GL_VERSION_1_5 = @as(c_int, 1);
pub const GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
pub const GL_FOG_COORD = GL_FOG_COORDINATE;
pub const GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
pub const GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
pub const GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
pub const GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
pub const GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
pub const GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
pub const GL_SRC0_RGB = GL_SOURCE0_RGB;
pub const GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
pub const GL_SRC1_RGB = GL_SOURCE1_RGB;
pub const GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
pub const GL_SRC2_RGB = GL_SOURCE2_RGB;
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const GL_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const GL_INDEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const GL_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const glBeginQuery = GLEW_GET_FUN(__glewBeginQuery);
pub const glBindBuffer = GLEW_GET_FUN(__glewBindBuffer);
pub const glBufferData = GLEW_GET_FUN(__glewBufferData);
pub const glBufferSubData = GLEW_GET_FUN(__glewBufferSubData);
pub const glDeleteBuffers = GLEW_GET_FUN(__glewDeleteBuffers);
pub const glDeleteQueries = GLEW_GET_FUN(__glewDeleteQueries);
pub const glEndQuery = GLEW_GET_FUN(__glewEndQuery);
pub const glGenBuffers = GLEW_GET_FUN(__glewGenBuffers);
pub const glGenQueries = GLEW_GET_FUN(__glewGenQueries);
pub const glGetBufferParameteriv = GLEW_GET_FUN(__glewGetBufferParameteriv);
pub const glGetBufferPointerv = GLEW_GET_FUN(__glewGetBufferPointerv);
pub const glGetBufferSubData = GLEW_GET_FUN(__glewGetBufferSubData);
pub const glGetQueryObjectiv = GLEW_GET_FUN(__glewGetQueryObjectiv);
pub const glGetQueryObjectuiv = GLEW_GET_FUN(__glewGetQueryObjectuiv);
pub const glGetQueryiv = GLEW_GET_FUN(__glewGetQueryiv);
pub const glIsBuffer = GLEW_GET_FUN(__glewIsBuffer);
pub const glIsQuery = GLEW_GET_FUN(__glewIsQuery);
pub const glMapBuffer = GLEW_GET_FUN(__glewMapBuffer);
pub const glUnmapBuffer = GLEW_GET_FUN(__glewUnmapBuffer);
pub const GLEW_VERSION_1_5 = GLEW_GET_VAR(__GLEW_VERSION_1_5);
pub const GL_VERSION_2_0 = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_POINT_SPRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_COORD_REPLACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const GL_POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hexadecimal);
pub const GL_LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const GL_UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hexadecimal);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hexadecimal);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hexadecimal);
pub const glAttachShader = GLEW_GET_FUN(__glewAttachShader);
pub const glBindAttribLocation = GLEW_GET_FUN(__glewBindAttribLocation);
pub const glBlendEquationSeparate = GLEW_GET_FUN(__glewBlendEquationSeparate);
pub const glCompileShader = GLEW_GET_FUN(__glewCompileShader);
pub const glCreateProgram = GLEW_GET_FUN(__glewCreateProgram);
pub const glCreateShader = GLEW_GET_FUN(__glewCreateShader);
pub const glDeleteProgram = GLEW_GET_FUN(__glewDeleteProgram);
pub const glDeleteShader = GLEW_GET_FUN(__glewDeleteShader);
pub const glDetachShader = GLEW_GET_FUN(__glewDetachShader);
pub const glDisableVertexAttribArray = GLEW_GET_FUN(__glewDisableVertexAttribArray);
pub const glDrawBuffers = GLEW_GET_FUN(__glewDrawBuffers);
pub const glEnableVertexAttribArray = GLEW_GET_FUN(__glewEnableVertexAttribArray);
pub const glGetActiveAttrib = GLEW_GET_FUN(__glewGetActiveAttrib);
pub const glGetActiveUniform = GLEW_GET_FUN(__glewGetActiveUniform);
pub const glGetAttachedShaders = GLEW_GET_FUN(__glewGetAttachedShaders);
pub const glGetAttribLocation = GLEW_GET_FUN(__glewGetAttribLocation);
pub const glGetProgramInfoLog = GLEW_GET_FUN(__glewGetProgramInfoLog);
pub const glGetProgramiv = GLEW_GET_FUN(__glewGetProgramiv);
pub const glGetShaderInfoLog = GLEW_GET_FUN(__glewGetShaderInfoLog);
pub const glGetShaderSource = GLEW_GET_FUN(__glewGetShaderSource);
pub const glGetShaderiv = GLEW_GET_FUN(__glewGetShaderiv);
pub const glGetUniformLocation = GLEW_GET_FUN(__glewGetUniformLocation);
pub const glGetUniformfv = GLEW_GET_FUN(__glewGetUniformfv);
pub const glGetUniformiv = GLEW_GET_FUN(__glewGetUniformiv);
pub const glGetVertexAttribPointerv = GLEW_GET_FUN(__glewGetVertexAttribPointerv);
pub const glGetVertexAttribdv = GLEW_GET_FUN(__glewGetVertexAttribdv);
pub const glGetVertexAttribfv = GLEW_GET_FUN(__glewGetVertexAttribfv);
pub const glGetVertexAttribiv = GLEW_GET_FUN(__glewGetVertexAttribiv);
pub const glIsProgram = GLEW_GET_FUN(__glewIsProgram);
pub const glIsShader = GLEW_GET_FUN(__glewIsShader);
pub const glLinkProgram = GLEW_GET_FUN(__glewLinkProgram);
pub const glShaderSource = GLEW_GET_FUN(__glewShaderSource);
pub const glStencilFuncSeparate = GLEW_GET_FUN(__glewStencilFuncSeparate);
pub const glStencilMaskSeparate = GLEW_GET_FUN(__glewStencilMaskSeparate);
pub const glStencilOpSeparate = GLEW_GET_FUN(__glewStencilOpSeparate);
pub const glUniform1f = GLEW_GET_FUN(__glewUniform1f);
pub const glUniform1fv = GLEW_GET_FUN(__glewUniform1fv);
pub const glUniform1i = GLEW_GET_FUN(__glewUniform1i);
pub const glUniform1iv = GLEW_GET_FUN(__glewUniform1iv);
pub const glUniform2f = GLEW_GET_FUN(__glewUniform2f);
pub const glUniform2fv = GLEW_GET_FUN(__glewUniform2fv);
pub const glUniform2i = GLEW_GET_FUN(__glewUniform2i);
pub const glUniform2iv = GLEW_GET_FUN(__glewUniform2iv);
pub const glUniform3f = GLEW_GET_FUN(__glewUniform3f);
pub const glUniform3fv = GLEW_GET_FUN(__glewUniform3fv);
pub const glUniform3i = GLEW_GET_FUN(__glewUniform3i);
pub const glUniform3iv = GLEW_GET_FUN(__glewUniform3iv);
pub const glUniform4f = GLEW_GET_FUN(__glewUniform4f);
pub const glUniform4fv = GLEW_GET_FUN(__glewUniform4fv);
pub const glUniform4i = GLEW_GET_FUN(__glewUniform4i);
pub const glUniform4iv = GLEW_GET_FUN(__glewUniform4iv);
pub const glUniformMatrix2fv = GLEW_GET_FUN(__glewUniformMatrix2fv);
pub const glUniformMatrix3fv = GLEW_GET_FUN(__glewUniformMatrix3fv);
pub const glUniformMatrix4fv = GLEW_GET_FUN(__glewUniformMatrix4fv);
pub const glUseProgram = GLEW_GET_FUN(__glewUseProgram);
pub const glValidateProgram = GLEW_GET_FUN(__glewValidateProgram);
pub const glVertexAttrib1d = GLEW_GET_FUN(__glewVertexAttrib1d);
pub const glVertexAttrib1dv = GLEW_GET_FUN(__glewVertexAttrib1dv);
pub const glVertexAttrib1f = GLEW_GET_FUN(__glewVertexAttrib1f);
pub const glVertexAttrib1fv = GLEW_GET_FUN(__glewVertexAttrib1fv);
pub const glVertexAttrib1s = GLEW_GET_FUN(__glewVertexAttrib1s);
pub const glVertexAttrib1sv = GLEW_GET_FUN(__glewVertexAttrib1sv);
pub const glVertexAttrib2d = GLEW_GET_FUN(__glewVertexAttrib2d);
pub const glVertexAttrib2dv = GLEW_GET_FUN(__glewVertexAttrib2dv);
pub const glVertexAttrib2f = GLEW_GET_FUN(__glewVertexAttrib2f);
pub const glVertexAttrib2fv = GLEW_GET_FUN(__glewVertexAttrib2fv);
pub const glVertexAttrib2s = GLEW_GET_FUN(__glewVertexAttrib2s);
pub const glVertexAttrib2sv = GLEW_GET_FUN(__glewVertexAttrib2sv);
pub const glVertexAttrib3d = GLEW_GET_FUN(__glewVertexAttrib3d);
pub const glVertexAttrib3dv = GLEW_GET_FUN(__glewVertexAttrib3dv);
pub const glVertexAttrib3f = GLEW_GET_FUN(__glewVertexAttrib3f);
pub const glVertexAttrib3fv = GLEW_GET_FUN(__glewVertexAttrib3fv);
pub const glVertexAttrib3s = GLEW_GET_FUN(__glewVertexAttrib3s);
pub const glVertexAttrib3sv = GLEW_GET_FUN(__glewVertexAttrib3sv);
pub const glVertexAttrib4Nbv = GLEW_GET_FUN(__glewVertexAttrib4Nbv);
pub const glVertexAttrib4Niv = GLEW_GET_FUN(__glewVertexAttrib4Niv);
pub const glVertexAttrib4Nsv = GLEW_GET_FUN(__glewVertexAttrib4Nsv);
pub const glVertexAttrib4Nub = GLEW_GET_FUN(__glewVertexAttrib4Nub);
pub const glVertexAttrib4Nubv = GLEW_GET_FUN(__glewVertexAttrib4Nubv);
pub const glVertexAttrib4Nuiv = GLEW_GET_FUN(__glewVertexAttrib4Nuiv);
pub const glVertexAttrib4Nusv = GLEW_GET_FUN(__glewVertexAttrib4Nusv);
pub const glVertexAttrib4bv = GLEW_GET_FUN(__glewVertexAttrib4bv);
pub const glVertexAttrib4d = GLEW_GET_FUN(__glewVertexAttrib4d);
pub const glVertexAttrib4dv = GLEW_GET_FUN(__glewVertexAttrib4dv);
pub const glVertexAttrib4f = GLEW_GET_FUN(__glewVertexAttrib4f);
pub const glVertexAttrib4fv = GLEW_GET_FUN(__glewVertexAttrib4fv);
pub const glVertexAttrib4iv = GLEW_GET_FUN(__glewVertexAttrib4iv);
pub const glVertexAttrib4s = GLEW_GET_FUN(__glewVertexAttrib4s);
pub const glVertexAttrib4sv = GLEW_GET_FUN(__glewVertexAttrib4sv);
pub const glVertexAttrib4ubv = GLEW_GET_FUN(__glewVertexAttrib4ubv);
pub const glVertexAttrib4uiv = GLEW_GET_FUN(__glewVertexAttrib4uiv);
pub const glVertexAttrib4usv = GLEW_GET_FUN(__glewVertexAttrib4usv);
pub const glVertexAttribPointer = GLEW_GET_FUN(__glewVertexAttribPointer);
pub const GLEW_VERSION_2_0 = GLEW_GET_VAR(__GLEW_VERSION_2_0);
pub const GL_VERSION_2_1 = @as(c_int, 1);
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845F, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const GL_FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const GL_FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const GL_FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const GL_FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const GL_FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const GL_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const glUniformMatrix2x3fv = GLEW_GET_FUN(__glewUniformMatrix2x3fv);
pub const glUniformMatrix2x4fv = GLEW_GET_FUN(__glewUniformMatrix2x4fv);
pub const glUniformMatrix3x2fv = GLEW_GET_FUN(__glewUniformMatrix3x2fv);
pub const glUniformMatrix3x4fv = GLEW_GET_FUN(__glewUniformMatrix3x4fv);
pub const glUniformMatrix4x2fv = GLEW_GET_FUN(__glewUniformMatrix4x2fv);
pub const glUniformMatrix4x3fv = GLEW_GET_FUN(__glewUniformMatrix4x3fv);
pub const GLEW_VERSION_2_1 = GLEW_GET_VAR(__GLEW_VERSION_2_1);
pub const GL_VERSION_3_0 = @as(c_int, 1);
pub const GL_CLIP_DISTANCE0 = GL_CLIP_PLANE0;
pub const GL_CLIP_DISTANCE1 = GL_CLIP_PLANE1;
pub const GL_CLIP_DISTANCE2 = GL_CLIP_PLANE2;
pub const GL_CLIP_DISTANCE3 = GL_CLIP_PLANE3;
pub const GL_CLIP_DISTANCE4 = GL_CLIP_PLANE4;
pub const GL_CLIP_DISTANCE5 = GL_CLIP_PLANE5;
pub const GL_COMPARE_REF_TO_TEXTURE = GL_COMPARE_R_TO_TEXTURE_ARB;
pub const GL_MAX_CLIP_DISTANCES = GL_MAX_CLIP_PLANES;
pub const GL_MAX_VARYING_COMPONENTS = GL_MAX_VARYING_FLOATS;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = @as(c_int, 0x0001);
pub const GL_MAJOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821B, .hexadecimal);
pub const GL_MINOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821C, .hexadecimal);
pub const GL_NUM_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821D, .hexadecimal);
pub const GL_CONTEXT_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821E, .hexadecimal);
pub const GL_DEPTH_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8223, .hexadecimal);
pub const GL_STENCIL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8224, .hexadecimal);
pub const GL_RGBA32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGB32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGBA16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGB16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_CLAMP_VERTEX_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hexadecimal);
pub const GL_CLAMP_FRAGMENT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hexadecimal);
pub const GL_CLAMP_READ_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const GL_FIXED_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const GL_TEXTURE_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const GL_TEXTURE_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const GL_TEXTURE_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const GL_TEXTURE_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hexadecimal);
pub const GL_TEXTURE_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const GL_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const GL_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const GL_R11F_G11F_B10F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_RGB9_E5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_TEXTURE_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_RASTERIZER_DISCARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_RGBA32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const GL_RGB32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const GL_RGBA16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const GL_RGB16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const GL_RGBA8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const GL_RGB8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const GL_RGBA32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const GL_RGB32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const GL_RGBA16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const GL_RGB16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const GL_RGBA8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const GL_RGB8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const GL_RED_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GL_GREEN_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const GL_BLUE_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const GL_ALPHA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hexadecimal);
pub const GL_RGB_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const GL_RGBA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const GL_BGR_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const GL_BGRA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const GL_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const GL_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const GL_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const GL_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const GL_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const GL_QUERY_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const GL_QUERY_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const glBeginConditionalRender = GLEW_GET_FUN(__glewBeginConditionalRender);
pub const glBeginTransformFeedback = GLEW_GET_FUN(__glewBeginTransformFeedback);
pub const glBindFragDataLocation = GLEW_GET_FUN(__glewBindFragDataLocation);
pub const glClampColor = GLEW_GET_FUN(__glewClampColor);
pub const glClearBufferfi = GLEW_GET_FUN(__glewClearBufferfi);
pub const glClearBufferfv = GLEW_GET_FUN(__glewClearBufferfv);
pub const glClearBufferiv = GLEW_GET_FUN(__glewClearBufferiv);
pub const glClearBufferuiv = GLEW_GET_FUN(__glewClearBufferuiv);
pub const glColorMaski = GLEW_GET_FUN(__glewColorMaski);
pub const glDisablei = GLEW_GET_FUN(__glewDisablei);
pub const glEnablei = GLEW_GET_FUN(__glewEnablei);
pub const glEndConditionalRender = GLEW_GET_FUN(__glewEndConditionalRender);
pub const glEndTransformFeedback = GLEW_GET_FUN(__glewEndTransformFeedback);
pub const glGetBooleani_v = GLEW_GET_FUN(__glewGetBooleani_v);
pub const glGetFragDataLocation = GLEW_GET_FUN(__glewGetFragDataLocation);
pub const glGetStringi = GLEW_GET_FUN(__glewGetStringi);
pub const glGetTexParameterIiv = GLEW_GET_FUN(__glewGetTexParameterIiv);
pub const glGetTexParameterIuiv = GLEW_GET_FUN(__glewGetTexParameterIuiv);
pub const glGetTransformFeedbackVarying = GLEW_GET_FUN(__glewGetTransformFeedbackVarying);
pub const glGetUniformuiv = GLEW_GET_FUN(__glewGetUniformuiv);
pub const glGetVertexAttribIiv = GLEW_GET_FUN(__glewGetVertexAttribIiv);
pub const glGetVertexAttribIuiv = GLEW_GET_FUN(__glewGetVertexAttribIuiv);
pub const glIsEnabledi = GLEW_GET_FUN(__glewIsEnabledi);
pub const glTexParameterIiv = GLEW_GET_FUN(__glewTexParameterIiv);
pub const glTexParameterIuiv = GLEW_GET_FUN(__glewTexParameterIuiv);
pub const glTransformFeedbackVaryings = GLEW_GET_FUN(__glewTransformFeedbackVaryings);
pub const glUniform1ui = GLEW_GET_FUN(__glewUniform1ui);
pub const glUniform1uiv = GLEW_GET_FUN(__glewUniform1uiv);
pub const glUniform2ui = GLEW_GET_FUN(__glewUniform2ui);
pub const glUniform2uiv = GLEW_GET_FUN(__glewUniform2uiv);
pub const glUniform3ui = GLEW_GET_FUN(__glewUniform3ui);
pub const glUniform3uiv = GLEW_GET_FUN(__glewUniform3uiv);
pub const glUniform4ui = GLEW_GET_FUN(__glewUniform4ui);
pub const glUniform4uiv = GLEW_GET_FUN(__glewUniform4uiv);
pub const glVertexAttribI1i = GLEW_GET_FUN(__glewVertexAttribI1i);
pub const glVertexAttribI1iv = GLEW_GET_FUN(__glewVertexAttribI1iv);
pub const glVertexAttribI1ui = GLEW_GET_FUN(__glewVertexAttribI1ui);
pub const glVertexAttribI1uiv = GLEW_GET_FUN(__glewVertexAttribI1uiv);
pub const glVertexAttribI2i = GLEW_GET_FUN(__glewVertexAttribI2i);
pub const glVertexAttribI2iv = GLEW_GET_FUN(__glewVertexAttribI2iv);
pub const glVertexAttribI2ui = GLEW_GET_FUN(__glewVertexAttribI2ui);
pub const glVertexAttribI2uiv = GLEW_GET_FUN(__glewVertexAttribI2uiv);
pub const glVertexAttribI3i = GLEW_GET_FUN(__glewVertexAttribI3i);
pub const glVertexAttribI3iv = GLEW_GET_FUN(__glewVertexAttribI3iv);
pub const glVertexAttribI3ui = GLEW_GET_FUN(__glewVertexAttribI3ui);
pub const glVertexAttribI3uiv = GLEW_GET_FUN(__glewVertexAttribI3uiv);
pub const glVertexAttribI4bv = GLEW_GET_FUN(__glewVertexAttribI4bv);
pub const glVertexAttribI4i = GLEW_GET_FUN(__glewVertexAttribI4i);
pub const glVertexAttribI4iv = GLEW_GET_FUN(__glewVertexAttribI4iv);
pub const glVertexAttribI4sv = GLEW_GET_FUN(__glewVertexAttribI4sv);
pub const glVertexAttribI4ubv = GLEW_GET_FUN(__glewVertexAttribI4ubv);
pub const glVertexAttribI4ui = GLEW_GET_FUN(__glewVertexAttribI4ui);
pub const glVertexAttribI4uiv = GLEW_GET_FUN(__glewVertexAttribI4uiv);
pub const glVertexAttribI4usv = GLEW_GET_FUN(__glewVertexAttribI4usv);
pub const glVertexAttribIPointer = GLEW_GET_FUN(__glewVertexAttribIPointer);
pub const GLEW_VERSION_3_0 = GLEW_GET_VAR(__GLEW_VERSION_3_0);
pub const GL_VERSION_3_1 = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const GL_TEXTURE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const GL_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_RED_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F90, .hexadecimal);
pub const GL_RG_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F91, .hexadecimal);
pub const GL_RGB_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F92, .hexadecimal);
pub const GL_RGBA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F93, .hexadecimal);
pub const GL_R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hexadecimal);
pub const GL_RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hexadecimal);
pub const GL_RGB8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F96, .hexadecimal);
pub const GL_RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hexadecimal);
pub const GL_R16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hexadecimal);
pub const GL_RG16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hexadecimal);
pub const GL_RGB16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hexadecimal);
pub const GL_RGBA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hexadecimal);
pub const GL_SIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9C, .hexadecimal);
pub const GL_PRIMITIVE_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9D, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9E, .hexadecimal);
pub const GL_BUFFER_ACCESS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911F, .hexadecimal);
pub const GL_BUFFER_MAP_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hexadecimal);
pub const GL_BUFFER_MAP_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9121, .hexadecimal);
pub const glDrawArraysInstanced = GLEW_GET_FUN(__glewDrawArraysInstanced);
pub const glDrawElementsInstanced = GLEW_GET_FUN(__glewDrawElementsInstanced);
pub const glPrimitiveRestartIndex = GLEW_GET_FUN(__glewPrimitiveRestartIndex);
pub const glTexBuffer = GLEW_GET_FUN(__glewTexBuffer);
pub const GLEW_VERSION_3_1 = GLEW_GET_VAR(__GLEW_VERSION_3_1);
pub const GL_VERSION_3_2 = @as(c_int, 1);
pub const GL_CONTEXT_CORE_PROFILE_BIT = @as(c_int, 0x00000001);
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = @as(c_int, 0x00000002);
pub const GL_LINES_ADJACENCY = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY = @as(c_int, 0x000D);
pub const GL_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9122, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9125, .hexadecimal);
pub const GL_CONTEXT_PROFILE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9126, .hexadecimal);
pub const glFramebufferTexture = GLEW_GET_FUN(__glewFramebufferTexture);
pub const glGetBufferParameteri64v = GLEW_GET_FUN(__glewGetBufferParameteri64v);
pub const glGetInteger64i_v = GLEW_GET_FUN(__glewGetInteger64i_v);
pub const GLEW_VERSION_3_2 = GLEW_GET_VAR(__GLEW_VERSION_3_2);
pub const GL_VERSION_3_3 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_RGB10_A2UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906F, .hexadecimal);
pub const glVertexAttribDivisor = GLEW_GET_FUN(__glewVertexAttribDivisor);
pub const GLEW_VERSION_3_3 = GLEW_GET_VAR(__GLEW_VERSION_3_3);
pub const GL_VERSION_4_0 = @as(c_int, 1);
pub const GL_SAMPLE_SHADING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const glBlendEquationSeparatei = GLEW_GET_FUN(__glewBlendEquationSeparatei);
pub const glBlendEquationi = GLEW_GET_FUN(__glewBlendEquationi);
pub const glBlendFuncSeparatei = GLEW_GET_FUN(__glewBlendFuncSeparatei);
pub const glBlendFunci = GLEW_GET_FUN(__glewBlendFunci);
pub const glMinSampleShading = GLEW_GET_FUN(__glewMinSampleShading);
pub const GLEW_VERSION_4_0 = GLEW_GET_VAR(__GLEW_VERSION_4_0);
pub const GL_VERSION_4_1 = @as(c_int, 1);
pub const GLEW_VERSION_4_1 = GLEW_GET_VAR(__GLEW_VERSION_4_1);
pub const GL_VERSION_4_2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GL_COPY_READ_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const GLEW_VERSION_4_2 = GLEW_GET_VAR(__GLEW_VERSION_4_2);
pub const GL_VERSION_4_3 = @as(c_int, 1);
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E9, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874E, .hexadecimal);
pub const GLEW_VERSION_4_3 = GLEW_GET_VAR(__GLEW_VERSION_4_3);
pub const GL_VERSION_4_4 = @as(c_int, 1);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E5, .hexadecimal);
pub const GL_TEXTURE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GLEW_VERSION_4_4 = GLEW_GET_VAR(__GLEW_VERSION_4_4);
pub const GL_VERSION_4_5 = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = @as(c_int, 0x00000004);
pub const glGetGraphicsResetStatus = GLEW_GET_FUN(__glewGetGraphicsResetStatus);
pub const glGetnCompressedTexImage = GLEW_GET_FUN(__glewGetnCompressedTexImage);
pub const glGetnTexImage = GLEW_GET_FUN(__glewGetnTexImage);
pub const glGetnUniformdv = GLEW_GET_FUN(__glewGetnUniformdv);
pub const GLEW_VERSION_4_5 = GLEW_GET_VAR(__GLEW_VERSION_4_5);
pub const GL_VERSION_4_6 = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = @as(c_int, 0x00000008);
pub const GL_PARAMETER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const GL_PARAMETER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);
pub const GL_VERTICES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const GL_PRIMITIVES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const GL_VERTEX_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_PATCHES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const GL_FRAGMENT_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const GL_COMPUTE_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const GL_CLIPPING_INPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const GL_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const GL_POLYGON_OFFSET_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const GL_SPIR_V_BINARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const GL_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9553, .hexadecimal);
pub const GL_NUM_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9554, .hexadecimal);
pub const glMultiDrawArraysIndirectCount = GLEW_GET_FUN(__glewMultiDrawArraysIndirectCount);
pub const glMultiDrawElementsIndirectCount = GLEW_GET_FUN(__glewMultiDrawElementsIndirectCount);
pub const glSpecializeShader = GLEW_GET_FUN(__glewSpecializeShader);
pub const GLEW_VERSION_4_6 = GLEW_GET_VAR(__GLEW_VERSION_4_6);
pub const GL_3DFX_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B2, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B3, .hexadecimal);
pub const GL_SAMPLES_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B4, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GLEW_3DFX_multisample = GLEW_GET_VAR(__GLEW_3DFX_multisample);
pub const GL_3DFX_tbuffer = @as(c_int, 1);
pub const glTbufferMask3DFX = GLEW_GET_FUN(__glewTbufferMask3DFX);
pub const GLEW_3DFX_tbuffer = GLEW_GET_VAR(__GLEW_3DFX_tbuffer);
pub const GL_3DFX_texture_compression_FXT1 = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B1, .hexadecimal);
pub const GLEW_3DFX_texture_compression_FXT1 = GLEW_GET_VAR(__GLEW_3DFX_texture_compression_FXT1);
pub const GL_AMD_blend_minmax_factor = @as(c_int, 1);
pub const GL_FACTOR_MIN_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901C, .hexadecimal);
pub const GL_FACTOR_MAX_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901D, .hexadecimal);
pub const GLEW_AMD_blend_minmax_factor = GLEW_GET_VAR(__GLEW_AMD_blend_minmax_factor);
pub const GL_AMD_compressed_3DC_texture = @as(c_int, 1);
pub const GL_3DC_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F9, .hexadecimal);
pub const GL_3DC_XY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FA, .hexadecimal);
pub const GLEW_AMD_compressed_3DC_texture = GLEW_GET_VAR(__GLEW_AMD_compressed_3DC_texture);
pub const GL_AMD_compressed_ATC_texture = @as(c_int, 1);
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EE, .hexadecimal);
pub const GL_ATC_RGB_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C92, .hexadecimal);
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C93, .hexadecimal);
pub const GLEW_AMD_compressed_ATC_texture = GLEW_GET_VAR(__GLEW_AMD_compressed_ATC_texture);
pub const GL_AMD_conservative_depth = @as(c_int, 1);
pub const GLEW_AMD_conservative_depth = GLEW_GET_VAR(__GLEW_AMD_conservative_depth);
pub const GL_AMD_debug_output = @as(c_int, 1);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9149, .hexadecimal);
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914A, .hexadecimal);
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914B, .hexadecimal);
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914C, .hexadecimal);
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914D, .hexadecimal);
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914E, .hexadecimal);
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914F, .hexadecimal);
pub const GL_DEBUG_CATEGORY_OTHER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9150, .hexadecimal);
pub const glDebugMessageCallbackAMD = GLEW_GET_FUN(__glewDebugMessageCallbackAMD);
pub const glDebugMessageEnableAMD = GLEW_GET_FUN(__glewDebugMessageEnableAMD);
pub const glDebugMessageInsertAMD = GLEW_GET_FUN(__glewDebugMessageInsertAMD);
pub const glGetDebugMessageLogAMD = GLEW_GET_FUN(__glewGetDebugMessageLogAMD);
pub const GLEW_AMD_debug_output = GLEW_GET_VAR(__GLEW_AMD_debug_output);
pub const GL_AMD_depth_clamp_separate = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_NEAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901E, .hexadecimal);
pub const GL_DEPTH_CLAMP_FAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901F, .hexadecimal);
pub const GLEW_AMD_depth_clamp_separate = GLEW_GET_VAR(__GLEW_AMD_depth_clamp_separate);
pub const GL_AMD_draw_buffers_blend = @as(c_int, 1);
pub const glBlendEquationIndexedAMD = GLEW_GET_FUN(__glewBlendEquationIndexedAMD);
pub const glBlendEquationSeparateIndexedAMD = GLEW_GET_FUN(__glewBlendEquationSeparateIndexedAMD);
pub const glBlendFuncIndexedAMD = GLEW_GET_FUN(__glewBlendFuncIndexedAMD);
pub const glBlendFuncSeparateIndexedAMD = GLEW_GET_FUN(__glewBlendFuncSeparateIndexedAMD);
pub const GLEW_AMD_draw_buffers_blend = GLEW_GET_VAR(__GLEW_AMD_draw_buffers_blend);
pub const GL_AMD_framebuffer_multisample_advanced = @as(c_int, 1);
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B2, .hexadecimal);
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B3, .hexadecimal);
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B4, .hexadecimal);
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B5, .hexadecimal);
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B6, .hexadecimal);
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B7, .hexadecimal);
pub const glNamedRenderbufferStorageMultisampleAdvancedAMD = GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleAdvancedAMD);
pub const glRenderbufferStorageMultisampleAdvancedAMD = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAdvancedAMD);
pub const GLEW_AMD_framebuffer_multisample_advanced = GLEW_GET_VAR(__GLEW_AMD_framebuffer_multisample_advanced);
pub const GL_AMD_framebuffer_sample_positions = @as(c_int, 1);
pub const GL_SUBSAMPLE_DISTANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883F, .hexadecimal);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AE, .hexadecimal);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AF, .hexadecimal);
pub const GL_ALL_PIXELS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const glFramebufferSamplePositionsfvAMD = GLEW_GET_FUN(__glewFramebufferSamplePositionsfvAMD);
pub const glGetFramebufferParameterfvAMD = GLEW_GET_FUN(__glewGetFramebufferParameterfvAMD);
pub const glGetNamedFramebufferParameterfvAMD = GLEW_GET_FUN(__glewGetNamedFramebufferParameterfvAMD);
pub const glNamedFramebufferSamplePositionsfvAMD = GLEW_GET_FUN(__glewNamedFramebufferSamplePositionsfvAMD);
pub const GLEW_AMD_framebuffer_sample_positions = GLEW_GET_VAR(__GLEW_AMD_framebuffer_sample_positions);
pub const GL_AMD_gcn_shader = @as(c_int, 1);
pub const GLEW_AMD_gcn_shader = GLEW_GET_VAR(__GLEW_AMD_gcn_shader);
pub const GL_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const GL_FLOAT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF8, .hexadecimal);
pub const GL_FLOAT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF9, .hexadecimal);
pub const GL_FLOAT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFA, .hexadecimal);
pub const GL_FLOAT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFB, .hexadecimal);
pub const GL_FLOAT16_MAT2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C5, .hexadecimal);
pub const GL_FLOAT16_MAT3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C6, .hexadecimal);
pub const GL_FLOAT16_MAT4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C7, .hexadecimal);
pub const GL_FLOAT16_MAT2x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C8, .hexadecimal);
pub const GL_FLOAT16_MAT2x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C9, .hexadecimal);
pub const GL_FLOAT16_MAT3x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CA, .hexadecimal);
pub const GL_FLOAT16_MAT3x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CB, .hexadecimal);
pub const GL_FLOAT16_MAT4x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CC, .hexadecimal);
pub const GL_FLOAT16_MAT4x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CD, .hexadecimal);
pub const GLEW_AMD_gpu_shader_half_float = GLEW_GET_VAR(__GLEW_AMD_gpu_shader_half_float);
pub const GL_AMD_gpu_shader_half_float_fetch = @as(c_int, 1);
pub const GL_FLOAT16_SAMPLER_1D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CE, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CF, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_3D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D0, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_CUBE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D1, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_RECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D2, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_1D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D3, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D4, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_CUBE_MAP_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D5, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D6, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_MULTISAMPLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D7, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_MULTISAMPLE_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D8, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_1D_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91D9, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DA, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_RECT_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DB, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_1D_ARRAY_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DC, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_2D_ARRAY_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DD, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_CUBE_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DE, .hexadecimal);
pub const GL_FLOAT16_SAMPLER_CUBE_MAP_ARRAY_SHADOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91DF, .hexadecimal);
pub const GL_FLOAT16_IMAGE_1D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E0, .hexadecimal);
pub const GL_FLOAT16_IMAGE_2D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E1, .hexadecimal);
pub const GL_FLOAT16_IMAGE_3D_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E2, .hexadecimal);
pub const GL_FLOAT16_IMAGE_2D_RECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E3, .hexadecimal);
pub const GL_FLOAT16_IMAGE_CUBE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E4, .hexadecimal);
pub const GL_FLOAT16_IMAGE_1D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E5, .hexadecimal);
pub const GL_FLOAT16_IMAGE_2D_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E6, .hexadecimal);
pub const GL_FLOAT16_IMAGE_CUBE_MAP_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E7, .hexadecimal);
pub const GL_FLOAT16_IMAGE_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E8, .hexadecimal);
pub const GL_FLOAT16_IMAGE_2D_MULTISAMPLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91E9, .hexadecimal);
pub const GL_FLOAT16_IMAGE_2D_MULTISAMPLE_ARRAY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91EA, .hexadecimal);
pub const GLEW_AMD_gpu_shader_half_float_fetch = GLEW_GET_VAR(__GLEW_AMD_gpu_shader_half_float_fetch);
pub const GL_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const GLEW_AMD_gpu_shader_int16 = GLEW_GET_VAR(__GLEW_AMD_gpu_shader_int16);
pub const GL_AMD_gpu_shader_int64 = @as(c_int, 1);
pub const GLEW_AMD_gpu_shader_int64 = GLEW_GET_VAR(__GLEW_AMD_gpu_shader_int64);
pub const GL_AMD_interleaved_elements = @as(c_int, 1);
pub const GL_RG8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8238, .hexadecimal);
pub const GL_RG16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823A, .hexadecimal);
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A4, .hexadecimal);
pub const GL_VERTEX_ID_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A5, .hexadecimal);
pub const glVertexAttribParameteriAMD = GLEW_GET_FUN(__glewVertexAttribParameteriAMD);
pub const GLEW_AMD_interleaved_elements = GLEW_GET_VAR(__GLEW_AMD_interleaved_elements);
pub const GL_AMD_multi_draw_indirect = @as(c_int, 1);
pub const glMultiDrawArraysIndirectAMD = GLEW_GET_FUN(__glewMultiDrawArraysIndirectAMD);
pub const glMultiDrawElementsIndirectAMD = GLEW_GET_FUN(__glewMultiDrawElementsIndirectAMD);
pub const GLEW_AMD_multi_draw_indirect = GLEW_GET_VAR(__GLEW_AMD_multi_draw_indirect);
pub const GL_AMD_name_gen_delete = @as(c_int, 1);
pub const GL_DATA_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hexadecimal);
pub const GL_PERFORMANCE_MONITOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9152, .hexadecimal);
pub const GL_QUERY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hexadecimal);
pub const GL_VERTEX_ARRAY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hexadecimal);
pub const GL_SAMPLER_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9155, .hexadecimal);
pub const glDeleteNamesAMD = GLEW_GET_FUN(__glewDeleteNamesAMD);
pub const glGenNamesAMD = GLEW_GET_FUN(__glewGenNamesAMD);
pub const glIsNameAMD = GLEW_GET_FUN(__glewIsNameAMD);
pub const GLEW_AMD_name_gen_delete = GLEW_GET_VAR(__GLEW_AMD_name_gen_delete);
pub const GL_AMD_occlusion_query_event = @as(c_int, 1);
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000002);
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000004);
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000008);
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874F, .hexadecimal);
pub const GL_QUERY_ALL_EVENT_BITS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const glQueryObjectParameteruiAMD = GLEW_GET_FUN(__glewQueryObjectParameteruiAMD);
pub const GLEW_AMD_occlusion_query_event = GLEW_GET_VAR(__GLEW_AMD_occlusion_query_event);
pub const GL_AMD_performance_monitor = @as(c_int, 1);
pub const GL_COUNTER_TYPE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC0, .hexadecimal);
pub const GL_COUNTER_RANGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC1, .hexadecimal);
pub const GL_UNSIGNED_INT64_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC2, .hexadecimal);
pub const GL_PERCENTAGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC3, .hexadecimal);
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC4, .hexadecimal);
pub const GL_PERFMON_RESULT_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC5, .hexadecimal);
pub const GL_PERFMON_RESULT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC6, .hexadecimal);
pub const glBeginPerfMonitorAMD = GLEW_GET_FUN(__glewBeginPerfMonitorAMD);
pub const glDeletePerfMonitorsAMD = GLEW_GET_FUN(__glewDeletePerfMonitorsAMD);
pub const glEndPerfMonitorAMD = GLEW_GET_FUN(__glewEndPerfMonitorAMD);
pub const glGenPerfMonitorsAMD = GLEW_GET_FUN(__glewGenPerfMonitorsAMD);
pub const glGetPerfMonitorCounterDataAMD = GLEW_GET_FUN(__glewGetPerfMonitorCounterDataAMD);
pub const glGetPerfMonitorCounterInfoAMD = GLEW_GET_FUN(__glewGetPerfMonitorCounterInfoAMD);
pub const glGetPerfMonitorCounterStringAMD = GLEW_GET_FUN(__glewGetPerfMonitorCounterStringAMD);
pub const glGetPerfMonitorCountersAMD = GLEW_GET_FUN(__glewGetPerfMonitorCountersAMD);
pub const glGetPerfMonitorGroupStringAMD = GLEW_GET_FUN(__glewGetPerfMonitorGroupStringAMD);
pub const glGetPerfMonitorGroupsAMD = GLEW_GET_FUN(__glewGetPerfMonitorGroupsAMD);
pub const glSelectPerfMonitorCountersAMD = GLEW_GET_FUN(__glewSelectPerfMonitorCountersAMD);
pub const GLEW_AMD_performance_monitor = GLEW_GET_VAR(__GLEW_AMD_performance_monitor);
pub const GL_AMD_pinned_memory = @as(c_int, 1);
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9160, .hexadecimal);
pub const GLEW_AMD_pinned_memory = GLEW_GET_VAR(__GLEW_AMD_pinned_memory);
pub const GL_AMD_program_binary_Z400 = @as(c_int, 1);
pub const GL_Z400_BINARY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hexadecimal);
pub const GLEW_AMD_program_binary_Z400 = GLEW_GET_VAR(__GLEW_AMD_program_binary_Z400);
pub const GL_AMD_query_buffer_object = @as(c_int, 1);
pub const GL_QUERY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const GL_QUERY_BUFFER_BINDING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const GL_QUERY_RESULT_NO_WAIT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const GLEW_AMD_query_buffer_object = GLEW_GET_VAR(__GLEW_AMD_query_buffer_object);
pub const GL_AMD_sample_positions = @as(c_int, 1);
pub const glSetMultisamplefvAMD = GLEW_GET_FUN(__glewSetMultisamplefvAMD);
pub const GLEW_AMD_sample_positions = GLEW_GET_VAR(__GLEW_AMD_sample_positions);
pub const GL_AMD_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884F, .hexadecimal);
pub const GLEW_AMD_seamless_cubemap_per_texture = GLEW_GET_VAR(__GLEW_AMD_seamless_cubemap_per_texture);
pub const GL_AMD_shader_atomic_counter_ops = @as(c_int, 1);
pub const GLEW_AMD_shader_atomic_counter_ops = GLEW_GET_VAR(__GLEW_AMD_shader_atomic_counter_ops);
pub const GL_AMD_shader_ballot = @as(c_int, 1);
pub const GLEW_AMD_shader_ballot = GLEW_GET_VAR(__GLEW_AMD_shader_ballot);
pub const GL_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const GLEW_AMD_shader_explicit_vertex_parameter = GLEW_GET_VAR(__GLEW_AMD_shader_explicit_vertex_parameter);
pub const GL_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const GLEW_AMD_shader_image_load_store_lod = GLEW_GET_VAR(__GLEW_AMD_shader_image_load_store_lod);
pub const GL_AMD_shader_stencil_export = @as(c_int, 1);
pub const GLEW_AMD_shader_stencil_export = GLEW_GET_VAR(__GLEW_AMD_shader_stencil_export);
pub const GL_AMD_shader_stencil_value_export = @as(c_int, 1);
pub const GLEW_AMD_shader_stencil_value_export = GLEW_GET_VAR(__GLEW_AMD_shader_stencil_value_export);
pub const GL_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const GLEW_AMD_shader_trinary_minmax = GLEW_GET_VAR(__GLEW_AMD_shader_trinary_minmax);
pub const GL_AMD_sparse_texture = @as(c_int, 1);
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_MIN_SPARSE_LEVEL_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919B, .hexadecimal);
pub const GL_MIN_LOD_WARNING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919C, .hexadecimal);
pub const glTexStorageSparseAMD = GLEW_GET_FUN(__glewTexStorageSparseAMD);
pub const glTextureStorageSparseAMD = GLEW_GET_FUN(__glewTextureStorageSparseAMD);
pub const GLEW_AMD_sparse_texture = GLEW_GET_VAR(__GLEW_AMD_sparse_texture);
pub const GL_AMD_stencil_operation_extended = @as(c_int, 1);
pub const GL_SET_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874A, .hexadecimal);
pub const GL_REPLACE_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874B, .hexadecimal);
pub const GL_STENCIL_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874C, .hexadecimal);
pub const GL_STENCIL_BACK_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874D, .hexadecimal);
pub const glStencilOpValueAMD = GLEW_GET_FUN(__glewStencilOpValueAMD);
pub const GLEW_AMD_stencil_operation_extended = GLEW_GET_VAR(__GLEW_AMD_stencil_operation_extended);
pub const GL_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const GLEW_AMD_texture_gather_bias_lod = GLEW_GET_VAR(__GLEW_AMD_texture_gather_bias_lod);
pub const GL_AMD_texture_texture4 = @as(c_int, 1);
pub const GLEW_AMD_texture_texture4 = GLEW_GET_VAR(__GLEW_AMD_texture_texture4);
pub const GL_AMD_transform_feedback3_lines_triangles = @as(c_int, 1);
pub const GLEW_AMD_transform_feedback3_lines_triangles = GLEW_GET_VAR(__GLEW_AMD_transform_feedback3_lines_triangles);
pub const GL_AMD_transform_feedback4 = @as(c_int, 1);
pub const GL_STREAM_RASTERIZATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A0, .hexadecimal);
pub const GLEW_AMD_transform_feedback4 = GLEW_GET_VAR(__GLEW_AMD_transform_feedback4);
pub const GL_AMD_vertex_shader_layer = @as(c_int, 1);
pub const GLEW_AMD_vertex_shader_layer = GLEW_GET_VAR(__GLEW_AMD_vertex_shader_layer);
pub const GL_AMD_vertex_shader_tessellator = @as(c_int, 1);
pub const GL_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9001, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9002, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9003, .hexadecimal);
pub const GL_TESSELLATION_MODE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9004, .hexadecimal);
pub const GL_TESSELLATION_FACTOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9005, .hexadecimal);
pub const GL_DISCRETE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9006, .hexadecimal);
pub const GL_CONTINUOUS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9007, .hexadecimal);
pub const glTessellationFactorAMD = GLEW_GET_FUN(__glewTessellationFactorAMD);
pub const glTessellationModeAMD = GLEW_GET_FUN(__glewTessellationModeAMD);
pub const GLEW_AMD_vertex_shader_tessellator = GLEW_GET_VAR(__GLEW_AMD_vertex_shader_tessellator);
pub const GL_AMD_vertex_shader_viewport_index = @as(c_int, 1);
pub const GLEW_AMD_vertex_shader_viewport_index = GLEW_GET_VAR(__GLEW_AMD_vertex_shader_viewport_index);
pub const GL_ANDROID_extension_pack_es31a = @as(c_int, 1);
pub const GLEW_ANDROID_extension_pack_es31a = GLEW_GET_VAR(__GLEW_ANDROID_extension_pack_es31a);
pub const GL_ANGLE_depth_texture = @as(c_int, 1);
pub const GLEW_ANGLE_depth_texture = GLEW_GET_VAR(__GLEW_ANGLE_depth_texture);
pub const GL_ANGLE_framebuffer_blit = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const glBlitFramebufferANGLE = GLEW_GET_FUN(__glewBlitFramebufferANGLE);
pub const GLEW_ANGLE_framebuffer_blit = GLEW_GET_VAR(__GLEW_ANGLE_framebuffer_blit);
pub const GL_ANGLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_MAX_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const glRenderbufferStorageMultisampleANGLE = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleANGLE);
pub const GLEW_ANGLE_framebuffer_multisample = GLEW_GET_VAR(__GLEW_ANGLE_framebuffer_multisample);
pub const GL_ANGLE_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const glDrawArraysInstancedANGLE = GLEW_GET_FUN(__glewDrawArraysInstancedANGLE);
pub const glDrawElementsInstancedANGLE = GLEW_GET_FUN(__glewDrawElementsInstancedANGLE);
pub const glVertexAttribDivisorANGLE = GLEW_GET_FUN(__glewVertexAttribDivisorANGLE);
pub const GLEW_ANGLE_instanced_arrays = GLEW_GET_VAR(__GLEW_ANGLE_instanced_arrays);
pub const GL_ANGLE_pack_reverse_row_order = @as(c_int, 1);
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A4, .hexadecimal);
pub const GLEW_ANGLE_pack_reverse_row_order = GLEW_GET_VAR(__GLEW_ANGLE_pack_reverse_row_order);
pub const GL_ANGLE_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A6, .hexadecimal);
pub const GLEW_ANGLE_program_binary = GLEW_GET_VAR(__GLEW_ANGLE_program_binary);
pub const GL_ANGLE_texture_compression_dxt1 = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hexadecimal);
pub const GLEW_ANGLE_texture_compression_dxt1 = GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt1);
pub const GL_ANGLE_texture_compression_dxt3 = @as(c_int, 1);
pub const GLEW_ANGLE_texture_compression_dxt3 = GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt3);
pub const GL_ANGLE_texture_compression_dxt5 = @as(c_int, 1);
pub const GLEW_ANGLE_texture_compression_dxt5 = GLEW_GET_VAR(__GLEW_ANGLE_texture_compression_dxt5);
pub const GL_ANGLE_texture_usage = @as(c_int, 1);
pub const GL_TEXTURE_USAGE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A3, .hexadecimal);
pub const GLEW_ANGLE_texture_usage = GLEW_GET_VAR(__GLEW_ANGLE_texture_usage);
pub const GL_ANGLE_timer_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_QUERY_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_QUERY_RESULT_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_TIME_ELAPSED_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_TIMESTAMP_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const glBeginQueryANGLE = GLEW_GET_FUN(__glewBeginQueryANGLE);
pub const glDeleteQueriesANGLE = GLEW_GET_FUN(__glewDeleteQueriesANGLE);
pub const glEndQueryANGLE = GLEW_GET_FUN(__glewEndQueryANGLE);
pub const glGenQueriesANGLE = GLEW_GET_FUN(__glewGenQueriesANGLE);
pub const glGetQueryObjecti64vANGLE = GLEW_GET_FUN(__glewGetQueryObjecti64vANGLE);
pub const glGetQueryObjectivANGLE = GLEW_GET_FUN(__glewGetQueryObjectivANGLE);
pub const glGetQueryObjectui64vANGLE = GLEW_GET_FUN(__glewGetQueryObjectui64vANGLE);
pub const glGetQueryObjectuivANGLE = GLEW_GET_FUN(__glewGetQueryObjectuivANGLE);
pub const glGetQueryivANGLE = GLEW_GET_FUN(__glewGetQueryivANGLE);
pub const glIsQueryANGLE = GLEW_GET_FUN(__glewIsQueryANGLE);
pub const glQueryCounterANGLE = GLEW_GET_FUN(__glewQueryCounterANGLE);
pub const GLEW_ANGLE_timer_query = GLEW_GET_VAR(__GLEW_ANGLE_timer_query);
pub const GL_ANGLE_translated_shader_source = @as(c_int, 1);
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A0, .hexadecimal);
pub const glGetTranslatedShaderSourceANGLE = GLEW_GET_FUN(__glewGetTranslatedShaderSourceANGLE);
pub const GLEW_ANGLE_translated_shader_source = GLEW_GET_VAR(__GLEW_ANGLE_translated_shader_source);
pub const GL_APPLE_aux_depth_stencil = @as(c_int, 1);
pub const GL_AUX_DEPTH_STENCIL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A14, .hexadecimal);
pub const GLEW_APPLE_aux_depth_stencil = GLEW_GET_VAR(__GLEW_APPLE_aux_depth_stencil);
pub const GL_APPLE_client_storage = @as(c_int, 1);
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B2, .hexadecimal);
pub const GLEW_APPLE_client_storage = GLEW_GET_VAR(__GLEW_APPLE_client_storage);
pub const GL_APPLE_clip_distance = @as(c_int, 1);
pub const GL_MAX_CLIP_DISTANCES_APPLE = @as(c_int, 0x0D32);
pub const GL_CLIP_DISTANCE0_APPLE = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1_APPLE = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2_APPLE = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3_APPLE = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4_APPLE = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5_APPLE = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6_APPLE = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7_APPLE = @as(c_int, 0x3007);
pub const GLEW_APPLE_clip_distance = GLEW_GET_VAR(__GLEW_APPLE_clip_distance);
pub const GL_APPLE_color_buffer_packed_float = @as(c_int, 1);
pub const GLEW_APPLE_color_buffer_packed_float = GLEW_GET_VAR(__GLEW_APPLE_color_buffer_packed_float);
pub const GL_APPLE_copy_texture_levels = @as(c_int, 1);
pub const glCopyTextureLevelsAPPLE = GLEW_GET_FUN(__glewCopyTextureLevelsAPPLE);
pub const GLEW_APPLE_copy_texture_levels = GLEW_GET_VAR(__GLEW_APPLE_copy_texture_levels);
pub const GL_APPLE_element_array = @as(c_int, 1);
pub const GL_ELEMENT_ARRAY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0C, .hexadecimal);
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0D, .hexadecimal);
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0E, .hexadecimal);
pub const glDrawElementArrayAPPLE = GLEW_GET_FUN(__glewDrawElementArrayAPPLE);
pub const glDrawRangeElementArrayAPPLE = GLEW_GET_FUN(__glewDrawRangeElementArrayAPPLE);
pub const glElementPointerAPPLE = GLEW_GET_FUN(__glewElementPointerAPPLE);
pub const glMultiDrawElementArrayAPPLE = GLEW_GET_FUN(__glewMultiDrawElementArrayAPPLE);
pub const glMultiDrawRangeElementArrayAPPLE = GLEW_GET_FUN(__glewMultiDrawRangeElementArrayAPPLE);
pub const GLEW_APPLE_element_array = GLEW_GET_VAR(__GLEW_APPLE_element_array);
pub const GL_APPLE_fence = @as(c_int, 1);
pub const GL_DRAW_PIXELS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0A, .hexadecimal);
pub const GL_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0B, .hexadecimal);
pub const glDeleteFencesAPPLE = GLEW_GET_FUN(__glewDeleteFencesAPPLE);
pub const glFinishFenceAPPLE = GLEW_GET_FUN(__glewFinishFenceAPPLE);
pub const glFinishObjectAPPLE = GLEW_GET_FUN(__glewFinishObjectAPPLE);
pub const glGenFencesAPPLE = GLEW_GET_FUN(__glewGenFencesAPPLE);
pub const glIsFenceAPPLE = GLEW_GET_FUN(__glewIsFenceAPPLE);
pub const glSetFenceAPPLE = GLEW_GET_FUN(__glewSetFenceAPPLE);
pub const glTestFenceAPPLE = GLEW_GET_FUN(__glewTestFenceAPPLE);
pub const glTestObjectAPPLE = GLEW_GET_FUN(__glewTestObjectAPPLE);
pub const GLEW_APPLE_fence = GLEW_GET_VAR(__GLEW_APPLE_fence);
pub const GL_APPLE_float_pixels = @as(c_int, 1);
pub const GL_HALF_APPLE = @as(c_int, 0x140B);
pub const GL_RGBA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGB_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_INTENSITY_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_LUMINANCE_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_RGBA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGB_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_INTENSITY_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_LUMINANCE_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_COLOR_FLOAT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0F, .hexadecimal);
pub const GLEW_APPLE_float_pixels = GLEW_GET_VAR(__GLEW_APPLE_float_pixels);
pub const GL_APPLE_flush_buffer_range = @as(c_int, 1);
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A12, .hexadecimal);
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A13, .hexadecimal);
pub const glBufferParameteriAPPLE = GLEW_GET_FUN(__glewBufferParameteriAPPLE);
pub const glFlushMappedBufferRangeAPPLE = GLEW_GET_FUN(__glewFlushMappedBufferRangeAPPLE);
pub const GLEW_APPLE_flush_buffer_range = GLEW_GET_VAR(__GLEW_APPLE_flush_buffer_range);
pub const GL_APPLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_MAX_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const glRenderbufferStorageMultisampleAPPLE = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAPPLE);
pub const glResolveMultisampleFramebufferAPPLE = GLEW_GET_FUN(__glewResolveMultisampleFramebufferAPPLE);
pub const GLEW_APPLE_framebuffer_multisample = GLEW_GET_VAR(__GLEW_APPLE_framebuffer_multisample);
pub const GL_APPLE_object_purgeable = @as(c_int, 1);
pub const GL_BUFFER_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B3, .hexadecimal);
pub const GL_RELEASED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A19, .hexadecimal);
pub const GL_VOLATILE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1A, .hexadecimal);
pub const GL_RETAINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1B, .hexadecimal);
pub const GL_UNDEFINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1C, .hexadecimal);
pub const GL_PURGEABLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1D, .hexadecimal);
pub const glGetObjectParameterivAPPLE = GLEW_GET_FUN(__glewGetObjectParameterivAPPLE);
pub const glObjectPurgeableAPPLE = GLEW_GET_FUN(__glewObjectPurgeableAPPLE);
pub const glObjectUnpurgeableAPPLE = GLEW_GET_FUN(__glewObjectUnpurgeableAPPLE);
pub const GLEW_APPLE_object_purgeable = GLEW_GET_VAR(__GLEW_APPLE_object_purgeable);
pub const GL_APPLE_pixel_buffer = @as(c_int, 1);
pub const GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A10, .hexadecimal);
pub const GLEW_APPLE_pixel_buffer = GLEW_GET_VAR(__GLEW_APPLE_pixel_buffer);
pub const GL_APPLE_rgb_422 = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_8_8_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hexadecimal);
pub const GL_RGB_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1F, .hexadecimal);
pub const GL_RGB_RAW_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A51, .hexadecimal);
pub const GLEW_APPLE_rgb_422 = GLEW_GET_VAR(__GLEW_APPLE_rgb_422);
pub const GL_APPLE_row_bytes = @as(c_int, 1);
pub const GL_PACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A15, .hexadecimal);
pub const GL_UNPACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A16, .hexadecimal);
pub const GLEW_APPLE_row_bytes = GLEW_GET_VAR(__GLEW_APPLE_row_bytes);
pub const GL_APPLE_specular_vector = @as(c_int, 1);
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B0, .hexadecimal);
pub const GLEW_APPLE_specular_vector = GLEW_GET_VAR(__GLEW_APPLE_specular_vector);
pub const GL_APPLE_sync = @as(c_int, 1);
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = @as(c_int, 0x00000001);
pub const GL_SYNC_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A53, .hexadecimal);
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hexadecimal);
pub const GL_OBJECT_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hexadecimal);
pub const GL_SYNC_CONDITION_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hexadecimal);
pub const GL_SYNC_STATUS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hexadecimal);
pub const GL_SYNC_FLAGS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hexadecimal);
pub const GL_SYNC_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hexadecimal);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hexadecimal);
pub const GL_UNSIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hexadecimal);
pub const GL_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hexadecimal);
pub const GL_ALREADY_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hexadecimal);
pub const GL_TIMEOUT_EXPIRED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hexadecimal);
pub const GL_CONDITION_SATISFIED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hexadecimal);
pub const GL_WAIT_FAILED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hexadecimal);
pub const GL_TIMEOUT_IGNORED_APPLE = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const glClientWaitSyncAPPLE = GLEW_GET_FUN(__glewClientWaitSyncAPPLE);
pub const glDeleteSyncAPPLE = GLEW_GET_FUN(__glewDeleteSyncAPPLE);
pub const glFenceSyncAPPLE = GLEW_GET_FUN(__glewFenceSyncAPPLE);
pub const glGetInteger64vAPPLE = GLEW_GET_FUN(__glewGetInteger64vAPPLE);
pub const glGetSyncivAPPLE = GLEW_GET_FUN(__glewGetSyncivAPPLE);
pub const glIsSyncAPPLE = GLEW_GET_FUN(__glewIsSyncAPPLE);
pub const glWaitSyncAPPLE = GLEW_GET_FUN(__glewWaitSyncAPPLE);
pub const GLEW_APPLE_sync = GLEW_GET_VAR(__GLEW_APPLE_sync);
pub const GL_APPLE_texture_2D_limited_npot = @as(c_int, 1);
pub const GLEW_APPLE_texture_2D_limited_npot = GLEW_GET_VAR(__GLEW_APPLE_texture_2D_limited_npot);
pub const GL_APPLE_texture_format_BGRA8888 = @as(c_int, 1);
pub const GL_BGRA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_BGRA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A1, .hexadecimal);
pub const GLEW_APPLE_texture_format_BGRA8888 = GLEW_GET_VAR(__GLEW_APPLE_texture_format_BGRA8888);
pub const GL_APPLE_texture_max_level = @as(c_int, 1);
pub const GL_TEXTURE_MAX_LEVEL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GLEW_APPLE_texture_max_level = GLEW_GET_VAR(__GLEW_APPLE_texture_max_level);
pub const GL_APPLE_texture_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_RGB9_E5_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GLEW_APPLE_texture_packed_float = GLEW_GET_VAR(__GLEW_APPLE_texture_packed_float);
pub const GL_APPLE_texture_range = @as(c_int, 1);
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B7, .hexadecimal);
pub const GL_TEXTURE_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B8, .hexadecimal);
pub const GL_TEXTURE_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BC, .hexadecimal);
pub const GL_STORAGE_PRIVATE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BD, .hexadecimal);
pub const GL_STORAGE_CACHED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BE, .hexadecimal);
pub const GL_STORAGE_SHARED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BF, .hexadecimal);
pub const glGetTexParameterPointervAPPLE = GLEW_GET_FUN(__glewGetTexParameterPointervAPPLE);
pub const glTextureRangeAPPLE = GLEW_GET_FUN(__glewTextureRangeAPPLE);
pub const GLEW_APPLE_texture_range = GLEW_GET_VAR(__GLEW_APPLE_texture_range);
pub const GL_APPLE_transform_hint = @as(c_int, 1);
pub const GL_TRANSFORM_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B1, .hexadecimal);
pub const GLEW_APPLE_transform_hint = GLEW_GET_VAR(__GLEW_APPLE_transform_hint);
pub const GL_APPLE_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const glBindVertexArrayAPPLE = GLEW_GET_FUN(__glewBindVertexArrayAPPLE);
pub const glDeleteVertexArraysAPPLE = GLEW_GET_FUN(__glewDeleteVertexArraysAPPLE);
pub const glGenVertexArraysAPPLE = GLEW_GET_FUN(__glewGenVertexArraysAPPLE);
pub const glIsVertexArrayAPPLE = GLEW_GET_FUN(__glewIsVertexArrayAPPLE);
pub const GLEW_APPLE_vertex_array_object = GLEW_GET_VAR(__GLEW_APPLE_vertex_array_object);
pub const GL_APPLE_vertex_array_range = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hexadecimal);
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hexadecimal);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hexadecimal);
pub const GL_STORAGE_CLIENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B4, .hexadecimal);
pub const glFlushVertexArrayRangeAPPLE = GLEW_GET_FUN(__glewFlushVertexArrayRangeAPPLE);
pub const glVertexArrayParameteriAPPLE = GLEW_GET_FUN(__glewVertexArrayParameteriAPPLE);
pub const glVertexArrayRangeAPPLE = GLEW_GET_FUN(__glewVertexArrayRangeAPPLE);
pub const GLEW_APPLE_vertex_array_range = GLEW_GET_VAR(__GLEW_APPLE_vertex_array_range);
pub const GL_APPLE_vertex_program_evaluators = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A00, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A01, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A02, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A03, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A04, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A05, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A06, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A07, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A08, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A09, .hexadecimal);
pub const glDisableVertexAttribAPPLE = GLEW_GET_FUN(__glewDisableVertexAttribAPPLE);
pub const glEnableVertexAttribAPPLE = GLEW_GET_FUN(__glewEnableVertexAttribAPPLE);
pub const glIsVertexAttribEnabledAPPLE = GLEW_GET_FUN(__glewIsVertexAttribEnabledAPPLE);
pub const glMapVertexAttrib1dAPPLE = GLEW_GET_FUN(__glewMapVertexAttrib1dAPPLE);
pub const glMapVertexAttrib1fAPPLE = GLEW_GET_FUN(__glewMapVertexAttrib1fAPPLE);
pub const glMapVertexAttrib2dAPPLE = GLEW_GET_FUN(__glewMapVertexAttrib2dAPPLE);
pub const glMapVertexAttrib2fAPPLE = GLEW_GET_FUN(__glewMapVertexAttrib2fAPPLE);
pub const GLEW_APPLE_vertex_program_evaluators = GLEW_GET_VAR(__GLEW_APPLE_vertex_program_evaluators);
pub const GL_APPLE_ycbcr_422 = @as(c_int, 1);
pub const GL_YCBCR_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B9, .hexadecimal);
pub const GLEW_APPLE_ycbcr_422 = GLEW_GET_VAR(__GLEW_APPLE_ycbcr_422);
pub const GL_ARB_ES2_compatibility = @as(c_int, 1);
pub const GL_FIXED = @as(c_int, 0x140C);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const GL_RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hexadecimal);
pub const GL_LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hexadecimal);
pub const GL_MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hexadecimal);
pub const GL_HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hexadecimal);
pub const GL_LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hexadecimal);
pub const GL_MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hexadecimal);
pub const GL_HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hexadecimal);
pub const GL_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hexadecimal);
pub const GL_NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hexadecimal);
pub const GL_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hexadecimal);
pub const GL_MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hexadecimal);
pub const glClearDepthf = GLEW_GET_FUN(__glewClearDepthf);
pub const glDepthRangef = GLEW_GET_FUN(__glewDepthRangef);
pub const glGetShaderPrecisionFormat = GLEW_GET_FUN(__glewGetShaderPrecisionFormat);
pub const glReleaseShaderCompiler = GLEW_GET_FUN(__glewReleaseShaderCompiler);
pub const glShaderBinary = GLEW_GET_FUN(__glewShaderBinary);
pub const GLEW_ARB_ES2_compatibility = GLEW_GET_VAR(__GLEW_ARB_ES2_compatibility);
pub const GL_ARB_ES3_1_compatibility = @as(c_int, 1);
pub const glMemoryBarrierByRegion = GLEW_GET_FUN(__glewMemoryBarrierByRegion);
pub const GLEW_ARB_ES3_1_compatibility = GLEW_GET_VAR(__GLEW_ARB_ES3_1_compatibility);
pub const GL_ARB_ES3_2_compatibility = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9381, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9382, .hexadecimal);
pub const glPrimitiveBoundingBoxARB = GLEW_GET_FUN(__glewPrimitiveBoundingBoxARB);
pub const GLEW_ARB_ES3_2_compatibility = GLEW_GET_VAR(__GLEW_ARB_ES3_2_compatibility);
pub const GL_ARB_ES3_compatibility = @as(c_int, 1);
pub const GL_TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D69, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hexadecimal);
pub const GL_MAX_ELEMENT_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6B, .hexadecimal);
pub const GL_COMPRESSED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hexadecimal);
pub const GL_COMPRESSED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hexadecimal);
pub const GL_COMPRESSED_RGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hexadecimal);
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hexadecimal);
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hexadecimal);
pub const GLEW_ARB_ES3_compatibility = GLEW_GET_VAR(__GLEW_ARB_ES3_compatibility);
pub const GL_ARB_arrays_of_arrays = @as(c_int, 1);
pub const GLEW_ARB_arrays_of_arrays = GLEW_GET_VAR(__GLEW_ARB_arrays_of_arrays);
pub const GL_ARB_base_instance = @as(c_int, 1);
pub const glDrawArraysInstancedBaseInstance = GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstance);
pub const glDrawElementsInstancedBaseInstance = GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstance);
pub const glDrawElementsInstancedBaseVertexBaseInstance = GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstance);
pub const GLEW_ARB_base_instance = GLEW_GET_VAR(__GLEW_ARB_base_instance);
pub const GL_ARB_bindless_texture = @as(c_int, 1);
pub const GL_UNSIGNED_INT64_ARB = @as(c_int, 0x140F);
pub const glGetImageHandleARB = GLEW_GET_FUN(__glewGetImageHandleARB);
pub const glGetTextureHandleARB = GLEW_GET_FUN(__glewGetTextureHandleARB);
pub const glGetTextureSamplerHandleARB = GLEW_GET_FUN(__glewGetTextureSamplerHandleARB);
pub const glGetVertexAttribLui64vARB = GLEW_GET_FUN(__glewGetVertexAttribLui64vARB);
pub const glIsImageHandleResidentARB = GLEW_GET_FUN(__glewIsImageHandleResidentARB);
pub const glIsTextureHandleResidentARB = GLEW_GET_FUN(__glewIsTextureHandleResidentARB);
pub const glMakeImageHandleNonResidentARB = GLEW_GET_FUN(__glewMakeImageHandleNonResidentARB);
pub const glMakeImageHandleResidentARB = GLEW_GET_FUN(__glewMakeImageHandleResidentARB);
pub const glMakeTextureHandleNonResidentARB = GLEW_GET_FUN(__glewMakeTextureHandleNonResidentARB);
pub const glMakeTextureHandleResidentARB = GLEW_GET_FUN(__glewMakeTextureHandleResidentARB);
pub const glProgramUniformHandleui64ARB = GLEW_GET_FUN(__glewProgramUniformHandleui64ARB);
pub const glProgramUniformHandleui64vARB = GLEW_GET_FUN(__glewProgramUniformHandleui64vARB);
pub const glUniformHandleui64ARB = GLEW_GET_FUN(__glewUniformHandleui64ARB);
pub const glUniformHandleui64vARB = GLEW_GET_FUN(__glewUniformHandleui64vARB);
pub const glVertexAttribL1ui64ARB = GLEW_GET_FUN(__glewVertexAttribL1ui64ARB);
pub const glVertexAttribL1ui64vARB = GLEW_GET_FUN(__glewVertexAttribL1ui64vARB);
pub const GLEW_ARB_bindless_texture = GLEW_GET_VAR(__GLEW_ARB_bindless_texture);
pub const GL_ARB_blend_func_extended = @as(c_int, 1);
pub const GL_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hexadecimal);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hexadecimal);
pub const glBindFragDataLocationIndexed = GLEW_GET_FUN(__glewBindFragDataLocationIndexed);
pub const glGetFragDataIndex = GLEW_GET_FUN(__glewGetFragDataIndex);
pub const GLEW_ARB_blend_func_extended = GLEW_GET_VAR(__GLEW_ARB_blend_func_extended);
pub const GL_ARB_buffer_storage = @as(c_int, 1);
pub const GL_MAP_READ_BIT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const GL_MAP_PERSISTENT_BIT = @as(c_int, 0x00000040);
pub const GL_MAP_COHERENT_BIT = @as(c_int, 0x00000080);
pub const GL_DYNAMIC_STORAGE_BIT = @as(c_int, 0x0100);
pub const GL_CLIENT_STORAGE_BIT = @as(c_int, 0x0200);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = @as(c_int, 0x00004000);
pub const GL_BUFFER_IMMUTABLE_STORAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hexadecimal);
pub const GL_BUFFER_STORAGE_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hexadecimal);
pub const glBufferStorage = GLEW_GET_FUN(__glewBufferStorage);
pub const GLEW_ARB_buffer_storage = GLEW_GET_VAR(__GLEW_ARB_buffer_storage);
pub const GL_ARB_cl_event = @as(c_int, 1);
pub const GL_SYNC_CL_EVENT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8240, .hexadecimal);
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8241, .hexadecimal);
pub const glCreateSyncFromCLeventARB = GLEW_GET_FUN(__glewCreateSyncFromCLeventARB);
pub const GLEW_ARB_cl_event = GLEW_GET_VAR(__GLEW_ARB_cl_event);
pub const GL_ARB_clear_buffer_object = @as(c_int, 1);
pub const glClearBufferData = GLEW_GET_FUN(__glewClearBufferData);
pub const glClearBufferSubData = GLEW_GET_FUN(__glewClearBufferSubData);
pub const glClearNamedBufferDataEXT = GLEW_GET_FUN(__glewClearNamedBufferDataEXT);
pub const glClearNamedBufferSubDataEXT = GLEW_GET_FUN(__glewClearNamedBufferSubDataEXT);
pub const GLEW_ARB_clear_buffer_object = GLEW_GET_VAR(__GLEW_ARB_clear_buffer_object);
pub const GL_ARB_clear_texture = @as(c_int, 1);
pub const GL_CLEAR_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9365, .hexadecimal);
pub const glClearTexImage = GLEW_GET_FUN(__glewClearTexImage);
pub const glClearTexSubImage = GLEW_GET_FUN(__glewClearTexSubImage);
pub const GLEW_ARB_clear_texture = GLEW_GET_VAR(__GLEW_ARB_clear_texture);
pub const GL_ARB_clip_control = @as(c_int, 1);
pub const GL_CLIP_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hexadecimal);
pub const GL_CLIP_DEPTH_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hexadecimal);
pub const GL_NEGATIVE_ONE_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hexadecimal);
pub const GL_ZERO_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hexadecimal);
pub const glClipControl = GLEW_GET_FUN(__glewClipControl);
pub const GLEW_ARB_clip_control = GLEW_GET_VAR(__GLEW_ARB_clip_control);
pub const GL_ARB_color_buffer_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hexadecimal);
pub const GL_CLAMP_VERTEX_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hexadecimal);
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hexadecimal);
pub const GL_CLAMP_READ_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const GL_FIXED_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const glClampColorARB = GLEW_GET_FUN(__glewClampColorARB);
pub const GLEW_ARB_color_buffer_float = GLEW_GET_VAR(__GLEW_ARB_color_buffer_float);
pub const GL_ARB_compatibility = @as(c_int, 1);
pub const GLEW_ARB_compatibility = GLEW_GET_VAR(__GLEW_ARB_compatibility);
pub const GL_ARB_compressed_texture_pixel_storage = @as(c_int, 1);
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9127, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9128, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9129, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912A, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912B, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912C, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912D, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912E, .hexadecimal);
pub const GLEW_ARB_compressed_texture_pixel_storage = GLEW_GET_VAR(__GLEW_ARB_compressed_texture_pixel_storage);
pub const GL_ARB_compute_shader = @as(c_int, 1);
pub const GL_COMPUTE_SHADER_BIT = @as(c_int, 0x00000020);
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8262, .hexadecimal);
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8263, .hexadecimal);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8264, .hexadecimal);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8265, .hexadecimal);
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8266, .hexadecimal);
pub const GL_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8267, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EC, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90ED, .hexadecimal);
pub const GL_DISPATCH_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EE, .hexadecimal);
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EF, .hexadecimal);
pub const GL_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B9, .hexadecimal);
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BB, .hexadecimal);
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BC, .hexadecimal);
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BD, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BE, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const glDispatchCompute = GLEW_GET_FUN(__glewDispatchCompute);
pub const glDispatchComputeIndirect = GLEW_GET_FUN(__glewDispatchComputeIndirect);
pub const GLEW_ARB_compute_shader = GLEW_GET_VAR(__GLEW_ARB_compute_shader);
pub const GL_ARB_compute_variable_group_size = @as(c_int, 1);
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9344, .hexadecimal);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9345, .hexadecimal);
pub const glDispatchComputeGroupSizeARB = GLEW_GET_FUN(__glewDispatchComputeGroupSizeARB);
pub const GLEW_ARB_compute_variable_group_size = GLEW_GET_VAR(__GLEW_ARB_compute_variable_group_size);
pub const GL_ARB_conditional_render_inverted = @as(c_int, 1);
pub const GL_QUERY_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E17, .hexadecimal);
pub const GL_QUERY_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E18, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E19, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1A, .hexadecimal);
pub const GLEW_ARB_conditional_render_inverted = GLEW_GET_VAR(__GLEW_ARB_conditional_render_inverted);
pub const GL_ARB_conservative_depth = @as(c_int, 1);
pub const GLEW_ARB_conservative_depth = GLEW_GET_VAR(__GLEW_ARB_conservative_depth);
pub const GL_ARB_copy_buffer = @as(c_int, 1);
pub const GL_COPY_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const glCopyBufferSubData = GLEW_GET_FUN(__glewCopyBufferSubData);
pub const GLEW_ARB_copy_buffer = GLEW_GET_VAR(__GLEW_ARB_copy_buffer);
pub const GL_ARB_copy_image = @as(c_int, 1);
pub const glCopyImageSubData = GLEW_GET_FUN(__glewCopyImageSubData);
pub const GLEW_ARB_copy_image = GLEW_GET_VAR(__GLEW_ARB_copy_image);
pub const GL_ARB_cull_distance = @as(c_int, 1);
pub const GL_MAX_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hexadecimal);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hexadecimal);
pub const GLEW_ARB_cull_distance = GLEW_GET_VAR(__GLEW_ARB_cull_distance);
pub const GL_ARB_debug_output = @as(c_int, 1);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_SOURCE_API_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const glDebugMessageCallbackARB = GLEW_GET_FUN(__glewDebugMessageCallbackARB);
pub const glDebugMessageControlARB = GLEW_GET_FUN(__glewDebugMessageControlARB);
pub const glDebugMessageInsertARB = GLEW_GET_FUN(__glewDebugMessageInsertARB);
pub const glGetDebugMessageLogARB = GLEW_GET_FUN(__glewGetDebugMessageLogARB);
pub const GLEW_ARB_debug_output = GLEW_GET_VAR(__GLEW_ARB_debug_output);
pub const GL_ARB_depth_buffer_float = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAC, .hexadecimal);
pub const GL_DEPTH32F_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAD, .hexadecimal);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const GLEW_ARB_depth_buffer_float = GLEW_GET_VAR(__GLEW_ARB_depth_buffer_float);
pub const GL_ARB_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GLEW_ARB_depth_clamp = GLEW_GET_VAR(__GLEW_ARB_depth_clamp);
pub const GL_ARB_depth_texture = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_DEPTH_TEXTURE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const GLEW_ARB_depth_texture = GLEW_GET_VAR(__GLEW_ARB_depth_texture);
pub const GL_ARB_derivative_control = @as(c_int, 1);
pub const GLEW_ARB_derivative_control = GLEW_GET_VAR(__GLEW_ARB_derivative_control);
pub const GL_ARB_direct_state_access = @as(c_int, 1);
pub const GL_TEXTURE_TARGET = @as(c_int, 0x1006);
pub const GL_QUERY_TARGET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EA, .hexadecimal);
pub const glBindTextureUnit = GLEW_GET_FUN(__glewBindTextureUnit);
pub const glBlitNamedFramebuffer = GLEW_GET_FUN(__glewBlitNamedFramebuffer);
pub const glCheckNamedFramebufferStatus = GLEW_GET_FUN(__glewCheckNamedFramebufferStatus);
pub const glClearNamedBufferData = GLEW_GET_FUN(__glewClearNamedBufferData);
pub const glClearNamedBufferSubData = GLEW_GET_FUN(__glewClearNamedBufferSubData);
pub const glClearNamedFramebufferfi = GLEW_GET_FUN(__glewClearNamedFramebufferfi);
pub const glClearNamedFramebufferfv = GLEW_GET_FUN(__glewClearNamedFramebufferfv);
pub const glClearNamedFramebufferiv = GLEW_GET_FUN(__glewClearNamedFramebufferiv);
pub const glClearNamedFramebufferuiv = GLEW_GET_FUN(__glewClearNamedFramebufferuiv);
pub const glCompressedTextureSubImage1D = GLEW_GET_FUN(__glewCompressedTextureSubImage1D);
pub const glCompressedTextureSubImage2D = GLEW_GET_FUN(__glewCompressedTextureSubImage2D);
pub const glCompressedTextureSubImage3D = GLEW_GET_FUN(__glewCompressedTextureSubImage3D);
pub const glCopyNamedBufferSubData = GLEW_GET_FUN(__glewCopyNamedBufferSubData);
pub const glCopyTextureSubImage1D = GLEW_GET_FUN(__glewCopyTextureSubImage1D);
pub const glCopyTextureSubImage2D = GLEW_GET_FUN(__glewCopyTextureSubImage2D);
pub const glCopyTextureSubImage3D = GLEW_GET_FUN(__glewCopyTextureSubImage3D);
pub const glCreateBuffers = GLEW_GET_FUN(__glewCreateBuffers);
pub const glCreateFramebuffers = GLEW_GET_FUN(__glewCreateFramebuffers);
pub const glCreateProgramPipelines = GLEW_GET_FUN(__glewCreateProgramPipelines);
pub const glCreateQueries = GLEW_GET_FUN(__glewCreateQueries);
pub const glCreateRenderbuffers = GLEW_GET_FUN(__glewCreateRenderbuffers);
pub const glCreateSamplers = GLEW_GET_FUN(__glewCreateSamplers);
pub const glCreateTextures = GLEW_GET_FUN(__glewCreateTextures);
pub const glCreateTransformFeedbacks = GLEW_GET_FUN(__glewCreateTransformFeedbacks);
pub const glCreateVertexArrays = GLEW_GET_FUN(__glewCreateVertexArrays);
pub const glDisableVertexArrayAttrib = GLEW_GET_FUN(__glewDisableVertexArrayAttrib);
pub const glEnableVertexArrayAttrib = GLEW_GET_FUN(__glewEnableVertexArrayAttrib);
pub const glFlushMappedNamedBufferRange = GLEW_GET_FUN(__glewFlushMappedNamedBufferRange);
pub const glGenerateTextureMipmap = GLEW_GET_FUN(__glewGenerateTextureMipmap);
pub const glGetCompressedTextureImage = GLEW_GET_FUN(__glewGetCompressedTextureImage);
pub const glGetNamedBufferParameteri64v = GLEW_GET_FUN(__glewGetNamedBufferParameteri64v);
pub const glGetNamedBufferParameteriv = GLEW_GET_FUN(__glewGetNamedBufferParameteriv);
pub const glGetNamedBufferPointerv = GLEW_GET_FUN(__glewGetNamedBufferPointerv);
pub const glGetNamedBufferSubData = GLEW_GET_FUN(__glewGetNamedBufferSubData);
pub const glGetNamedFramebufferAttachmentParameteriv = GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameteriv);
pub const glGetNamedFramebufferParameteriv = GLEW_GET_FUN(__glewGetNamedFramebufferParameteriv);
pub const glGetNamedRenderbufferParameteriv = GLEW_GET_FUN(__glewGetNamedRenderbufferParameteriv);
pub const glGetQueryBufferObjecti64v = GLEW_GET_FUN(__glewGetQueryBufferObjecti64v);
pub const glGetQueryBufferObjectiv = GLEW_GET_FUN(__glewGetQueryBufferObjectiv);
pub const glGetQueryBufferObjectui64v = GLEW_GET_FUN(__glewGetQueryBufferObjectui64v);
pub const glGetQueryBufferObjectuiv = GLEW_GET_FUN(__glewGetQueryBufferObjectuiv);
pub const glGetTextureImage = GLEW_GET_FUN(__glewGetTextureImage);
pub const glGetTextureLevelParameterfv = GLEW_GET_FUN(__glewGetTextureLevelParameterfv);
pub const glGetTextureLevelParameteriv = GLEW_GET_FUN(__glewGetTextureLevelParameteriv);
pub const glGetTextureParameterIiv = GLEW_GET_FUN(__glewGetTextureParameterIiv);
pub const glGetTextureParameterIuiv = GLEW_GET_FUN(__glewGetTextureParameterIuiv);
pub const glGetTextureParameterfv = GLEW_GET_FUN(__glewGetTextureParameterfv);
pub const glGetTextureParameteriv = GLEW_GET_FUN(__glewGetTextureParameteriv);
pub const glGetTransformFeedbacki64_v = GLEW_GET_FUN(__glewGetTransformFeedbacki64_v);
pub const glGetTransformFeedbacki_v = GLEW_GET_FUN(__glewGetTransformFeedbacki_v);
pub const glGetTransformFeedbackiv = GLEW_GET_FUN(__glewGetTransformFeedbackiv);
pub const glGetVertexArrayIndexed64iv = GLEW_GET_FUN(__glewGetVertexArrayIndexed64iv);
pub const glGetVertexArrayIndexediv = GLEW_GET_FUN(__glewGetVertexArrayIndexediv);
pub const glGetVertexArrayiv = GLEW_GET_FUN(__glewGetVertexArrayiv);
pub const glInvalidateNamedFramebufferData = GLEW_GET_FUN(__glewInvalidateNamedFramebufferData);
pub const glInvalidateNamedFramebufferSubData = GLEW_GET_FUN(__glewInvalidateNamedFramebufferSubData);
pub const glMapNamedBuffer = GLEW_GET_FUN(__glewMapNamedBuffer);
pub const glMapNamedBufferRange = GLEW_GET_FUN(__glewMapNamedBufferRange);
pub const glNamedBufferData = GLEW_GET_FUN(__glewNamedBufferData);
pub const glNamedBufferStorage = GLEW_GET_FUN(__glewNamedBufferStorage);
pub const glNamedBufferSubData = GLEW_GET_FUN(__glewNamedBufferSubData);
pub const glNamedFramebufferDrawBuffer = GLEW_GET_FUN(__glewNamedFramebufferDrawBuffer);
pub const glNamedFramebufferDrawBuffers = GLEW_GET_FUN(__glewNamedFramebufferDrawBuffers);
pub const glNamedFramebufferParameteri = GLEW_GET_FUN(__glewNamedFramebufferParameteri);
pub const glNamedFramebufferReadBuffer = GLEW_GET_FUN(__glewNamedFramebufferReadBuffer);
pub const glNamedFramebufferRenderbuffer = GLEW_GET_FUN(__glewNamedFramebufferRenderbuffer);
pub const glNamedFramebufferTexture = GLEW_GET_FUN(__glewNamedFramebufferTexture);
pub const glNamedFramebufferTextureLayer = GLEW_GET_FUN(__glewNamedFramebufferTextureLayer);
pub const glNamedRenderbufferStorage = GLEW_GET_FUN(__glewNamedRenderbufferStorage);
pub const glNamedRenderbufferStorageMultisample = GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisample);
pub const glTextureBuffer = GLEW_GET_FUN(__glewTextureBuffer);
pub const glTextureBufferRange = GLEW_GET_FUN(__glewTextureBufferRange);
pub const glTextureParameterIiv = GLEW_GET_FUN(__glewTextureParameterIiv);
pub const glTextureParameterIuiv = GLEW_GET_FUN(__glewTextureParameterIuiv);
pub const glTextureParameterf = GLEW_GET_FUN(__glewTextureParameterf);
pub const glTextureParameterfv = GLEW_GET_FUN(__glewTextureParameterfv);
pub const glTextureParameteri = GLEW_GET_FUN(__glewTextureParameteri);
pub const glTextureParameteriv = GLEW_GET_FUN(__glewTextureParameteriv);
pub const glTextureStorage1D = GLEW_GET_FUN(__glewTextureStorage1D);
pub const glTextureStorage2D = GLEW_GET_FUN(__glewTextureStorage2D);
pub const glTextureStorage2DMultisample = GLEW_GET_FUN(__glewTextureStorage2DMultisample);
pub const glTextureStorage3D = GLEW_GET_FUN(__glewTextureStorage3D);
pub const glTextureStorage3DMultisample = GLEW_GET_FUN(__glewTextureStorage3DMultisample);
pub const glTextureSubImage1D = GLEW_GET_FUN(__glewTextureSubImage1D);
pub const glTextureSubImage2D = GLEW_GET_FUN(__glewTextureSubImage2D);
pub const glTextureSubImage3D = GLEW_GET_FUN(__glewTextureSubImage3D);
pub const glTransformFeedbackBufferBase = GLEW_GET_FUN(__glewTransformFeedbackBufferBase);
pub const glTransformFeedbackBufferRange = GLEW_GET_FUN(__glewTransformFeedbackBufferRange);
pub const glUnmapNamedBuffer = GLEW_GET_FUN(__glewUnmapNamedBuffer);
pub const glVertexArrayAttribBinding = GLEW_GET_FUN(__glewVertexArrayAttribBinding);
pub const glVertexArrayAttribFormat = GLEW_GET_FUN(__glewVertexArrayAttribFormat);
pub const glVertexArrayAttribIFormat = GLEW_GET_FUN(__glewVertexArrayAttribIFormat);
pub const glVertexArrayAttribLFormat = GLEW_GET_FUN(__glewVertexArrayAttribLFormat);
pub const glVertexArrayBindingDivisor = GLEW_GET_FUN(__glewVertexArrayBindingDivisor);
pub const glVertexArrayElementBuffer = GLEW_GET_FUN(__glewVertexArrayElementBuffer);
pub const glVertexArrayVertexBuffer = GLEW_GET_FUN(__glewVertexArrayVertexBuffer);
pub const glVertexArrayVertexBuffers = GLEW_GET_FUN(__glewVertexArrayVertexBuffers);
pub const GLEW_ARB_direct_state_access = GLEW_GET_VAR(__GLEW_ARB_direct_state_access);
pub const GL_ARB_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const glDrawBuffersARB = GLEW_GET_FUN(__glewDrawBuffersARB);
pub const GLEW_ARB_draw_buffers = GLEW_GET_VAR(__GLEW_ARB_draw_buffers);
pub const GL_ARB_draw_buffers_blend = @as(c_int, 1);
pub const glBlendEquationSeparateiARB = GLEW_GET_FUN(__glewBlendEquationSeparateiARB);
pub const glBlendEquationiARB = GLEW_GET_FUN(__glewBlendEquationiARB);
pub const glBlendFuncSeparateiARB = GLEW_GET_FUN(__glewBlendFuncSeparateiARB);
pub const glBlendFunciARB = GLEW_GET_FUN(__glewBlendFunciARB);
pub const GLEW_ARB_draw_buffers_blend = GLEW_GET_VAR(__GLEW_ARB_draw_buffers_blend);
pub const GL_ARB_draw_elements_base_vertex = @as(c_int, 1);
pub const glDrawElementsBaseVertex = GLEW_GET_FUN(__glewDrawElementsBaseVertex);
pub const glDrawElementsInstancedBaseVertex = GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertex);
pub const glDrawRangeElementsBaseVertex = GLEW_GET_FUN(__glewDrawRangeElementsBaseVertex);
pub const glMultiDrawElementsBaseVertex = GLEW_GET_FUN(__glewMultiDrawElementsBaseVertex);
pub const GLEW_ARB_draw_elements_base_vertex = GLEW_GET_VAR(__GLEW_ARB_draw_elements_base_vertex);
pub const GL_ARB_draw_indirect = @as(c_int, 1);
pub const GL_DRAW_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3F, .hexadecimal);
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F43, .hexadecimal);
pub const glDrawArraysIndirect = GLEW_GET_FUN(__glewDrawArraysIndirect);
pub const glDrawElementsIndirect = GLEW_GET_FUN(__glewDrawElementsIndirect);
pub const GLEW_ARB_draw_indirect = GLEW_GET_VAR(__GLEW_ARB_draw_indirect);
pub const GL_ARB_draw_instanced = @as(c_int, 1);
pub const GLEW_ARB_draw_instanced = GLEW_GET_VAR(__GLEW_ARB_draw_instanced);
pub const GL_ARB_enhanced_layouts = @as(c_int, 1);
pub const GL_LOCATION_COMPONENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934A, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934B, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934C, .hexadecimal);
pub const GLEW_ARB_enhanced_layouts = GLEW_GET_VAR(__GLEW_ARB_enhanced_layouts);
pub const GL_ARB_explicit_attrib_location = @as(c_int, 1);
pub const GLEW_ARB_explicit_attrib_location = GLEW_GET_VAR(__GLEW_ARB_explicit_attrib_location);
pub const GL_ARB_explicit_uniform_location = @as(c_int, 1);
pub const GL_MAX_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826E, .hexadecimal);
pub const GLEW_ARB_explicit_uniform_location = GLEW_GET_VAR(__GLEW_ARB_explicit_uniform_location);
pub const GL_ARB_fragment_coord_conventions = @as(c_int, 1);
pub const GLEW_ARB_fragment_coord_conventions = GLEW_GET_VAR(__GLEW_ARB_fragment_coord_conventions);
pub const GL_ARB_fragment_layer_viewport = @as(c_int, 1);
pub const GLEW_ARB_fragment_layer_viewport = GLEW_GET_VAR(__GLEW_ARB_fragment_layer_viewport);
pub const GL_ARB_fragment_program = @as(c_int, 1);
pub const GL_FRAGMENT_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8804, .hexadecimal);
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8805, .hexadecimal);
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8806, .hexadecimal);
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8807, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8808, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8809, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880A, .hexadecimal);
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880B, .hexadecimal);
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880C, .hexadecimal);
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880D, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880E, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880F, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8810, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GLEW_ARB_fragment_program = GLEW_GET_VAR(__GLEW_ARB_fragment_program);
pub const GL_ARB_fragment_program_shadow = @as(c_int, 1);
pub const GLEW_ARB_fragment_program_shadow = GLEW_GET_VAR(__GLEW_ARB_fragment_program_shadow);
pub const GL_ARB_fragment_shader = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GLEW_ARB_fragment_shader = GLEW_GET_VAR(__GLEW_ARB_fragment_shader);
pub const GL_ARB_fragment_shader_interlock = @as(c_int, 1);
pub const GLEW_ARB_fragment_shader_interlock = GLEW_GET_VAR(__GLEW_ARB_fragment_shader_interlock);
pub const GL_ARB_framebuffer_no_attachments = @as(c_int, 1);
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9310, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9311, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9313, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9314, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9315, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9316, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9318, .hexadecimal);
pub const glFramebufferParameteri = GLEW_GET_FUN(__glewFramebufferParameteri);
pub const glGetFramebufferParameteriv = GLEW_GET_FUN(__glewGetFramebufferParameteriv);
pub const glGetNamedFramebufferParameterivEXT = GLEW_GET_FUN(__glewGetNamedFramebufferParameterivEXT);
pub const glNamedFramebufferParameteriEXT = GLEW_GET_FUN(__glewNamedFramebufferParameteriEXT);
pub const GLEW_ARB_framebuffer_no_attachments = GLEW_GET_VAR(__GLEW_ARB_framebuffer_no_attachments);
pub const GL_ARB_framebuffer_object = @as(c_int, 1);
pub const GL_INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8212, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8213, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8214, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8215, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8216, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8217, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8218, .hexadecimal);
pub const GL_FRAMEBUFFER_UNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hexadecimal);
pub const GL_DEPTH_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821A, .hexadecimal);
pub const GL_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8222, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_DEPTH_STENCIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_DEPTH24_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_TEXTURE_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_READ_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_STENCIL_INDEX1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_INDEX16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_MAX_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const glBindFramebuffer = GLEW_GET_FUN(__glewBindFramebuffer);
pub const glBindRenderbuffer = GLEW_GET_FUN(__glewBindRenderbuffer);
pub const glBlitFramebuffer = GLEW_GET_FUN(__glewBlitFramebuffer);
pub const glCheckFramebufferStatus = GLEW_GET_FUN(__glewCheckFramebufferStatus);
pub const glDeleteFramebuffers = GLEW_GET_FUN(__glewDeleteFramebuffers);
pub const glDeleteRenderbuffers = GLEW_GET_FUN(__glewDeleteRenderbuffers);
pub const glFramebufferRenderbuffer = GLEW_GET_FUN(__glewFramebufferRenderbuffer);
pub const glFramebufferTexture1D = GLEW_GET_FUN(__glewFramebufferTexture1D);
pub const glFramebufferTexture2D = GLEW_GET_FUN(__glewFramebufferTexture2D);
pub const glFramebufferTexture3D = GLEW_GET_FUN(__glewFramebufferTexture3D);
pub const glFramebufferTextureLayer = GLEW_GET_FUN(__glewFramebufferTextureLayer);
pub const glGenFramebuffers = GLEW_GET_FUN(__glewGenFramebuffers);
pub const glGenRenderbuffers = GLEW_GET_FUN(__glewGenRenderbuffers);
pub const glGenerateMipmap = GLEW_GET_FUN(__glewGenerateMipmap);
pub const glGetFramebufferAttachmentParameteriv = GLEW_GET_FUN(__glewGetFramebufferAttachmentParameteriv);
pub const glGetRenderbufferParameteriv = GLEW_GET_FUN(__glewGetRenderbufferParameteriv);
pub const glIsFramebuffer = GLEW_GET_FUN(__glewIsFramebuffer);
pub const glIsRenderbuffer = GLEW_GET_FUN(__glewIsRenderbuffer);
pub const glRenderbufferStorage = GLEW_GET_FUN(__glewRenderbufferStorage);
pub const glRenderbufferStorageMultisample = GLEW_GET_FUN(__glewRenderbufferStorageMultisample);
pub const GLEW_ARB_framebuffer_object = GLEW_GET_VAR(__GLEW_ARB_framebuffer_object);
pub const GL_ARB_framebuffer_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const GLEW_ARB_framebuffer_sRGB = GLEW_GET_VAR(__GLEW_ARB_framebuffer_sRGB);
pub const GL_ARB_geometry_shader4 = @as(c_int, 1);
pub const GL_LINES_ADJACENCY_ARB = @as(c_int, 0xA);
pub const GL_LINE_STRIP_ADJACENCY_ARB = @as(c_int, 0xB);
pub const GL_TRIANGLES_ADJACENCY_ARB = @as(c_int, 0xC);
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = @as(c_int, 0xD);
pub const GL_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hexadecimal);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hexadecimal);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const glFramebufferTextureARB = GLEW_GET_FUN(__glewFramebufferTextureARB);
pub const glFramebufferTextureFaceARB = GLEW_GET_FUN(__glewFramebufferTextureFaceARB);
pub const glFramebufferTextureLayerARB = GLEW_GET_FUN(__glewFramebufferTextureLayerARB);
pub const glProgramParameteriARB = GLEW_GET_FUN(__glewProgramParameteriARB);
pub const GLEW_ARB_geometry_shader4 = GLEW_GET_VAR(__GLEW_ARB_geometry_shader4);
pub const GL_ARB_get_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8257, .hexadecimal);
pub const GL_PROGRAM_BINARY_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_NUM_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hexadecimal);
pub const glGetProgramBinary = GLEW_GET_FUN(__glewGetProgramBinary);
pub const glProgramBinary = GLEW_GET_FUN(__glewProgramBinary);
pub const glProgramParameteri = GLEW_GET_FUN(__glewProgramParameteri);
pub const GLEW_ARB_get_program_binary = GLEW_GET_VAR(__GLEW_ARB_get_program_binary);
pub const GL_ARB_get_texture_sub_image = @as(c_int, 1);
pub const glGetCompressedTextureSubImage = GLEW_GET_FUN(__glewGetCompressedTextureSubImage);
pub const glGetTextureSubImage = GLEW_GET_FUN(__glewGetTextureSubImage);
pub const GLEW_ARB_get_texture_sub_image = GLEW_GET_VAR(__GLEW_ARB_get_texture_sub_image);
pub const GL_ARB_gl_spirv = @as(c_int, 1);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const GL_SPIR_V_BINARY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const glSpecializeShaderARB = GLEW_GET_FUN(__glewSpecializeShaderARB);
pub const GLEW_ARB_gl_spirv = GLEW_GET_VAR(__GLEW_ARB_gl_spirv);
pub const GL_ARB_gpu_shader5 = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_MAX_VERTEX_STREAMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E71, .hexadecimal);
pub const GLEW_ARB_gpu_shader5 = GLEW_GET_VAR(__GLEW_ARB_gpu_shader5);
pub const GL_ARB_gpu_shader_fp64 = @as(c_int, 1);
pub const GL_DOUBLE_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const GL_DOUBLE_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const GL_DOUBLE_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const GL_DOUBLE_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const GL_DOUBLE_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const GL_DOUBLE_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const GL_DOUBLE_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const GL_DOUBLE_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const GL_DOUBLE_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const GL_DOUBLE_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const GL_DOUBLE_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const GL_DOUBLE_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const glGetUniformdv = GLEW_GET_FUN(__glewGetUniformdv);
pub const glUniform1d = GLEW_GET_FUN(__glewUniform1d);
pub const glUniform1dv = GLEW_GET_FUN(__glewUniform1dv);
pub const glUniform2d = GLEW_GET_FUN(__glewUniform2d);
pub const glUniform2dv = GLEW_GET_FUN(__glewUniform2dv);
pub const glUniform3d = GLEW_GET_FUN(__glewUniform3d);
pub const glUniform3dv = GLEW_GET_FUN(__glewUniform3dv);
pub const glUniform4d = GLEW_GET_FUN(__glewUniform4d);
pub const glUniform4dv = GLEW_GET_FUN(__glewUniform4dv);
pub const glUniformMatrix2dv = GLEW_GET_FUN(__glewUniformMatrix2dv);
pub const glUniformMatrix2x3dv = GLEW_GET_FUN(__glewUniformMatrix2x3dv);
pub const glUniformMatrix2x4dv = GLEW_GET_FUN(__glewUniformMatrix2x4dv);
pub const glUniformMatrix3dv = GLEW_GET_FUN(__glewUniformMatrix3dv);
pub const glUniformMatrix3x2dv = GLEW_GET_FUN(__glewUniformMatrix3x2dv);
pub const glUniformMatrix3x4dv = GLEW_GET_FUN(__glewUniformMatrix3x4dv);
pub const glUniformMatrix4dv = GLEW_GET_FUN(__glewUniformMatrix4dv);
pub const glUniformMatrix4x2dv = GLEW_GET_FUN(__glewUniformMatrix4x2dv);
pub const glUniformMatrix4x3dv = GLEW_GET_FUN(__glewUniformMatrix4x3dv);
pub const GLEW_ARB_gpu_shader_fp64 = GLEW_GET_VAR(__GLEW_ARB_gpu_shader_fp64);
pub const GL_ARB_gpu_shader_int64 = @as(c_int, 1);
pub const GL_INT64_ARB = @as(c_int, 0x140E);
pub const GL_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hexadecimal);
pub const GL_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hexadecimal);
pub const GL_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hexadecimal);
pub const glGetUniformi64vARB = GLEW_GET_FUN(__glewGetUniformi64vARB);
pub const glGetUniformui64vARB = GLEW_GET_FUN(__glewGetUniformui64vARB);
pub const glGetnUniformi64vARB = GLEW_GET_FUN(__glewGetnUniformi64vARB);
pub const glGetnUniformui64vARB = GLEW_GET_FUN(__glewGetnUniformui64vARB);
pub const glProgramUniform1i64ARB = GLEW_GET_FUN(__glewProgramUniform1i64ARB);
pub const glProgramUniform1i64vARB = GLEW_GET_FUN(__glewProgramUniform1i64vARB);
pub const glProgramUniform1ui64ARB = GLEW_GET_FUN(__glewProgramUniform1ui64ARB);
pub const glProgramUniform1ui64vARB = GLEW_GET_FUN(__glewProgramUniform1ui64vARB);
pub const glProgramUniform2i64ARB = GLEW_GET_FUN(__glewProgramUniform2i64ARB);
pub const glProgramUniform2i64vARB = GLEW_GET_FUN(__glewProgramUniform2i64vARB);
pub const glProgramUniform2ui64ARB = GLEW_GET_FUN(__glewProgramUniform2ui64ARB);
pub const glProgramUniform2ui64vARB = GLEW_GET_FUN(__glewProgramUniform2ui64vARB);
pub const glProgramUniform3i64ARB = GLEW_GET_FUN(__glewProgramUniform3i64ARB);
pub const glProgramUniform3i64vARB = GLEW_GET_FUN(__glewProgramUniform3i64vARB);
pub const glProgramUniform3ui64ARB = GLEW_GET_FUN(__glewProgramUniform3ui64ARB);
pub const glProgramUniform3ui64vARB = GLEW_GET_FUN(__glewProgramUniform3ui64vARB);
pub const glProgramUniform4i64ARB = GLEW_GET_FUN(__glewProgramUniform4i64ARB);
pub const glProgramUniform4i64vARB = GLEW_GET_FUN(__glewProgramUniform4i64vARB);
pub const glProgramUniform4ui64ARB = GLEW_GET_FUN(__glewProgramUniform4ui64ARB);
pub const glProgramUniform4ui64vARB = GLEW_GET_FUN(__glewProgramUniform4ui64vARB);
pub const glUniform1i64ARB = GLEW_GET_FUN(__glewUniform1i64ARB);
pub const glUniform1i64vARB = GLEW_GET_FUN(__glewUniform1i64vARB);
pub const glUniform1ui64ARB = GLEW_GET_FUN(__glewUniform1ui64ARB);
pub const glUniform1ui64vARB = GLEW_GET_FUN(__glewUniform1ui64vARB);
pub const glUniform2i64ARB = GLEW_GET_FUN(__glewUniform2i64ARB);
pub const glUniform2i64vARB = GLEW_GET_FUN(__glewUniform2i64vARB);
pub const glUniform2ui64ARB = GLEW_GET_FUN(__glewUniform2ui64ARB);
pub const glUniform2ui64vARB = GLEW_GET_FUN(__glewUniform2ui64vARB);
pub const glUniform3i64ARB = GLEW_GET_FUN(__glewUniform3i64ARB);
pub const glUniform3i64vARB = GLEW_GET_FUN(__glewUniform3i64vARB);
pub const glUniform3ui64ARB = GLEW_GET_FUN(__glewUniform3ui64ARB);
pub const glUniform3ui64vARB = GLEW_GET_FUN(__glewUniform3ui64vARB);
pub const glUniform4i64ARB = GLEW_GET_FUN(__glewUniform4i64ARB);
pub const glUniform4i64vARB = GLEW_GET_FUN(__glewUniform4i64vARB);
pub const glUniform4ui64ARB = GLEW_GET_FUN(__glewUniform4ui64ARB);
pub const glUniform4ui64vARB = GLEW_GET_FUN(__glewUniform4ui64vARB);
pub const GLEW_ARB_gpu_shader_int64 = GLEW_GET_VAR(__GLEW_ARB_gpu_shader_int64);
pub const GL_ARB_half_float_pixel = @as(c_int, 1);
pub const GL_HALF_FLOAT_ARB = @as(c_int, 0x140B);
pub const GLEW_ARB_half_float_pixel = GLEW_GET_VAR(__GLEW_ARB_half_float_pixel);
pub const GL_ARB_half_float_vertex = @as(c_int, 1);
pub const GL_HALF_FLOAT = @as(c_int, 0x140B);
pub const GLEW_ARB_half_float_vertex = GLEW_GET_VAR(__GLEW_ARB_half_float_vertex);
pub const GL_ARB_imaging = @as(c_int, 1);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_CONVOLUTION_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const GL_CONVOLUTION_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const GL_SEPARABLE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hexadecimal);
pub const GL_REDUCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hexadecimal);
pub const GL_CONVOLUTION_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hexadecimal);
pub const GL_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hexadecimal);
pub const GL_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hexadecimal);
pub const GL_MAX_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hexadecimal);
pub const GL_MAX_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hexadecimal);
pub const GL_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const GL_PROXY_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const GL_HISTOGRAM_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hexadecimal);
pub const GL_HISTOGRAM_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hexadecimal);
pub const GL_HISTOGRAM_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hexadecimal);
pub const GL_HISTOGRAM_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hexadecimal);
pub const GL_HISTOGRAM_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hexadecimal);
pub const GL_HISTOGRAM_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hexadecimal);
pub const GL_HISTOGRAM_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hexadecimal);
pub const GL_HISTOGRAM_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hexadecimal);
pub const GL_MINMAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const GL_MINMAX_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hexadecimal);
pub const GL_MINMAX_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hexadecimal);
pub const GL_TABLE_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hexadecimal);
pub const GL_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hexadecimal);
pub const GL_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hexadecimal);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hexadecimal);
pub const GL_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const GL_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const GL_PROXY_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const GL_COLOR_TABLE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hexadecimal);
pub const GL_COLOR_TABLE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hexadecimal);
pub const GL_COLOR_TABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const GL_IGNORE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8150, .hexadecimal);
pub const GL_CONSTANT_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hexadecimal);
pub const GL_WRAP_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8152, .hexadecimal);
pub const GL_REPLICATE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hexadecimal);
pub const glColorSubTable = GLEW_GET_FUN(__glewColorSubTable);
pub const glColorTable = GLEW_GET_FUN(__glewColorTable);
pub const glColorTableParameterfv = GLEW_GET_FUN(__glewColorTableParameterfv);
pub const glColorTableParameteriv = GLEW_GET_FUN(__glewColorTableParameteriv);
pub const glConvolutionFilter1D = GLEW_GET_FUN(__glewConvolutionFilter1D);
pub const glConvolutionFilter2D = GLEW_GET_FUN(__glewConvolutionFilter2D);
pub const glConvolutionParameterf = GLEW_GET_FUN(__glewConvolutionParameterf);
pub const glConvolutionParameterfv = GLEW_GET_FUN(__glewConvolutionParameterfv);
pub const glConvolutionParameteri = GLEW_GET_FUN(__glewConvolutionParameteri);
pub const glConvolutionParameteriv = GLEW_GET_FUN(__glewConvolutionParameteriv);
pub const glCopyColorSubTable = GLEW_GET_FUN(__glewCopyColorSubTable);
pub const glCopyColorTable = GLEW_GET_FUN(__glewCopyColorTable);
pub const glCopyConvolutionFilter1D = GLEW_GET_FUN(__glewCopyConvolutionFilter1D);
pub const glCopyConvolutionFilter2D = GLEW_GET_FUN(__glewCopyConvolutionFilter2D);
pub const glGetColorTable = GLEW_GET_FUN(__glewGetColorTable);
pub const glGetColorTableParameterfv = GLEW_GET_FUN(__glewGetColorTableParameterfv);
pub const glGetColorTableParameteriv = GLEW_GET_FUN(__glewGetColorTableParameteriv);
pub const glGetConvolutionFilter = GLEW_GET_FUN(__glewGetConvolutionFilter);
pub const glGetConvolutionParameterfv = GLEW_GET_FUN(__glewGetConvolutionParameterfv);
pub const glGetConvolutionParameteriv = GLEW_GET_FUN(__glewGetConvolutionParameteriv);
pub const glGetHistogram = GLEW_GET_FUN(__glewGetHistogram);
pub const glGetHistogramParameterfv = GLEW_GET_FUN(__glewGetHistogramParameterfv);
pub const glGetHistogramParameteriv = GLEW_GET_FUN(__glewGetHistogramParameteriv);
pub const glGetMinmax = GLEW_GET_FUN(__glewGetMinmax);
pub const glGetMinmaxParameterfv = GLEW_GET_FUN(__glewGetMinmaxParameterfv);
pub const glGetMinmaxParameteriv = GLEW_GET_FUN(__glewGetMinmaxParameteriv);
pub const glGetSeparableFilter = GLEW_GET_FUN(__glewGetSeparableFilter);
pub const glHistogram = GLEW_GET_FUN(__glewHistogram);
pub const glMinmax = GLEW_GET_FUN(__glewMinmax);
pub const glResetHistogram = GLEW_GET_FUN(__glewResetHistogram);
pub const glResetMinmax = GLEW_GET_FUN(__glewResetMinmax);
pub const glSeparableFilter2D = GLEW_GET_FUN(__glewSeparableFilter2D);
pub const GLEW_ARB_imaging = GLEW_GET_VAR(__GLEW_ARB_imaging);
pub const GL_ARB_indirect_parameters = @as(c_int, 1);
pub const GL_PARAMETER_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const GL_PARAMETER_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const glMultiDrawArraysIndirectCountARB = GLEW_GET_FUN(__glewMultiDrawArraysIndirectCountARB);
pub const glMultiDrawElementsIndirectCountARB = GLEW_GET_FUN(__glewMultiDrawElementsIndirectCountARB);
pub const GLEW_ARB_indirect_parameters = GLEW_GET_VAR(__GLEW_ARB_indirect_parameters);
pub const GL_ARB_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const glDrawArraysInstancedARB = GLEW_GET_FUN(__glewDrawArraysInstancedARB);
pub const glDrawElementsInstancedARB = GLEW_GET_FUN(__glewDrawElementsInstancedARB);
pub const glVertexAttribDivisorARB = GLEW_GET_FUN(__glewVertexAttribDivisorARB);
pub const GLEW_ARB_instanced_arrays = GLEW_GET_VAR(__GLEW_ARB_instanced_arrays);
pub const GL_ARB_internalformat_query = @as(c_int, 1);
pub const GL_NUM_SAMPLE_COUNTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9380, .hexadecimal);
pub const glGetInternalformativ = GLEW_GET_FUN(__glewGetInternalformativ);
pub const GLEW_ARB_internalformat_query = GLEW_GET_VAR(__GLEW_ARB_internalformat_query);
pub const GL_ARB_internalformat_query2 = @as(c_int, 1);
pub const GL_INTERNALFORMAT_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826F, .hexadecimal);
pub const GL_INTERNALFORMAT_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8270, .hexadecimal);
pub const GL_INTERNALFORMAT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8271, .hexadecimal);
pub const GL_INTERNALFORMAT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8272, .hexadecimal);
pub const GL_INTERNALFORMAT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8273, .hexadecimal);
pub const GL_INTERNALFORMAT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8274, .hexadecimal);
pub const GL_INTERNALFORMAT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8275, .hexadecimal);
pub const GL_INTERNALFORMAT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8276, .hexadecimal);
pub const GL_INTERNALFORMAT_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8277, .hexadecimal);
pub const GL_INTERNALFORMAT_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8278, .hexadecimal);
pub const GL_INTERNALFORMAT_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8279, .hexadecimal);
pub const GL_INTERNALFORMAT_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827A, .hexadecimal);
pub const GL_INTERNALFORMAT_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827B, .hexadecimal);
pub const GL_INTERNALFORMAT_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827C, .hexadecimal);
pub const GL_INTERNALFORMAT_STENCIL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827D, .hexadecimal);
pub const GL_MAX_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827E, .hexadecimal);
pub const GL_MAX_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827F, .hexadecimal);
pub const GL_MAX_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8280, .hexadecimal);
pub const GL_MAX_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8281, .hexadecimal);
pub const GL_MAX_COMBINED_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8282, .hexadecimal);
pub const GL_COLOR_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8283, .hexadecimal);
pub const GL_DEPTH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8284, .hexadecimal);
pub const GL_STENCIL_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8285, .hexadecimal);
pub const GL_COLOR_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8286, .hexadecimal);
pub const GL_DEPTH_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8287, .hexadecimal);
pub const GL_STENCIL_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8288, .hexadecimal);
pub const GL_FRAMEBUFFER_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8289, .hexadecimal);
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828A, .hexadecimal);
pub const GL_FRAMEBUFFER_BLEND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828B, .hexadecimal);
pub const GL_READ_PIXELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828C, .hexadecimal);
pub const GL_READ_PIXELS_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828D, .hexadecimal);
pub const GL_READ_PIXELS_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828E, .hexadecimal);
pub const GL_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828F, .hexadecimal);
pub const GL_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8290, .hexadecimal);
pub const GL_GET_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8291, .hexadecimal);
pub const GL_GET_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8292, .hexadecimal);
pub const GL_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8293, .hexadecimal);
pub const GL_MANUAL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8294, .hexadecimal);
pub const GL_AUTO_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8295, .hexadecimal);
pub const GL_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8296, .hexadecimal);
pub const GL_SRGB_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8297, .hexadecimal);
pub const GL_SRGB_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8298, .hexadecimal);
pub const GL_SRGB_DECODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8299, .hexadecimal);
pub const GL_FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829A, .hexadecimal);
pub const GL_VERTEX_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829B, .hexadecimal);
pub const GL_TESS_CONTROL_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829C, .hexadecimal);
pub const GL_TESS_EVALUATION_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829D, .hexadecimal);
pub const GL_GEOMETRY_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829E, .hexadecimal);
pub const GL_FRAGMENT_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829F, .hexadecimal);
pub const GL_COMPUTE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A0, .hexadecimal);
pub const GL_TEXTURE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A1, .hexadecimal);
pub const GL_TEXTURE_GATHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A2, .hexadecimal);
pub const GL_TEXTURE_GATHER_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A3, .hexadecimal);
pub const GL_SHADER_IMAGE_LOAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A4, .hexadecimal);
pub const GL_SHADER_IMAGE_STORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A5, .hexadecimal);
pub const GL_SHADER_IMAGE_ATOMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A6, .hexadecimal);
pub const GL_IMAGE_TEXEL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A7, .hexadecimal);
pub const GL_IMAGE_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A8, .hexadecimal);
pub const GL_IMAGE_PIXEL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A9, .hexadecimal);
pub const GL_IMAGE_PIXEL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AA, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AC, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AD, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AE, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AF, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B1, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B2, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B3, .hexadecimal);
pub const GL_CLEAR_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B4, .hexadecimal);
pub const GL_TEXTURE_VIEW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B5, .hexadecimal);
pub const GL_VIEW_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B6, .hexadecimal);
pub const GL_FULL_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B7, .hexadecimal);
pub const GL_CAVEAT_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B8, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B9, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BA, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BB, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BC, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BD, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BE, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BF, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C0, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C1, .hexadecimal);
pub const GL_IMAGE_CLASS_11_11_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C2, .hexadecimal);
pub const GL_IMAGE_CLASS_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C3, .hexadecimal);
pub const GL_VIEW_CLASS_128_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C4, .hexadecimal);
pub const GL_VIEW_CLASS_96_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C5, .hexadecimal);
pub const GL_VIEW_CLASS_64_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C6, .hexadecimal);
pub const GL_VIEW_CLASS_48_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C7, .hexadecimal);
pub const GL_VIEW_CLASS_32_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C8, .hexadecimal);
pub const GL_VIEW_CLASS_24_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C9, .hexadecimal);
pub const GL_VIEW_CLASS_16_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CA, .hexadecimal);
pub const GL_VIEW_CLASS_8_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CB, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CC, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CD, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CE, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CF, .hexadecimal);
pub const GL_VIEW_CLASS_RGTC1_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D0, .hexadecimal);
pub const GL_VIEW_CLASS_RGTC2_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D1, .hexadecimal);
pub const GL_VIEW_CLASS_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D2, .hexadecimal);
pub const GL_VIEW_CLASS_BPTC_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D3, .hexadecimal);
pub const glGetInternalformati64v = GLEW_GET_FUN(__glewGetInternalformati64v);
pub const GLEW_ARB_internalformat_query2 = GLEW_GET_VAR(__GLEW_ARB_internalformat_query2);
pub const GL_ARB_invalidate_subdata = @as(c_int, 1);
pub const glInvalidateBufferData = GLEW_GET_FUN(__glewInvalidateBufferData);
pub const glInvalidateBufferSubData = GLEW_GET_FUN(__glewInvalidateBufferSubData);
pub const glInvalidateFramebuffer = GLEW_GET_FUN(__glewInvalidateFramebuffer);
pub const glInvalidateSubFramebuffer = GLEW_GET_FUN(__glewInvalidateSubFramebuffer);
pub const glInvalidateTexImage = GLEW_GET_FUN(__glewInvalidateTexImage);
pub const glInvalidateTexSubImage = GLEW_GET_FUN(__glewInvalidateTexSubImage);
pub const GLEW_ARB_invalidate_subdata = GLEW_GET_VAR(__GLEW_ARB_invalidate_subdata);
pub const GL_ARB_map_buffer_alignment = @as(c_int, 1);
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BC, .hexadecimal);
pub const GLEW_ARB_map_buffer_alignment = GLEW_GET_VAR(__GLEW_ARB_map_buffer_alignment);
pub const GL_ARB_map_buffer_range = @as(c_int, 1);
pub const GL_MAP_INVALIDATE_RANGE_BIT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_BUFFER_BIT = @as(c_int, 0x0008);
pub const GL_MAP_FLUSH_EXPLICIT_BIT = @as(c_int, 0x0010);
pub const GL_MAP_UNSYNCHRONIZED_BIT = @as(c_int, 0x0020);
pub const glFlushMappedBufferRange = GLEW_GET_FUN(__glewFlushMappedBufferRange);
pub const glMapBufferRange = GLEW_GET_FUN(__glewMapBufferRange);
pub const GLEW_ARB_map_buffer_range = GLEW_GET_VAR(__GLEW_ARB_map_buffer_range);
pub const GL_ARB_matrix_palette = @as(c_int, 1);
pub const GL_MATRIX_PALETTE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hexadecimal);
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8841, .hexadecimal);
pub const GL_MAX_PALETTE_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hexadecimal);
pub const GL_CURRENT_PALETTE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hexadecimal);
pub const GL_CURRENT_MATRIX_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8845, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hexadecimal);
pub const glCurrentPaletteMatrixARB = GLEW_GET_FUN(__glewCurrentPaletteMatrixARB);
pub const glMatrixIndexPointerARB = GLEW_GET_FUN(__glewMatrixIndexPointerARB);
pub const glMatrixIndexubvARB = GLEW_GET_FUN(__glewMatrixIndexubvARB);
pub const glMatrixIndexuivARB = GLEW_GET_FUN(__glewMatrixIndexuivARB);
pub const glMatrixIndexusvARB = GLEW_GET_FUN(__glewMatrixIndexusvARB);
pub const GLEW_ARB_matrix_palette = GLEW_GET_VAR(__GLEW_ARB_matrix_palette);
pub const GL_ARB_multi_bind = @as(c_int, 1);
pub const glBindBuffersBase = GLEW_GET_FUN(__glewBindBuffersBase);
pub const glBindBuffersRange = GLEW_GET_FUN(__glewBindBuffersRange);
pub const glBindImageTextures = GLEW_GET_FUN(__glewBindImageTextures);
pub const glBindSamplers = GLEW_GET_FUN(__glewBindSamplers);
pub const glBindTextures = GLEW_GET_FUN(__glewBindTextures);
pub const glBindVertexBuffers = GLEW_GET_FUN(__glewBindVertexBuffers);
pub const GLEW_ARB_multi_bind = GLEW_GET_VAR(__GLEW_ARB_multi_bind);
pub const GL_ARB_multi_draw_indirect = @as(c_int, 1);
pub const glMultiDrawArraysIndirect = GLEW_GET_FUN(__glewMultiDrawArraysIndirect);
pub const glMultiDrawElementsIndirect = GLEW_GET_FUN(__glewMultiDrawElementsIndirect);
pub const GLEW_ARB_multi_draw_indirect = GLEW_GET_VAR(__GLEW_ARB_multi_draw_indirect);
pub const GL_ARB_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const glSampleCoverageARB = GLEW_GET_FUN(__glewSampleCoverageARB);
pub const GLEW_ARB_multisample = GLEW_GET_VAR(__GLEW_ARB_multisample);
pub const GL_ARB_multitexture = @as(c_int, 1);
pub const GL_TEXTURE0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const GL_MAX_TEXTURE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const glActiveTextureARB = GLEW_GET_FUN(__glewActiveTextureARB);
pub const glClientActiveTextureARB = GLEW_GET_FUN(__glewClientActiveTextureARB);
pub const glMultiTexCoord1dARB = GLEW_GET_FUN(__glewMultiTexCoord1dARB);
pub const glMultiTexCoord1dvARB = GLEW_GET_FUN(__glewMultiTexCoord1dvARB);
pub const glMultiTexCoord1fARB = GLEW_GET_FUN(__glewMultiTexCoord1fARB);
pub const glMultiTexCoord1fvARB = GLEW_GET_FUN(__glewMultiTexCoord1fvARB);
pub const glMultiTexCoord1iARB = GLEW_GET_FUN(__glewMultiTexCoord1iARB);
pub const glMultiTexCoord1ivARB = GLEW_GET_FUN(__glewMultiTexCoord1ivARB);
pub const glMultiTexCoord1sARB = GLEW_GET_FUN(__glewMultiTexCoord1sARB);
pub const glMultiTexCoord1svARB = GLEW_GET_FUN(__glewMultiTexCoord1svARB);
pub const glMultiTexCoord2dARB = GLEW_GET_FUN(__glewMultiTexCoord2dARB);
pub const glMultiTexCoord2dvARB = GLEW_GET_FUN(__glewMultiTexCoord2dvARB);
pub const glMultiTexCoord2fARB = GLEW_GET_FUN(__glewMultiTexCoord2fARB);
pub const glMultiTexCoord2fvARB = GLEW_GET_FUN(__glewMultiTexCoord2fvARB);
pub const glMultiTexCoord2iARB = GLEW_GET_FUN(__glewMultiTexCoord2iARB);
pub const glMultiTexCoord2ivARB = GLEW_GET_FUN(__glewMultiTexCoord2ivARB);
pub const glMultiTexCoord2sARB = GLEW_GET_FUN(__glewMultiTexCoord2sARB);
pub const glMultiTexCoord2svARB = GLEW_GET_FUN(__glewMultiTexCoord2svARB);
pub const glMultiTexCoord3dARB = GLEW_GET_FUN(__glewMultiTexCoord3dARB);
pub const glMultiTexCoord3dvARB = GLEW_GET_FUN(__glewMultiTexCoord3dvARB);
pub const glMultiTexCoord3fARB = GLEW_GET_FUN(__glewMultiTexCoord3fARB);
pub const glMultiTexCoord3fvARB = GLEW_GET_FUN(__glewMultiTexCoord3fvARB);
pub const glMultiTexCoord3iARB = GLEW_GET_FUN(__glewMultiTexCoord3iARB);
pub const glMultiTexCoord3ivARB = GLEW_GET_FUN(__glewMultiTexCoord3ivARB);
pub const glMultiTexCoord3sARB = GLEW_GET_FUN(__glewMultiTexCoord3sARB);
pub const glMultiTexCoord3svARB = GLEW_GET_FUN(__glewMultiTexCoord3svARB);
pub const glMultiTexCoord4dARB = GLEW_GET_FUN(__glewMultiTexCoord4dARB);
pub const glMultiTexCoord4dvARB = GLEW_GET_FUN(__glewMultiTexCoord4dvARB);
pub const glMultiTexCoord4fARB = GLEW_GET_FUN(__glewMultiTexCoord4fARB);
pub const glMultiTexCoord4fvARB = GLEW_GET_FUN(__glewMultiTexCoord4fvARB);
pub const glMultiTexCoord4iARB = GLEW_GET_FUN(__glewMultiTexCoord4iARB);
pub const glMultiTexCoord4ivARB = GLEW_GET_FUN(__glewMultiTexCoord4ivARB);
pub const glMultiTexCoord4sARB = GLEW_GET_FUN(__glewMultiTexCoord4sARB);
pub const glMultiTexCoord4svARB = GLEW_GET_FUN(__glewMultiTexCoord4svARB);
pub const GLEW_ARB_multitexture = GLEW_GET_VAR(__GLEW_ARB_multitexture);
pub const GL_ARB_occlusion_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_QUERY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_QUERY_RESULT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_SAMPLES_PASSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const glBeginQueryARB = GLEW_GET_FUN(__glewBeginQueryARB);
pub const glDeleteQueriesARB = GLEW_GET_FUN(__glewDeleteQueriesARB);
pub const glEndQueryARB = GLEW_GET_FUN(__glewEndQueryARB);
pub const glGenQueriesARB = GLEW_GET_FUN(__glewGenQueriesARB);
pub const glGetQueryObjectivARB = GLEW_GET_FUN(__glewGetQueryObjectivARB);
pub const glGetQueryObjectuivARB = GLEW_GET_FUN(__glewGetQueryObjectuivARB);
pub const glGetQueryivARB = GLEW_GET_FUN(__glewGetQueryivARB);
pub const glIsQueryARB = GLEW_GET_FUN(__glewIsQueryARB);
pub const GLEW_ARB_occlusion_query = GLEW_GET_VAR(__GLEW_ARB_occlusion_query);
pub const GL_ARB_occlusion_query2 = @as(c_int, 1);
pub const GL_ANY_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hexadecimal);
pub const GLEW_ARB_occlusion_query2 = GLEW_GET_VAR(__GLEW_ARB_occlusion_query2);
pub const GL_ARB_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hexadecimal);
pub const GL_COMPLETION_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hexadecimal);
pub const glMaxShaderCompilerThreadsARB = GLEW_GET_FUN(__glewMaxShaderCompilerThreadsARB);
pub const GLEW_ARB_parallel_shader_compile = GLEW_GET_VAR(__GLEW_ARB_parallel_shader_compile);
pub const GL_ARB_pipeline_statistics_query = @as(c_int, 1);
pub const GL_VERTICES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const GL_PRIMITIVES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const GLEW_ARB_pipeline_statistics_query = GLEW_GET_VAR(__GLEW_ARB_pipeline_statistics_query);
pub const GL_ARB_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GLEW_ARB_pixel_buffer_object = GLEW_GET_VAR(__GLEW_ARB_pixel_buffer_object);
pub const GL_ARB_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MAX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const glPointParameterfARB = GLEW_GET_FUN(__glewPointParameterfARB);
pub const glPointParameterfvARB = GLEW_GET_FUN(__glewPointParameterfvARB);
pub const GLEW_ARB_point_parameters = GLEW_GET_VAR(__GLEW_ARB_point_parameters);
pub const GL_ARB_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_COORD_REPLACE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GLEW_ARB_point_sprite = GLEW_GET_VAR(__GLEW_ARB_point_sprite);
pub const GL_ARB_polygon_offset_clamp = @as(c_int, 1);
pub const glPolygonOffsetClamp = GLEW_GET_FUN(__glewPolygonOffsetClamp);
pub const GLEW_ARB_polygon_offset_clamp = GLEW_GET_VAR(__GLEW_ARB_polygon_offset_clamp);
pub const GL_ARB_post_depth_coverage = @as(c_int, 1);
pub const GLEW_ARB_post_depth_coverage = GLEW_GET_VAR(__GLEW_ARB_post_depth_coverage);
pub const GL_ARB_program_interface_query = @as(c_int, 1);
pub const GL_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E1, .hexadecimal);
pub const GL_UNIFORM_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E2, .hexadecimal);
pub const GL_PROGRAM_INPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E3, .hexadecimal);
pub const GL_PROGRAM_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E4, .hexadecimal);
pub const GL_BUFFER_VARIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E5, .hexadecimal);
pub const GL_SHADER_STORAGE_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E6, .hexadecimal);
pub const GL_IS_PER_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_VERTEX_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E8, .hexadecimal);
pub const GL_TESS_CONTROL_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E9, .hexadecimal);
pub const GL_TESS_EVALUATION_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EA, .hexadecimal);
pub const GL_GEOMETRY_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EB, .hexadecimal);
pub const GL_FRAGMENT_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EC, .hexadecimal);
pub const GL_COMPUTE_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92ED, .hexadecimal);
pub const GL_VERTEX_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EE, .hexadecimal);
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EF, .hexadecimal);
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F0, .hexadecimal);
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F1, .hexadecimal);
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F2, .hexadecimal);
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F3, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F4, .hexadecimal);
pub const GL_ACTIVE_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F5, .hexadecimal);
pub const GL_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F6, .hexadecimal);
pub const GL_MAX_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F7, .hexadecimal);
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F8, .hexadecimal);
pub const GL_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F9, .hexadecimal);
pub const GL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FA, .hexadecimal);
pub const GL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FB, .hexadecimal);
pub const GL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FC, .hexadecimal);
pub const GL_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FD, .hexadecimal);
pub const GL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FE, .hexadecimal);
pub const GL_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FF, .hexadecimal);
pub const GL_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9300, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9301, .hexadecimal);
pub const GL_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9302, .hexadecimal);
pub const GL_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9303, .hexadecimal);
pub const GL_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9304, .hexadecimal);
pub const GL_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9305, .hexadecimal);
pub const GL_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9306, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930A, .hexadecimal);
pub const GL_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930B, .hexadecimal);
pub const GL_TOP_LEVEL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930C, .hexadecimal);
pub const GL_TOP_LEVEL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930D, .hexadecimal);
pub const GL_LOCATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930E, .hexadecimal);
pub const GL_LOCATION_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hexadecimal);
pub const glGetProgramInterfaceiv = GLEW_GET_FUN(__glewGetProgramInterfaceiv);
pub const glGetProgramResourceIndex = GLEW_GET_FUN(__glewGetProgramResourceIndex);
pub const glGetProgramResourceLocation = GLEW_GET_FUN(__glewGetProgramResourceLocation);
pub const glGetProgramResourceLocationIndex = GLEW_GET_FUN(__glewGetProgramResourceLocationIndex);
pub const glGetProgramResourceName = GLEW_GET_FUN(__glewGetProgramResourceName);
pub const glGetProgramResourceiv = GLEW_GET_FUN(__glewGetProgramResourceiv);
pub const GLEW_ARB_program_interface_query = GLEW_GET_VAR(__GLEW_ARB_program_interface_query);
pub const GL_ARB_provoking_vertex = @as(c_int, 1);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const glProvokingVertex = GLEW_GET_FUN(__glewProvokingVertex);
pub const GLEW_ARB_provoking_vertex = GLEW_GET_VAR(__GLEW_ARB_provoking_vertex);
pub const GL_ARB_query_buffer_object = @as(c_int, 1);
pub const GL_QUERY_BUFFER_BARRIER_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_QUERY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const GL_QUERY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const GL_QUERY_RESULT_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const GLEW_ARB_query_buffer_object = GLEW_GET_VAR(__GLEW_ARB_query_buffer_object);
pub const GL_ARB_robust_buffer_access_behavior = @as(c_int, 1);
pub const GLEW_ARB_robust_buffer_access_behavior = GLEW_GET_VAR(__GLEW_ARB_robust_buffer_access_behavior);
pub const GL_ARB_robustness = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = @as(c_int, 0x00000004);
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const glGetGraphicsResetStatusARB = GLEW_GET_FUN(__glewGetGraphicsResetStatusARB);
pub const glGetnColorTableARB = GLEW_GET_FUN(__glewGetnColorTableARB);
pub const glGetnCompressedTexImageARB = GLEW_GET_FUN(__glewGetnCompressedTexImageARB);
pub const glGetnConvolutionFilterARB = GLEW_GET_FUN(__glewGetnConvolutionFilterARB);
pub const glGetnHistogramARB = GLEW_GET_FUN(__glewGetnHistogramARB);
pub const glGetnMapdvARB = GLEW_GET_FUN(__glewGetnMapdvARB);
pub const glGetnMapfvARB = GLEW_GET_FUN(__glewGetnMapfvARB);
pub const glGetnMapivARB = GLEW_GET_FUN(__glewGetnMapivARB);
pub const glGetnMinmaxARB = GLEW_GET_FUN(__glewGetnMinmaxARB);
pub const glGetnPixelMapfvARB = GLEW_GET_FUN(__glewGetnPixelMapfvARB);
pub const glGetnPixelMapuivARB = GLEW_GET_FUN(__glewGetnPixelMapuivARB);
pub const glGetnPixelMapusvARB = GLEW_GET_FUN(__glewGetnPixelMapusvARB);
pub const glGetnPolygonStippleARB = GLEW_GET_FUN(__glewGetnPolygonStippleARB);
pub const glGetnSeparableFilterARB = GLEW_GET_FUN(__glewGetnSeparableFilterARB);
pub const glGetnTexImageARB = GLEW_GET_FUN(__glewGetnTexImageARB);
pub const glGetnUniformdvARB = GLEW_GET_FUN(__glewGetnUniformdvARB);
pub const glGetnUniformfvARB = GLEW_GET_FUN(__glewGetnUniformfvARB);
pub const glGetnUniformivARB = GLEW_GET_FUN(__glewGetnUniformivARB);
pub const glGetnUniformuivARB = GLEW_GET_FUN(__glewGetnUniformuivARB);
pub const glReadnPixelsARB = GLEW_GET_FUN(__glewReadnPixelsARB);
pub const GLEW_ARB_robustness = GLEW_GET_VAR(__GLEW_ARB_robustness);
pub const GL_ARB_robustness_application_isolation = @as(c_int, 1);
pub const GLEW_ARB_robustness_application_isolation = GLEW_GET_VAR(__GLEW_ARB_robustness_application_isolation);
pub const GL_ARB_robustness_share_group_isolation = @as(c_int, 1);
pub const GLEW_ARB_robustness_share_group_isolation = GLEW_GET_VAR(__GLEW_ARB_robustness_share_group_isolation);
pub const GL_ARB_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hexadecimal);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hexadecimal);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hexadecimal);
pub const glFramebufferSampleLocationsfvARB = GLEW_GET_FUN(__glewFramebufferSampleLocationsfvARB);
pub const glNamedFramebufferSampleLocationsfvARB = GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvARB);
pub const GLEW_ARB_sample_locations = GLEW_GET_VAR(__GLEW_ARB_sample_locations);
pub const GL_ARB_sample_shading = @as(c_int, 1);
pub const GL_SAMPLE_SHADING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const glMinSampleShadingARB = GLEW_GET_FUN(__glewMinSampleShadingARB);
pub const GLEW_ARB_sample_shading = GLEW_GET_VAR(__GLEW_ARB_sample_shading);
pub const GL_ARB_sampler_objects = @as(c_int, 1);
pub const GL_SAMPLER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8919, .hexadecimal);
pub const glBindSampler = GLEW_GET_FUN(__glewBindSampler);
pub const glDeleteSamplers = GLEW_GET_FUN(__glewDeleteSamplers);
pub const glGenSamplers = GLEW_GET_FUN(__glewGenSamplers);
pub const glGetSamplerParameterIiv = GLEW_GET_FUN(__glewGetSamplerParameterIiv);
pub const glGetSamplerParameterIuiv = GLEW_GET_FUN(__glewGetSamplerParameterIuiv);
pub const glGetSamplerParameterfv = GLEW_GET_FUN(__glewGetSamplerParameterfv);
pub const glGetSamplerParameteriv = GLEW_GET_FUN(__glewGetSamplerParameteriv);
pub const glIsSampler = GLEW_GET_FUN(__glewIsSampler);
pub const glSamplerParameterIiv = GLEW_GET_FUN(__glewSamplerParameterIiv);
pub const glSamplerParameterIuiv = GLEW_GET_FUN(__glewSamplerParameterIuiv);
pub const glSamplerParameterf = GLEW_GET_FUN(__glewSamplerParameterf);
pub const glSamplerParameterfv = GLEW_GET_FUN(__glewSamplerParameterfv);
pub const glSamplerParameteri = GLEW_GET_FUN(__glewSamplerParameteri);
pub const glSamplerParameteriv = GLEW_GET_FUN(__glewSamplerParameteriv);
pub const GLEW_ARB_sampler_objects = GLEW_GET_VAR(__GLEW_ARB_sampler_objects);
pub const GL_ARB_seamless_cube_map = @as(c_int, 1);
pub const GLEW_ARB_seamless_cube_map = GLEW_GET_VAR(__GLEW_ARB_seamless_cube_map);
pub const GL_ARB_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GLEW_ARB_seamless_cubemap_per_texture = GLEW_GET_VAR(__GLEW_ARB_seamless_cubemap_per_texture);
pub const GL_ARB_separate_shader_objects = @as(c_int, 1);
pub const GL_VERTEX_SHADER_BIT = @as(c_int, 0x00000001);
pub const GL_FRAGMENT_SHADER_BIT = @as(c_int, 0x00000002);
pub const GL_GEOMETRY_SHADER_BIT = @as(c_int, 0x00000004);
pub const GL_TESS_CONTROL_SHADER_BIT = @as(c_int, 0x00000008);
pub const GL_TESS_EVALUATION_SHADER_BIT = @as(c_int, 0x00000010);
pub const GL_PROGRAM_SEPARABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hexadecimal);
pub const GL_ACTIVE_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hexadecimal);
pub const GL_ALL_SHADER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const glActiveShaderProgram = GLEW_GET_FUN(__glewActiveShaderProgram);
pub const glBindProgramPipeline = GLEW_GET_FUN(__glewBindProgramPipeline);
pub const glCreateShaderProgramv = GLEW_GET_FUN(__glewCreateShaderProgramv);
pub const glDeleteProgramPipelines = GLEW_GET_FUN(__glewDeleteProgramPipelines);
pub const glGenProgramPipelines = GLEW_GET_FUN(__glewGenProgramPipelines);
pub const glGetProgramPipelineInfoLog = GLEW_GET_FUN(__glewGetProgramPipelineInfoLog);
pub const glGetProgramPipelineiv = GLEW_GET_FUN(__glewGetProgramPipelineiv);
pub const glIsProgramPipeline = GLEW_GET_FUN(__glewIsProgramPipeline);
pub const glProgramUniform1d = GLEW_GET_FUN(__glewProgramUniform1d);
pub const glProgramUniform1dv = GLEW_GET_FUN(__glewProgramUniform1dv);
pub const glProgramUniform1f = GLEW_GET_FUN(__glewProgramUniform1f);
pub const glProgramUniform1fv = GLEW_GET_FUN(__glewProgramUniform1fv);
pub const glProgramUniform1i = GLEW_GET_FUN(__glewProgramUniform1i);
pub const glProgramUniform1iv = GLEW_GET_FUN(__glewProgramUniform1iv);
pub const glProgramUniform1ui = GLEW_GET_FUN(__glewProgramUniform1ui);
pub const glProgramUniform1uiv = GLEW_GET_FUN(__glewProgramUniform1uiv);
pub const glProgramUniform2d = GLEW_GET_FUN(__glewProgramUniform2d);
pub const glProgramUniform2dv = GLEW_GET_FUN(__glewProgramUniform2dv);
pub const glProgramUniform2f = GLEW_GET_FUN(__glewProgramUniform2f);
pub const glProgramUniform2fv = GLEW_GET_FUN(__glewProgramUniform2fv);
pub const glProgramUniform2i = GLEW_GET_FUN(__glewProgramUniform2i);
pub const glProgramUniform2iv = GLEW_GET_FUN(__glewProgramUniform2iv);
pub const glProgramUniform2ui = GLEW_GET_FUN(__glewProgramUniform2ui);
pub const glProgramUniform2uiv = GLEW_GET_FUN(__glewProgramUniform2uiv);
pub const glProgramUniform3d = GLEW_GET_FUN(__glewProgramUniform3d);
pub const glProgramUniform3dv = GLEW_GET_FUN(__glewProgramUniform3dv);
pub const glProgramUniform3f = GLEW_GET_FUN(__glewProgramUniform3f);
pub const glProgramUniform3fv = GLEW_GET_FUN(__glewProgramUniform3fv);
pub const glProgramUniform3i = GLEW_GET_FUN(__glewProgramUniform3i);
pub const glProgramUniform3iv = GLEW_GET_FUN(__glewProgramUniform3iv);
pub const glProgramUniform3ui = GLEW_GET_FUN(__glewProgramUniform3ui);
pub const glProgramUniform3uiv = GLEW_GET_FUN(__glewProgramUniform3uiv);
pub const glProgramUniform4d = GLEW_GET_FUN(__glewProgramUniform4d);
pub const glProgramUniform4dv = GLEW_GET_FUN(__glewProgramUniform4dv);
pub const glProgramUniform4f = GLEW_GET_FUN(__glewProgramUniform4f);
pub const glProgramUniform4fv = GLEW_GET_FUN(__glewProgramUniform4fv);
pub const glProgramUniform4i = GLEW_GET_FUN(__glewProgramUniform4i);
pub const glProgramUniform4iv = GLEW_GET_FUN(__glewProgramUniform4iv);
pub const glProgramUniform4ui = GLEW_GET_FUN(__glewProgramUniform4ui);
pub const glProgramUniform4uiv = GLEW_GET_FUN(__glewProgramUniform4uiv);
pub const glProgramUniformMatrix2dv = GLEW_GET_FUN(__glewProgramUniformMatrix2dv);
pub const glProgramUniformMatrix2fv = GLEW_GET_FUN(__glewProgramUniformMatrix2fv);
pub const glProgramUniformMatrix2x3dv = GLEW_GET_FUN(__glewProgramUniformMatrix2x3dv);
pub const glProgramUniformMatrix2x3fv = GLEW_GET_FUN(__glewProgramUniformMatrix2x3fv);
pub const glProgramUniformMatrix2x4dv = GLEW_GET_FUN(__glewProgramUniformMatrix2x4dv);
pub const glProgramUniformMatrix2x4fv = GLEW_GET_FUN(__glewProgramUniformMatrix2x4fv);
pub const glProgramUniformMatrix3dv = GLEW_GET_FUN(__glewProgramUniformMatrix3dv);
pub const glProgramUniformMatrix3fv = GLEW_GET_FUN(__glewProgramUniformMatrix3fv);
pub const glProgramUniformMatrix3x2dv = GLEW_GET_FUN(__glewProgramUniformMatrix3x2dv);
pub const glProgramUniformMatrix3x2fv = GLEW_GET_FUN(__glewProgramUniformMatrix3x2fv);
pub const glProgramUniformMatrix3x4dv = GLEW_GET_FUN(__glewProgramUniformMatrix3x4dv);
pub const glProgramUniformMatrix3x4fv = GLEW_GET_FUN(__glewProgramUniformMatrix3x4fv);
pub const glProgramUniformMatrix4dv = GLEW_GET_FUN(__glewProgramUniformMatrix4dv);
pub const glProgramUniformMatrix4fv = GLEW_GET_FUN(__glewProgramUniformMatrix4fv);
pub const glProgramUniformMatrix4x2dv = GLEW_GET_FUN(__glewProgramUniformMatrix4x2dv);
pub const glProgramUniformMatrix4x2fv = GLEW_GET_FUN(__glewProgramUniformMatrix4x2fv);
pub const glProgramUniformMatrix4x3dv = GLEW_GET_FUN(__glewProgramUniformMatrix4x3dv);
pub const glProgramUniformMatrix4x3fv = GLEW_GET_FUN(__glewProgramUniformMatrix4x3fv);
pub const glUseProgramStages = GLEW_GET_FUN(__glewUseProgramStages);
pub const glValidateProgramPipeline = GLEW_GET_FUN(__glewValidateProgramPipeline);
pub const GLEW_ARB_separate_shader_objects = GLEW_GET_VAR(__GLEW_ARB_separate_shader_objects);
pub const GL_ARB_shader_atomic_counter_ops = @as(c_int, 1);
pub const GLEW_ARB_shader_atomic_counter_ops = GLEW_GET_VAR(__GLEW_ARB_shader_atomic_counter_ops);
pub const GL_ARB_shader_atomic_counters = @as(c_int, 1);
pub const GL_ATOMIC_COUNTER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C0, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C1, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C2, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C3, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C4, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C5, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C6, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C7, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C8, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C9, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CA, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CB, .hexadecimal);
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CC, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D0, .hexadecimal);
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D1, .hexadecimal);
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D2, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D6, .hexadecimal);
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D7, .hexadecimal);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D8, .hexadecimal);
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D9, .hexadecimal);
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DA, .hexadecimal);
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DB, .hexadecimal);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DC, .hexadecimal);
pub const glGetActiveAtomicCounterBufferiv = GLEW_GET_FUN(__glewGetActiveAtomicCounterBufferiv);
pub const GLEW_ARB_shader_atomic_counters = GLEW_GET_VAR(__GLEW_ARB_shader_atomic_counters);
pub const GL_ARB_shader_ballot = @as(c_int, 1);
pub const GLEW_ARB_shader_ballot = GLEW_GET_VAR(__GLEW_ARB_shader_ballot);
pub const GL_ARB_shader_bit_encoding = @as(c_int, 1);
pub const GLEW_ARB_shader_bit_encoding = GLEW_GET_VAR(__GLEW_ARB_shader_bit_encoding);
pub const GL_ARB_shader_clock = @as(c_int, 1);
pub const GLEW_ARB_shader_clock = GLEW_GET_VAR(__GLEW_ARB_shader_clock);
pub const GL_ARB_shader_draw_parameters = @as(c_int, 1);
pub const GLEW_ARB_shader_draw_parameters = GLEW_GET_VAR(__GLEW_ARB_shader_draw_parameters);
pub const GL_ARB_shader_group_vote = @as(c_int, 1);
pub const GLEW_ARB_shader_group_vote = GLEW_GET_VAR(__GLEW_ARB_shader_group_vote);
pub const GL_ARB_shader_image_load_store = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = @as(c_int, 0x00000001);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = @as(c_int, 0x00000002);
pub const GL_UNIFORM_BARRIER_BIT = @as(c_int, 0x00000004);
pub const GL_TEXTURE_FETCH_BARRIER_BIT = @as(c_int, 0x00000008);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = @as(c_int, 0x00000020);
pub const GL_COMMAND_BARRIER_BIT = @as(c_int, 0x00000040);
pub const GL_PIXEL_BUFFER_BARRIER_BIT = @as(c_int, 0x00000080);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = @as(c_int, 0x00000100);
pub const GL_BUFFER_UPDATE_BARRIER_BIT = @as(c_int, 0x00000200);
pub const GL_FRAMEBUFFER_BARRIER_BIT = @as(c_int, 0x00000400);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = @as(c_int, 0x00001000);
pub const GL_MAX_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_IMAGE_BINDING_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const GL_IMAGE_BINDING_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const GL_IMAGE_BINDING_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const GL_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const GL_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const GL_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const GL_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const GL_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const GL_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const GL_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const GL_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const GL_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const GL_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const GL_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const GL_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const GL_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const GL_MAX_IMAGE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const GL_IMAGE_BINDING_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C7, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C8, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C9, .hexadecimal);
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CA, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CE, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CF, .hexadecimal);
pub const GL_ALL_BARRIER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const glBindImageTexture = GLEW_GET_FUN(__glewBindImageTexture);
pub const glMemoryBarrier = GLEW_GET_FUN(__glewMemoryBarrier);
pub const GLEW_ARB_shader_image_load_store = GLEW_GET_VAR(__GLEW_ARB_shader_image_load_store);
pub const GL_ARB_shader_image_size = @as(c_int, 1);
pub const GLEW_ARB_shader_image_size = GLEW_GET_VAR(__GLEW_ARB_shader_image_size);
pub const GL_ARB_shader_objects = @as(c_int, 1);
pub const GL_PROGRAM_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hexadecimal);
pub const GL_SHADER_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hexadecimal);
pub const GL_OBJECT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4E, .hexadecimal);
pub const GL_OBJECT_SUBTYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_FLOAT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_INT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_BOOL_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_FLOAT_MAT2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_SAMPLER_1D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_2D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_3D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_CUBE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const GL_OBJECT_DELETE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_OBJECT_COMPILE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_OBJECT_LINK_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_OBJECT_VALIDATE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const glAttachObjectARB = GLEW_GET_FUN(__glewAttachObjectARB);
pub const glCompileShaderARB = GLEW_GET_FUN(__glewCompileShaderARB);
pub const glCreateProgramObjectARB = GLEW_GET_FUN(__glewCreateProgramObjectARB);
pub const glCreateShaderObjectARB = GLEW_GET_FUN(__glewCreateShaderObjectARB);
pub const glDeleteObjectARB = GLEW_GET_FUN(__glewDeleteObjectARB);
pub const glDetachObjectARB = GLEW_GET_FUN(__glewDetachObjectARB);
pub const glGetActiveUniformARB = GLEW_GET_FUN(__glewGetActiveUniformARB);
pub const glGetAttachedObjectsARB = GLEW_GET_FUN(__glewGetAttachedObjectsARB);
pub const glGetHandleARB = GLEW_GET_FUN(__glewGetHandleARB);
pub const glGetInfoLogARB = GLEW_GET_FUN(__glewGetInfoLogARB);
pub const glGetObjectParameterfvARB = GLEW_GET_FUN(__glewGetObjectParameterfvARB);
pub const glGetObjectParameterivARB = GLEW_GET_FUN(__glewGetObjectParameterivARB);
pub const glGetShaderSourceARB = GLEW_GET_FUN(__glewGetShaderSourceARB);
pub const glGetUniformLocationARB = GLEW_GET_FUN(__glewGetUniformLocationARB);
pub const glGetUniformfvARB = GLEW_GET_FUN(__glewGetUniformfvARB);
pub const glGetUniformivARB = GLEW_GET_FUN(__glewGetUniformivARB);
pub const glLinkProgramARB = GLEW_GET_FUN(__glewLinkProgramARB);
pub const glShaderSourceARB = GLEW_GET_FUN(__glewShaderSourceARB);
pub const glUniform1fARB = GLEW_GET_FUN(__glewUniform1fARB);
pub const glUniform1fvARB = GLEW_GET_FUN(__glewUniform1fvARB);
pub const glUniform1iARB = GLEW_GET_FUN(__glewUniform1iARB);
pub const glUniform1ivARB = GLEW_GET_FUN(__glewUniform1ivARB);
pub const glUniform2fARB = GLEW_GET_FUN(__glewUniform2fARB);
pub const glUniform2fvARB = GLEW_GET_FUN(__glewUniform2fvARB);
pub const glUniform2iARB = GLEW_GET_FUN(__glewUniform2iARB);
pub const glUniform2ivARB = GLEW_GET_FUN(__glewUniform2ivARB);
pub const glUniform3fARB = GLEW_GET_FUN(__glewUniform3fARB);
pub const glUniform3fvARB = GLEW_GET_FUN(__glewUniform3fvARB);
pub const glUniform3iARB = GLEW_GET_FUN(__glewUniform3iARB);
pub const glUniform3ivARB = GLEW_GET_FUN(__glewUniform3ivARB);
pub const glUniform4fARB = GLEW_GET_FUN(__glewUniform4fARB);
pub const glUniform4fvARB = GLEW_GET_FUN(__glewUniform4fvARB);
pub const glUniform4iARB = GLEW_GET_FUN(__glewUniform4iARB);
pub const glUniform4ivARB = GLEW_GET_FUN(__glewUniform4ivARB);
pub const glUniformMatrix2fvARB = GLEW_GET_FUN(__glewUniformMatrix2fvARB);
pub const glUniformMatrix3fvARB = GLEW_GET_FUN(__glewUniformMatrix3fvARB);
pub const glUniformMatrix4fvARB = GLEW_GET_FUN(__glewUniformMatrix4fvARB);
pub const glUseProgramObjectARB = GLEW_GET_FUN(__glewUseProgramObjectARB);
pub const glValidateProgramARB = GLEW_GET_FUN(__glewValidateProgramARB);
pub const GLEW_ARB_shader_objects = GLEW_GET_VAR(__GLEW_ARB_shader_objects);
pub const GL_ARB_shader_precision = @as(c_int, 1);
pub const GLEW_ARB_shader_precision = GLEW_GET_VAR(__GLEW_ARB_shader_precision);
pub const GL_ARB_shader_stencil_export = @as(c_int, 1);
pub const GLEW_ARB_shader_stencil_export = GLEW_GET_VAR(__GLEW_ARB_shader_stencil_export);
pub const GL_ARB_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_SHADER_STORAGE_BARRIER_BIT = @as(c_int, 0x2000);
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D2, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D3, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D4, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D5, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D6, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DA, .hexadecimal);
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DB, .hexadecimal);
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DC, .hexadecimal);
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DD, .hexadecimal);
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DE, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DF, .hexadecimal);
pub const glShaderStorageBlockBinding = GLEW_GET_FUN(__glewShaderStorageBlockBinding);
pub const GLEW_ARB_shader_storage_buffer_object = GLEW_GET_VAR(__GLEW_ARB_shader_storage_buffer_object);
pub const GL_ARB_shader_subroutine = @as(c_int, 1);
pub const GL_ACTIVE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE5, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE6, .hexadecimal);
pub const GL_MAX_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE7, .hexadecimal);
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE8, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E47, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E48, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E49, .hexadecimal);
pub const GL_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4A, .hexadecimal);
pub const GL_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4B, .hexadecimal);
pub const glGetActiveSubroutineName = GLEW_GET_FUN(__glewGetActiveSubroutineName);
pub const glGetActiveSubroutineUniformName = GLEW_GET_FUN(__glewGetActiveSubroutineUniformName);
pub const glGetActiveSubroutineUniformiv = GLEW_GET_FUN(__glewGetActiveSubroutineUniformiv);
pub const glGetProgramStageiv = GLEW_GET_FUN(__glewGetProgramStageiv);
pub const glGetSubroutineIndex = GLEW_GET_FUN(__glewGetSubroutineIndex);
pub const glGetSubroutineUniformLocation = GLEW_GET_FUN(__glewGetSubroutineUniformLocation);
pub const glGetUniformSubroutineuiv = GLEW_GET_FUN(__glewGetUniformSubroutineuiv);
pub const glUniformSubroutinesuiv = GLEW_GET_FUN(__glewUniformSubroutinesuiv);
pub const GLEW_ARB_shader_subroutine = GLEW_GET_VAR(__GLEW_ARB_shader_subroutine);
pub const GL_ARB_shader_texture_image_samples = @as(c_int, 1);
pub const GLEW_ARB_shader_texture_image_samples = GLEW_GET_VAR(__GLEW_ARB_shader_texture_image_samples);
pub const GL_ARB_shader_texture_lod = @as(c_int, 1);
pub const GLEW_ARB_shader_texture_lod = GLEW_GET_VAR(__GLEW_ARB_shader_texture_lod);
pub const GL_ARB_shader_viewport_layer_array = @as(c_int, 1);
pub const GLEW_ARB_shader_viewport_layer_array = GLEW_GET_VAR(__GLEW_ARB_shader_viewport_layer_array);
pub const GL_ARB_shading_language_100 = @as(c_int, 1);
pub const GL_SHADING_LANGUAGE_VERSION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GLEW_ARB_shading_language_100 = GLEW_GET_VAR(__GLEW_ARB_shading_language_100);
pub const GL_ARB_shading_language_420pack = @as(c_int, 1);
pub const GLEW_ARB_shading_language_420pack = GLEW_GET_VAR(__GLEW_ARB_shading_language_420pack);
pub const GL_ARB_shading_language_include = @as(c_int, 1);
pub const GL_SHADER_INCLUDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAE, .hexadecimal);
pub const GL_NAMED_STRING_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE9, .hexadecimal);
pub const GL_NAMED_STRING_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEA, .hexadecimal);
pub const glCompileShaderIncludeARB = GLEW_GET_FUN(__glewCompileShaderIncludeARB);
pub const glDeleteNamedStringARB = GLEW_GET_FUN(__glewDeleteNamedStringARB);
pub const glGetNamedStringARB = GLEW_GET_FUN(__glewGetNamedStringARB);
pub const glGetNamedStringivARB = GLEW_GET_FUN(__glewGetNamedStringivARB);
pub const glIsNamedStringARB = GLEW_GET_FUN(__glewIsNamedStringARB);
pub const glNamedStringARB = GLEW_GET_FUN(__glewNamedStringARB);
pub const GLEW_ARB_shading_language_include = GLEW_GET_VAR(__GLEW_ARB_shading_language_include);
pub const GL_ARB_shading_language_packing = @as(c_int, 1);
pub const GLEW_ARB_shading_language_packing = GLEW_GET_VAR(__GLEW_ARB_shading_language_packing);
pub const GL_ARB_shadow = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_COMPARE_R_TO_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GLEW_ARB_shadow = GLEW_GET_VAR(__GLEW_ARB_shadow);
pub const GL_ARB_shadow_ambient = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hexadecimal);
pub const GLEW_ARB_shadow_ambient = GLEW_GET_VAR(__GLEW_ARB_shadow_ambient);
pub const GL_ARB_sparse_buffer = @as(c_int, 1);
pub const GL_SPARSE_STORAGE_BIT_ARB = @as(c_int, 0x0400);
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F8, .hexadecimal);
pub const glBufferPageCommitmentARB = GLEW_GET_FUN(__glewBufferPageCommitmentARB);
pub const GLEW_ARB_sparse_buffer = GLEW_GET_VAR(__GLEW_ARB_sparse_buffer);
pub const GL_ARB_sparse_texture = @as(c_int, 1);
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_TEXTURE_SPARSE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hexadecimal);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hexadecimal);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hexadecimal);
pub const GL_NUM_SPARSE_LEVELS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hexadecimal);
pub const glTexPageCommitmentARB = GLEW_GET_FUN(__glewTexPageCommitmentARB);
pub const GLEW_ARB_sparse_texture = GLEW_GET_VAR(__GLEW_ARB_sparse_texture);
pub const GL_ARB_sparse_texture2 = @as(c_int, 1);
pub const GLEW_ARB_sparse_texture2 = GLEW_GET_VAR(__GLEW_ARB_sparse_texture2);
pub const GL_ARB_sparse_texture_clamp = @as(c_int, 1);
pub const GLEW_ARB_sparse_texture_clamp = GLEW_GET_VAR(__GLEW_ARB_sparse_texture_clamp);
pub const GL_ARB_spirv_extensions = @as(c_int, 1);
pub const GLEW_ARB_spirv_extensions = GLEW_GET_VAR(__GLEW_ARB_spirv_extensions);
pub const GL_ARB_stencil_texturing = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EA, .hexadecimal);
pub const GLEW_ARB_stencil_texturing = GLEW_GET_VAR(__GLEW_ARB_stencil_texturing);
pub const GL_ARB_sync = @as(c_int, 1);
pub const GL_SYNC_FLUSH_COMMANDS_BIT = @as(c_int, 0x00000001);
pub const GL_MAX_SERVER_WAIT_TIMEOUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hexadecimal);
pub const GL_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hexadecimal);
pub const GL_SYNC_CONDITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hexadecimal);
pub const GL_SYNC_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hexadecimal);
pub const GL_SYNC_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hexadecimal);
pub const GL_SYNC_FENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hexadecimal);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hexadecimal);
pub const GL_UNSIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hexadecimal);
pub const GL_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hexadecimal);
pub const GL_ALREADY_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hexadecimal);
pub const GL_TIMEOUT_EXPIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hexadecimal);
pub const GL_CONDITION_SATISFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hexadecimal);
pub const GL_WAIT_FAILED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hexadecimal);
pub const GL_TIMEOUT_IGNORED = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const glClientWaitSync = GLEW_GET_FUN(__glewClientWaitSync);
pub const glDeleteSync = GLEW_GET_FUN(__glewDeleteSync);
pub const glFenceSync = GLEW_GET_FUN(__glewFenceSync);
pub const glGetInteger64v = GLEW_GET_FUN(__glewGetInteger64v);
pub const glGetSynciv = GLEW_GET_FUN(__glewGetSynciv);
pub const glIsSync = GLEW_GET_FUN(__glewIsSync);
pub const glWaitSync = GLEW_GET_FUN(__glewWaitSync);
pub const GLEW_ARB_sync = GLEW_GET_VAR(__GLEW_ARB_sync);
pub const GL_ARB_tessellation_shader = @as(c_int, 1);
pub const GL_PATCHES = @as(c_int, 0xE);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F0, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F1, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_PATCH_DEFAULT_INNER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hexadecimal);
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_GEN_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_SPACING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_ISOLINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_FRACTIONAL_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRACTIONAL_EVEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const glPatchParameterfv = GLEW_GET_FUN(__glewPatchParameterfv);
pub const glPatchParameteri = GLEW_GET_FUN(__glewPatchParameteri);
pub const GLEW_ARB_tessellation_shader = GLEW_GET_VAR(__GLEW_ARB_tessellation_shader);
pub const GL_ARB_texture_barrier = @as(c_int, 1);
pub const glTextureBarrier = GLEW_GET_FUN(__glewTextureBarrier);
pub const GLEW_ARB_texture_barrier = GLEW_GET_VAR(__GLEW_ARB_texture_barrier);
pub const GL_ARB_texture_border_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_BORDER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GLEW_ARB_texture_border_clamp = GLEW_GET_VAR(__GLEW_ARB_texture_border_clamp);
pub const GL_ARB_texture_buffer_object = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const glTexBufferARB = GLEW_GET_FUN(__glewTexBufferARB);
pub const GLEW_ARB_texture_buffer_object = GLEW_GET_VAR(__GLEW_ARB_texture_buffer_object);
pub const GL_ARB_texture_buffer_object_rgb32 = @as(c_int, 1);
pub const GLEW_ARB_texture_buffer_object_rgb32 = GLEW_GET_VAR(__GLEW_ARB_texture_buffer_object_rgb32);
pub const GL_ARB_texture_buffer_range = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const glTexBufferRange = GLEW_GET_FUN(__glewTexBufferRange);
pub const glTextureBufferRangeEXT = GLEW_GET_FUN(__glewTextureBufferRangeEXT);
pub const GLEW_ARB_texture_buffer_range = GLEW_GET_VAR(__GLEW_ARB_texture_buffer_range);
pub const GL_ARB_texture_compression = @as(c_int, 1);
pub const GL_COMPRESSED_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const GL_COMPRESSED_INTENSITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const GL_COMPRESSED_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const glCompressedTexImage1DARB = GLEW_GET_FUN(__glewCompressedTexImage1DARB);
pub const glCompressedTexImage2DARB = GLEW_GET_FUN(__glewCompressedTexImage2DARB);
pub const glCompressedTexImage3DARB = GLEW_GET_FUN(__glewCompressedTexImage3DARB);
pub const glCompressedTexSubImage1DARB = GLEW_GET_FUN(__glewCompressedTexSubImage1DARB);
pub const glCompressedTexSubImage2DARB = GLEW_GET_FUN(__glewCompressedTexSubImage2DARB);
pub const glCompressedTexSubImage3DARB = GLEW_GET_FUN(__glewCompressedTexSubImage3DARB);
pub const glGetCompressedTexImageARB = GLEW_GET_FUN(__glewGetCompressedTexImageARB);
pub const GLEW_ARB_texture_compression = GLEW_GET_VAR(__GLEW_ARB_texture_compression);
pub const GL_ARB_texture_compression_bptc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GLEW_ARB_texture_compression_bptc = GLEW_GET_VAR(__GLEW_ARB_texture_compression_bptc);
pub const GL_ARB_texture_compression_rgtc = @as(c_int, 1);
pub const GL_COMPRESSED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const GL_COMPRESSED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const GLEW_ARB_texture_compression_rgtc = GLEW_GET_VAR(__GLEW_ARB_texture_compression_rgtc);
pub const GL_ARB_texture_cube_map = @as(c_int, 1);
pub const GL_NORMAL_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GLEW_ARB_texture_cube_map = GLEW_GET_VAR(__GLEW_ARB_texture_cube_map);
pub const GL_ARB_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GLEW_ARB_texture_cube_map_array = GLEW_GET_VAR(__GLEW_ARB_texture_cube_map_array);
pub const GL_ARB_texture_env_add = @as(c_int, 1);
pub const GLEW_ARB_texture_env_add = GLEW_GET_VAR(__GLEW_ARB_texture_env_add);
pub const GL_ARB_texture_env_combine = @as(c_int, 1);
pub const GL_SUBTRACT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const GL_COMBINE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_RGB_SCALE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_ADD_SIGNED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_INTERPOLATE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_CONSTANT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_PRIMARY_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PREVIOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_SOURCE0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_OPERAND0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GLEW_ARB_texture_env_combine = GLEW_GET_VAR(__GLEW_ARB_texture_env_combine);
pub const GL_ARB_texture_env_crossbar = @as(c_int, 1);
pub const GLEW_ARB_texture_env_crossbar = GLEW_GET_VAR(__GLEW_ARB_texture_env_crossbar);
pub const GL_ARB_texture_env_dot3 = @as(c_int, 1);
pub const GL_DOT3_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const GL_DOT3_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GLEW_ARB_texture_env_dot3 = GLEW_GET_VAR(__GLEW_ARB_texture_env_dot3);
pub const GL_ARB_texture_filter_anisotropic = @as(c_int, 1);
pub const GLEW_ARB_texture_filter_anisotropic = GLEW_GET_VAR(__GLEW_ARB_texture_filter_anisotropic);
pub const GL_ARB_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hexadecimal);
pub const GL_WEIGHTED_AVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hexadecimal);
pub const GLEW_ARB_texture_filter_minmax = GLEW_GET_VAR(__GLEW_ARB_texture_filter_minmax);
pub const GL_ARB_texture_float = @as(c_int, 1);
pub const GL_RGBA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGB32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_INTENSITY32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_LUMINANCE32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_RGBA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGB16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_INTENSITY16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_LUMINANCE16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_TEXTURE_RED_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const GL_TEXTURE_GREEN_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const GL_TEXTURE_BLUE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const GL_TEXTURE_ALPHA_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hexadecimal);
pub const GL_TEXTURE_DEPTH_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GLEW_ARB_texture_float = GLEW_GET_VAR(__GLEW_ARB_texture_float);
pub const GL_ARB_texture_gather = @as(c_int, 1);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hexadecimal);
pub const GLEW_ARB_texture_gather = GLEW_GET_VAR(__GLEW_ARB_texture_gather);
pub const GL_ARB_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GLEW_ARB_texture_mirror_clamp_to_edge = GLEW_GET_VAR(__GLEW_ARB_texture_mirror_clamp_to_edge);
pub const GL_ARB_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_MIRRORED_REPEAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GLEW_ARB_texture_mirrored_repeat = GLEW_GET_VAR(__GLEW_ARB_texture_mirrored_repeat);
pub const GL_ARB_texture_multisample = @as(c_int, 1);
pub const GL_SAMPLE_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const GL_MAX_SAMPLE_MASK_WORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9101, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9103, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9104, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hexadecimal);
pub const GL_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9106, .hexadecimal);
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9107, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9108, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9109, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910A, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hexadecimal);
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910E, .hexadecimal);
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910F, .hexadecimal);
pub const GL_MAX_INTEGER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9110, .hexadecimal);
pub const glGetMultisamplefv = GLEW_GET_FUN(__glewGetMultisamplefv);
pub const glSampleMaski = GLEW_GET_FUN(__glewSampleMaski);
pub const glTexImage2DMultisample = GLEW_GET_FUN(__glewTexImage2DMultisample);
pub const glTexImage3DMultisample = GLEW_GET_FUN(__glewTexImage3DMultisample);
pub const GLEW_ARB_texture_multisample = GLEW_GET_VAR(__GLEW_ARB_texture_multisample);
pub const GL_ARB_texture_non_power_of_two = @as(c_int, 1);
pub const GLEW_ARB_texture_non_power_of_two = GLEW_GET_VAR(__GLEW_ARB_texture_non_power_of_two);
pub const GL_ARB_texture_query_levels = @as(c_int, 1);
pub const GLEW_ARB_texture_query_levels = GLEW_GET_VAR(__GLEW_ARB_texture_query_levels);
pub const GL_ARB_texture_query_lod = @as(c_int, 1);
pub const GLEW_ARB_texture_query_lod = GLEW_GET_VAR(__GLEW_ARB_texture_query_lod);
pub const GL_ARB_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GLEW_ARB_texture_rectangle = GLEW_GET_VAR(__GLEW_ARB_texture_rectangle);
pub const GL_ARB_texture_rg = @as(c_int, 1);
pub const GL_COMPRESSED_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8225, .hexadecimal);
pub const GL_COMPRESSED_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8226, .hexadecimal);
pub const GL_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hexadecimal);
pub const GL_RG_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8228, .hexadecimal);
pub const GL_R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const GL_R16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hexadecimal);
pub const GL_RG8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const GL_RG16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hexadecimal);
pub const GL_R16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const GL_R32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const GL_RG16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const GL_RG32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const GL_R8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8231, .hexadecimal);
pub const GL_R8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8232, .hexadecimal);
pub const GL_R16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8233, .hexadecimal);
pub const GL_R16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8234, .hexadecimal);
pub const GL_R32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8235, .hexadecimal);
pub const GL_R32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8236, .hexadecimal);
pub const GL_RG8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8237, .hexadecimal);
pub const GL_RG16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8239, .hexadecimal);
pub const GL_RG32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823B, .hexadecimal);
pub const GL_RG32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823C, .hexadecimal);
pub const GLEW_ARB_texture_rg = GLEW_GET_VAR(__GLEW_ARB_texture_rg);
pub const GL_ARB_texture_rgb10_a2ui = @as(c_int, 1);
pub const GLEW_ARB_texture_rgb10_a2ui = GLEW_GET_VAR(__GLEW_ARB_texture_rgb10_a2ui);
pub const GL_ARB_texture_stencil8 = @as(c_int, 1);
pub const GLEW_ARB_texture_stencil8 = GLEW_GET_VAR(__GLEW_ARB_texture_stencil8);
pub const GL_ARB_texture_storage = @as(c_int, 1);
pub const GL_TEXTURE_IMMUTABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const glTexStorage1D = GLEW_GET_FUN(__glewTexStorage1D);
pub const glTexStorage2D = GLEW_GET_FUN(__glewTexStorage2D);
pub const glTexStorage3D = GLEW_GET_FUN(__glewTexStorage3D);
pub const GLEW_ARB_texture_storage = GLEW_GET_VAR(__GLEW_ARB_texture_storage);
pub const GL_ARB_texture_storage_multisample = @as(c_int, 1);
pub const glTexStorage2DMultisample = GLEW_GET_FUN(__glewTexStorage2DMultisample);
pub const glTexStorage3DMultisample = GLEW_GET_FUN(__glewTexStorage3DMultisample);
pub const glTextureStorage2DMultisampleEXT = GLEW_GET_FUN(__glewTextureStorage2DMultisampleEXT);
pub const glTextureStorage3DMultisampleEXT = GLEW_GET_FUN(__glewTextureStorage3DMultisampleEXT);
pub const GLEW_ARB_texture_storage_multisample = GLEW_GET_VAR(__GLEW_ARB_texture_storage_multisample);
pub const GL_ARB_texture_swizzle = @as(c_int, 1);
pub const GL_TEXTURE_SWIZZLE_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_G = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_B = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_A = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const GLEW_ARB_texture_swizzle = GLEW_GET_VAR(__GLEW_ARB_texture_swizzle);
pub const GL_ARB_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const glTextureView = GLEW_GET_FUN(__glewTextureView);
pub const GLEW_ARB_texture_view = GLEW_GET_VAR(__GLEW_ARB_texture_view);
pub const GL_ARB_timer_query = @as(c_int, 1);
pub const GL_TIME_ELAPSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_TIMESTAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const glGetQueryObjecti64v = GLEW_GET_FUN(__glewGetQueryObjecti64v);
pub const glGetQueryObjectui64v = GLEW_GET_FUN(__glewGetQueryObjectui64v);
pub const glQueryCounter = GLEW_GET_FUN(__glewQueryCounter);
pub const GLEW_ARB_timer_query = GLEW_GET_VAR(__GLEW_ARB_timer_query);
pub const GL_ARB_transform_feedback2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const glBindTransformFeedback = GLEW_GET_FUN(__glewBindTransformFeedback);
pub const glDeleteTransformFeedbacks = GLEW_GET_FUN(__glewDeleteTransformFeedbacks);
pub const glDrawTransformFeedback = GLEW_GET_FUN(__glewDrawTransformFeedback);
pub const glGenTransformFeedbacks = GLEW_GET_FUN(__glewGenTransformFeedbacks);
pub const glIsTransformFeedback = GLEW_GET_FUN(__glewIsTransformFeedback);
pub const glPauseTransformFeedback = GLEW_GET_FUN(__glewPauseTransformFeedback);
pub const glResumeTransformFeedback = GLEW_GET_FUN(__glewResumeTransformFeedback);
pub const GLEW_ARB_transform_feedback2 = GLEW_GET_VAR(__GLEW_ARB_transform_feedback2);
pub const GL_ARB_transform_feedback3 = @as(c_int, 1);
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E70, .hexadecimal);
pub const glBeginQueryIndexed = GLEW_GET_FUN(__glewBeginQueryIndexed);
pub const glDrawTransformFeedbackStream = GLEW_GET_FUN(__glewDrawTransformFeedbackStream);
pub const glEndQueryIndexed = GLEW_GET_FUN(__glewEndQueryIndexed);
pub const glGetQueryIndexediv = GLEW_GET_FUN(__glewGetQueryIndexediv);
pub const GLEW_ARB_transform_feedback3 = GLEW_GET_VAR(__GLEW_ARB_transform_feedback3);
pub const GL_ARB_transform_feedback_instanced = @as(c_int, 1);
pub const glDrawTransformFeedbackInstanced = GLEW_GET_FUN(__glewDrawTransformFeedbackInstanced);
pub const glDrawTransformFeedbackStreamInstanced = GLEW_GET_FUN(__glewDrawTransformFeedbackStreamInstanced);
pub const GLEW_ARB_transform_feedback_instanced = GLEW_GET_VAR(__GLEW_ARB_transform_feedback_instanced);
pub const GL_ARB_transform_feedback_overflow_query = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);
pub const GLEW_ARB_transform_feedback_overflow_query = GLEW_GET_VAR(__GLEW_ARB_transform_feedback_overflow_query);
pub const GL_ARB_transpose_matrix = @as(c_int, 1);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const glLoadTransposeMatrixdARB = GLEW_GET_FUN(__glewLoadTransposeMatrixdARB);
pub const glLoadTransposeMatrixfARB = GLEW_GET_FUN(__glewLoadTransposeMatrixfARB);
pub const glMultTransposeMatrixdARB = GLEW_GET_FUN(__glewMultTransposeMatrixdARB);
pub const glMultTransposeMatrixfARB = GLEW_GET_FUN(__glewMultTransposeMatrixfARB);
pub const GLEW_ARB_transpose_matrix = GLEW_GET_VAR(__GLEW_ARB_transpose_matrix);
pub const GL_ARB_uniform_buffer_object = @as(c_int, 1);
pub const GL_UNIFORM_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A11, .hexadecimal);
pub const GL_UNIFORM_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A28, .hexadecimal);
pub const GL_UNIFORM_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A29, .hexadecimal);
pub const GL_UNIFORM_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2A, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2B, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2D, .hexadecimal);
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2E, .hexadecimal);
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2F, .hexadecimal);
pub const GL_MAX_UNIFORM_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A30, .hexadecimal);
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A31, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A33, .hexadecimal);
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A34, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A35, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A36, .hexadecimal);
pub const GL_UNIFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A37, .hexadecimal);
pub const GL_UNIFORM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A38, .hexadecimal);
pub const GL_UNIFORM_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A39, .hexadecimal);
pub const GL_UNIFORM_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3A, .hexadecimal);
pub const GL_UNIFORM_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3B, .hexadecimal);
pub const GL_UNIFORM_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3C, .hexadecimal);
pub const GL_UNIFORM_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3D, .hexadecimal);
pub const GL_UNIFORM_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3E, .hexadecimal);
pub const GL_UNIFORM_BLOCK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3F, .hexadecimal);
pub const GL_UNIFORM_BLOCK_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A40, .hexadecimal);
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A41, .hexadecimal);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A42, .hexadecimal);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A43, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A44, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A45, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A46, .hexadecimal);
pub const GL_INVALID_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hexadecimal);
pub const glBindBufferBase = GLEW_GET_FUN(__glewBindBufferBase);
pub const glBindBufferRange = GLEW_GET_FUN(__glewBindBufferRange);
pub const glGetActiveUniformBlockName = GLEW_GET_FUN(__glewGetActiveUniformBlockName);
pub const glGetActiveUniformBlockiv = GLEW_GET_FUN(__glewGetActiveUniformBlockiv);
pub const glGetActiveUniformName = GLEW_GET_FUN(__glewGetActiveUniformName);
pub const glGetActiveUniformsiv = GLEW_GET_FUN(__glewGetActiveUniformsiv);
pub const glGetIntegeri_v = GLEW_GET_FUN(__glewGetIntegeri_v);
pub const glGetUniformBlockIndex = GLEW_GET_FUN(__glewGetUniformBlockIndex);
pub const glGetUniformIndices = GLEW_GET_FUN(__glewGetUniformIndices);
pub const glUniformBlockBinding = GLEW_GET_FUN(__glewUniformBlockBinding);
pub const GLEW_ARB_uniform_buffer_object = GLEW_GET_VAR(__GLEW_ARB_uniform_buffer_object);
pub const GL_ARB_vertex_array_bgra = @as(c_int, 1);
pub const GLEW_ARB_vertex_array_bgra = GLEW_GET_VAR(__GLEW_ARB_vertex_array_bgra);
pub const GL_ARB_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const glBindVertexArray = GLEW_GET_FUN(__glewBindVertexArray);
pub const glDeleteVertexArrays = GLEW_GET_FUN(__glewDeleteVertexArrays);
pub const glGenVertexArrays = GLEW_GET_FUN(__glewGenVertexArrays);
pub const glIsVertexArray = GLEW_GET_FUN(__glewIsVertexArray);
pub const GLEW_ARB_vertex_array_object = GLEW_GET_VAR(__GLEW_ARB_vertex_array_object);
pub const GL_ARB_vertex_attrib_64bit = @as(c_int, 1);
pub const glGetVertexAttribLdv = GLEW_GET_FUN(__glewGetVertexAttribLdv);
pub const glVertexAttribL1d = GLEW_GET_FUN(__glewVertexAttribL1d);
pub const glVertexAttribL1dv = GLEW_GET_FUN(__glewVertexAttribL1dv);
pub const glVertexAttribL2d = GLEW_GET_FUN(__glewVertexAttribL2d);
pub const glVertexAttribL2dv = GLEW_GET_FUN(__glewVertexAttribL2dv);
pub const glVertexAttribL3d = GLEW_GET_FUN(__glewVertexAttribL3d);
pub const glVertexAttribL3dv = GLEW_GET_FUN(__glewVertexAttribL3dv);
pub const glVertexAttribL4d = GLEW_GET_FUN(__glewVertexAttribL4d);
pub const glVertexAttribL4dv = GLEW_GET_FUN(__glewVertexAttribL4dv);
pub const glVertexAttribLPointer = GLEW_GET_FUN(__glewVertexAttribLPointer);
pub const GLEW_ARB_vertex_attrib_64bit = GLEW_GET_VAR(__GLEW_ARB_vertex_attrib_64bit);
pub const GL_ARB_vertex_attrib_binding = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D4, .hexadecimal);
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D5, .hexadecimal);
pub const GL_VERTEX_BINDING_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D6, .hexadecimal);
pub const GL_VERTEX_BINDING_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D7, .hexadecimal);
pub const GL_VERTEX_BINDING_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D8, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D9, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DA, .hexadecimal);
pub const GL_VERTEX_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4F, .hexadecimal);
pub const glBindVertexBuffer = GLEW_GET_FUN(__glewBindVertexBuffer);
pub const glVertexArrayBindVertexBufferEXT = GLEW_GET_FUN(__glewVertexArrayBindVertexBufferEXT);
pub const glVertexArrayVertexAttribBindingEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribBindingEXT);
pub const glVertexArrayVertexAttribFormatEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribFormatEXT);
pub const glVertexArrayVertexAttribIFormatEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribIFormatEXT);
pub const glVertexArrayVertexAttribLFormatEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribLFormatEXT);
pub const glVertexArrayVertexBindingDivisorEXT = GLEW_GET_FUN(__glewVertexArrayVertexBindingDivisorEXT);
pub const glVertexAttribBinding = GLEW_GET_FUN(__glewVertexAttribBinding);
pub const glVertexAttribFormat = GLEW_GET_FUN(__glewVertexAttribFormat);
pub const glVertexAttribIFormat = GLEW_GET_FUN(__glewVertexAttribIFormat);
pub const glVertexAttribLFormat = GLEW_GET_FUN(__glewVertexAttribLFormat);
pub const glVertexBindingDivisor = GLEW_GET_FUN(__glewVertexBindingDivisor);
pub const GLEW_ARB_vertex_attrib_binding = GLEW_GET_VAR(__GLEW_ARB_vertex_attrib_binding);
pub const GL_ARB_vertex_blend = @as(c_int, 1);
pub const GL_MODELVIEW0_ARB = @as(c_int, 0x1700);
pub const GL_MODELVIEW1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hexadecimal);
pub const GL_MAX_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hexadecimal);
pub const GL_ACTIVE_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A5, .hexadecimal);
pub const GL_WEIGHT_SUM_UNITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A6, .hexadecimal);
pub const GL_VERTEX_BLEND_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A7, .hexadecimal);
pub const GL_CURRENT_WEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A8, .hexadecimal);
pub const GL_WEIGHT_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hexadecimal);
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hexadecimal);
pub const GL_WEIGHT_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hexadecimal);
pub const GL_WEIGHT_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hexadecimal);
pub const GL_WEIGHT_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hexadecimal);
pub const GL_MODELVIEW2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8722, .hexadecimal);
pub const GL_MODELVIEW3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8723, .hexadecimal);
pub const GL_MODELVIEW4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8724, .hexadecimal);
pub const GL_MODELVIEW5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8725, .hexadecimal);
pub const GL_MODELVIEW6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8726, .hexadecimal);
pub const GL_MODELVIEW7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8727, .hexadecimal);
pub const GL_MODELVIEW8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8728, .hexadecimal);
pub const GL_MODELVIEW9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8729, .hexadecimal);
pub const GL_MODELVIEW10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872A, .hexadecimal);
pub const GL_MODELVIEW11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872B, .hexadecimal);
pub const GL_MODELVIEW12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872C, .hexadecimal);
pub const GL_MODELVIEW13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872D, .hexadecimal);
pub const GL_MODELVIEW14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872E, .hexadecimal);
pub const GL_MODELVIEW15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872F, .hexadecimal);
pub const GL_MODELVIEW16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8730, .hexadecimal);
pub const GL_MODELVIEW17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8731, .hexadecimal);
pub const GL_MODELVIEW18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8732, .hexadecimal);
pub const GL_MODELVIEW19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8733, .hexadecimal);
pub const GL_MODELVIEW20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8734, .hexadecimal);
pub const GL_MODELVIEW21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8735, .hexadecimal);
pub const GL_MODELVIEW22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8736, .hexadecimal);
pub const GL_MODELVIEW23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8737, .hexadecimal);
pub const GL_MODELVIEW24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8738, .hexadecimal);
pub const GL_MODELVIEW25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8739, .hexadecimal);
pub const GL_MODELVIEW26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873A, .hexadecimal);
pub const GL_MODELVIEW27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873B, .hexadecimal);
pub const GL_MODELVIEW28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873C, .hexadecimal);
pub const GL_MODELVIEW29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873D, .hexadecimal);
pub const GL_MODELVIEW30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873E, .hexadecimal);
pub const GL_MODELVIEW31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873F, .hexadecimal);
pub const glVertexBlendARB = GLEW_GET_FUN(__glewVertexBlendARB);
pub const glWeightPointerARB = GLEW_GET_FUN(__glewWeightPointerARB);
pub const glWeightbvARB = GLEW_GET_FUN(__glewWeightbvARB);
pub const glWeightdvARB = GLEW_GET_FUN(__glewWeightdvARB);
pub const glWeightfvARB = GLEW_GET_FUN(__glewWeightfvARB);
pub const glWeightivARB = GLEW_GET_FUN(__glewWeightivARB);
pub const glWeightsvARB = GLEW_GET_FUN(__glewWeightsvARB);
pub const glWeightubvARB = GLEW_GET_FUN(__glewWeightubvARB);
pub const glWeightuivARB = GLEW_GET_FUN(__glewWeightuivARB);
pub const glWeightusvARB = GLEW_GET_FUN(__glewWeightusvARB);
pub const GLEW_ARB_vertex_blend = GLEW_GET_VAR(__GLEW_ARB_vertex_blend);
pub const GL_ARB_vertex_buffer_object = @as(c_int, 1);
pub const GL_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_USAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_READ_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_WRITE_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_READ_WRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_BUFFER_ACCESS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_MAPPED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_STREAM_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STREAM_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STATIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_DYNAMIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const glBindBufferARB = GLEW_GET_FUN(__glewBindBufferARB);
pub const glBufferDataARB = GLEW_GET_FUN(__glewBufferDataARB);
pub const glBufferSubDataARB = GLEW_GET_FUN(__glewBufferSubDataARB);
pub const glDeleteBuffersARB = GLEW_GET_FUN(__glewDeleteBuffersARB);
pub const glGenBuffersARB = GLEW_GET_FUN(__glewGenBuffersARB);
pub const glGetBufferParameterivARB = GLEW_GET_FUN(__glewGetBufferParameterivARB);
pub const glGetBufferPointervARB = GLEW_GET_FUN(__glewGetBufferPointervARB);
pub const glGetBufferSubDataARB = GLEW_GET_FUN(__glewGetBufferSubDataARB);
pub const glIsBufferARB = GLEW_GET_FUN(__glewIsBufferARB);
pub const glMapBufferARB = GLEW_GET_FUN(__glewMapBufferARB);
pub const glUnmapBufferARB = GLEW_GET_FUN(__glewUnmapBufferARB);
pub const GLEW_ARB_vertex_buffer_object = GLEW_GET_VAR(__GLEW_ARB_vertex_buffer_object);
pub const GL_ARB_vertex_program = @as(c_int, 1);
pub const GL_COLOR_SUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_VERTEX_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_PROGRAM_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hexadecimal);
pub const GL_PROGRAM_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hexadecimal);
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hexadecimal);
pub const GL_MAX_PROGRAM_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hexadecimal);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hexadecimal);
pub const GL_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_PROGRAM_ERROR_POSITION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hexadecimal);
pub const GL_PROGRAM_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_PROGRAM_ERROR_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hexadecimal);
pub const GL_PROGRAM_FORMAT_ASCII_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8875, .hexadecimal);
pub const GL_PROGRAM_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8876, .hexadecimal);
pub const GL_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A0, .hexadecimal);
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A1, .hexadecimal);
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A2, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A3, .hexadecimal);
pub const GL_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A4, .hexadecimal);
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A5, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A6, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A7, .hexadecimal);
pub const GL_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A8, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A9, .hexadecimal);
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AA, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AB, .hexadecimal);
pub const GL_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AC, .hexadecimal);
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AD, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AE, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AF, .hexadecimal);
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B0, .hexadecimal);
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B1, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B2, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B3, .hexadecimal);
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B4, .hexadecimal);
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B5, .hexadecimal);
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B6, .hexadecimal);
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B7, .hexadecimal);
pub const GL_MATRIX0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C0, .hexadecimal);
pub const GL_MATRIX1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C1, .hexadecimal);
pub const GL_MATRIX2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C2, .hexadecimal);
pub const GL_MATRIX3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C3, .hexadecimal);
pub const GL_MATRIX4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C4, .hexadecimal);
pub const GL_MATRIX5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C5, .hexadecimal);
pub const GL_MATRIX6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C6, .hexadecimal);
pub const GL_MATRIX7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C7, .hexadecimal);
pub const GL_MATRIX8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C8, .hexadecimal);
pub const GL_MATRIX9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C9, .hexadecimal);
pub const GL_MATRIX10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CA, .hexadecimal);
pub const GL_MATRIX11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CB, .hexadecimal);
pub const GL_MATRIX12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CC, .hexadecimal);
pub const GL_MATRIX13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CD, .hexadecimal);
pub const GL_MATRIX14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CE, .hexadecimal);
pub const GL_MATRIX15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CF, .hexadecimal);
pub const GL_MATRIX16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D0, .hexadecimal);
pub const GL_MATRIX17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D1, .hexadecimal);
pub const GL_MATRIX18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D2, .hexadecimal);
pub const GL_MATRIX19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D3, .hexadecimal);
pub const GL_MATRIX20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D4, .hexadecimal);
pub const GL_MATRIX21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D5, .hexadecimal);
pub const GL_MATRIX22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D6, .hexadecimal);
pub const GL_MATRIX23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D7, .hexadecimal);
pub const GL_MATRIX24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D8, .hexadecimal);
pub const GL_MATRIX25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D9, .hexadecimal);
pub const GL_MATRIX26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DA, .hexadecimal);
pub const GL_MATRIX27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DB, .hexadecimal);
pub const GL_MATRIX28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DC, .hexadecimal);
pub const GL_MATRIX29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DD, .hexadecimal);
pub const GL_MATRIX30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DE, .hexadecimal);
pub const GL_MATRIX31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DF, .hexadecimal);
pub const glBindProgramARB = GLEW_GET_FUN(__glewBindProgramARB);
pub const glDeleteProgramsARB = GLEW_GET_FUN(__glewDeleteProgramsARB);
pub const glDisableVertexAttribArrayARB = GLEW_GET_FUN(__glewDisableVertexAttribArrayARB);
pub const glEnableVertexAttribArrayARB = GLEW_GET_FUN(__glewEnableVertexAttribArrayARB);
pub const glGenProgramsARB = GLEW_GET_FUN(__glewGenProgramsARB);
pub const glGetProgramEnvParameterdvARB = GLEW_GET_FUN(__glewGetProgramEnvParameterdvARB);
pub const glGetProgramEnvParameterfvARB = GLEW_GET_FUN(__glewGetProgramEnvParameterfvARB);
pub const glGetProgramLocalParameterdvARB = GLEW_GET_FUN(__glewGetProgramLocalParameterdvARB);
pub const glGetProgramLocalParameterfvARB = GLEW_GET_FUN(__glewGetProgramLocalParameterfvARB);
pub const glGetProgramStringARB = GLEW_GET_FUN(__glewGetProgramStringARB);
pub const glGetProgramivARB = GLEW_GET_FUN(__glewGetProgramivARB);
pub const glGetVertexAttribPointervARB = GLEW_GET_FUN(__glewGetVertexAttribPointervARB);
pub const glGetVertexAttribdvARB = GLEW_GET_FUN(__glewGetVertexAttribdvARB);
pub const glGetVertexAttribfvARB = GLEW_GET_FUN(__glewGetVertexAttribfvARB);
pub const glGetVertexAttribivARB = GLEW_GET_FUN(__glewGetVertexAttribivARB);
pub const glIsProgramARB = GLEW_GET_FUN(__glewIsProgramARB);
pub const glProgramEnvParameter4dARB = GLEW_GET_FUN(__glewProgramEnvParameter4dARB);
pub const glProgramEnvParameter4dvARB = GLEW_GET_FUN(__glewProgramEnvParameter4dvARB);
pub const glProgramEnvParameter4fARB = GLEW_GET_FUN(__glewProgramEnvParameter4fARB);
pub const glProgramEnvParameter4fvARB = GLEW_GET_FUN(__glewProgramEnvParameter4fvARB);
pub const glProgramLocalParameter4dARB = GLEW_GET_FUN(__glewProgramLocalParameter4dARB);
pub const glProgramLocalParameter4dvARB = GLEW_GET_FUN(__glewProgramLocalParameter4dvARB);
pub const glProgramLocalParameter4fARB = GLEW_GET_FUN(__glewProgramLocalParameter4fARB);
pub const glProgramLocalParameter4fvARB = GLEW_GET_FUN(__glewProgramLocalParameter4fvARB);
pub const glProgramStringARB = GLEW_GET_FUN(__glewProgramStringARB);
pub const glVertexAttrib1dARB = GLEW_GET_FUN(__glewVertexAttrib1dARB);
pub const glVertexAttrib1dvARB = GLEW_GET_FUN(__glewVertexAttrib1dvARB);
pub const glVertexAttrib1fARB = GLEW_GET_FUN(__glewVertexAttrib1fARB);
pub const glVertexAttrib1fvARB = GLEW_GET_FUN(__glewVertexAttrib1fvARB);
pub const glVertexAttrib1sARB = GLEW_GET_FUN(__glewVertexAttrib1sARB);
pub const glVertexAttrib1svARB = GLEW_GET_FUN(__glewVertexAttrib1svARB);
pub const glVertexAttrib2dARB = GLEW_GET_FUN(__glewVertexAttrib2dARB);
pub const glVertexAttrib2dvARB = GLEW_GET_FUN(__glewVertexAttrib2dvARB);
pub const glVertexAttrib2fARB = GLEW_GET_FUN(__glewVertexAttrib2fARB);
pub const glVertexAttrib2fvARB = GLEW_GET_FUN(__glewVertexAttrib2fvARB);
pub const glVertexAttrib2sARB = GLEW_GET_FUN(__glewVertexAttrib2sARB);
pub const glVertexAttrib2svARB = GLEW_GET_FUN(__glewVertexAttrib2svARB);
pub const glVertexAttrib3dARB = GLEW_GET_FUN(__glewVertexAttrib3dARB);
pub const glVertexAttrib3dvARB = GLEW_GET_FUN(__glewVertexAttrib3dvARB);
pub const glVertexAttrib3fARB = GLEW_GET_FUN(__glewVertexAttrib3fARB);
pub const glVertexAttrib3fvARB = GLEW_GET_FUN(__glewVertexAttrib3fvARB);
pub const glVertexAttrib3sARB = GLEW_GET_FUN(__glewVertexAttrib3sARB);
pub const glVertexAttrib3svARB = GLEW_GET_FUN(__glewVertexAttrib3svARB);
pub const glVertexAttrib4NbvARB = GLEW_GET_FUN(__glewVertexAttrib4NbvARB);
pub const glVertexAttrib4NivARB = GLEW_GET_FUN(__glewVertexAttrib4NivARB);
pub const glVertexAttrib4NsvARB = GLEW_GET_FUN(__glewVertexAttrib4NsvARB);
pub const glVertexAttrib4NubARB = GLEW_GET_FUN(__glewVertexAttrib4NubARB);
pub const glVertexAttrib4NubvARB = GLEW_GET_FUN(__glewVertexAttrib4NubvARB);
pub const glVertexAttrib4NuivARB = GLEW_GET_FUN(__glewVertexAttrib4NuivARB);
pub const glVertexAttrib4NusvARB = GLEW_GET_FUN(__glewVertexAttrib4NusvARB);
pub const glVertexAttrib4bvARB = GLEW_GET_FUN(__glewVertexAttrib4bvARB);
pub const glVertexAttrib4dARB = GLEW_GET_FUN(__glewVertexAttrib4dARB);
pub const glVertexAttrib4dvARB = GLEW_GET_FUN(__glewVertexAttrib4dvARB);
pub const glVertexAttrib4fARB = GLEW_GET_FUN(__glewVertexAttrib4fARB);
pub const glVertexAttrib4fvARB = GLEW_GET_FUN(__glewVertexAttrib4fvARB);
pub const glVertexAttrib4ivARB = GLEW_GET_FUN(__glewVertexAttrib4ivARB);
pub const glVertexAttrib4sARB = GLEW_GET_FUN(__glewVertexAttrib4sARB);
pub const glVertexAttrib4svARB = GLEW_GET_FUN(__glewVertexAttrib4svARB);
pub const glVertexAttrib4ubvARB = GLEW_GET_FUN(__glewVertexAttrib4ubvARB);
pub const glVertexAttrib4uivARB = GLEW_GET_FUN(__glewVertexAttrib4uivARB);
pub const glVertexAttrib4usvARB = GLEW_GET_FUN(__glewVertexAttrib4usvARB);
pub const glVertexAttribPointerARB = GLEW_GET_FUN(__glewVertexAttribPointerARB);
pub const GLEW_ARB_vertex_program = GLEW_GET_VAR(__GLEW_ARB_vertex_program);
pub const GL_ARB_vertex_shader = @as(c_int, 1);
pub const GL_VERTEX_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const glBindAttribLocationARB = GLEW_GET_FUN(__glewBindAttribLocationARB);
pub const glGetActiveAttribARB = GLEW_GET_FUN(__glewGetActiveAttribARB);
pub const glGetAttribLocationARB = GLEW_GET_FUN(__glewGetAttribLocationARB);
pub const GLEW_ARB_vertex_shader = GLEW_GET_VAR(__GLEW_ARB_vertex_shader);
pub const GL_ARB_vertex_type_10f_11f_11f_rev = @as(c_int, 1);
pub const GLEW_ARB_vertex_type_10f_11f_11f_rev = GLEW_GET_VAR(__GLEW_ARB_vertex_type_10f_11f_11f_rev);
pub const GL_ARB_vertex_type_2_10_10_10_rev = @as(c_int, 1);
pub const GL_UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const GL_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9F, .hexadecimal);
pub const glColorP3ui = GLEW_GET_FUN(__glewColorP3ui);
pub const glColorP3uiv = GLEW_GET_FUN(__glewColorP3uiv);
pub const glColorP4ui = GLEW_GET_FUN(__glewColorP4ui);
pub const glColorP4uiv = GLEW_GET_FUN(__glewColorP4uiv);
pub const glMultiTexCoordP1ui = GLEW_GET_FUN(__glewMultiTexCoordP1ui);
pub const glMultiTexCoordP1uiv = GLEW_GET_FUN(__glewMultiTexCoordP1uiv);
pub const glMultiTexCoordP2ui = GLEW_GET_FUN(__glewMultiTexCoordP2ui);
pub const glMultiTexCoordP2uiv = GLEW_GET_FUN(__glewMultiTexCoordP2uiv);
pub const glMultiTexCoordP3ui = GLEW_GET_FUN(__glewMultiTexCoordP3ui);
pub const glMultiTexCoordP3uiv = GLEW_GET_FUN(__glewMultiTexCoordP3uiv);
pub const glMultiTexCoordP4ui = GLEW_GET_FUN(__glewMultiTexCoordP4ui);
pub const glMultiTexCoordP4uiv = GLEW_GET_FUN(__glewMultiTexCoordP4uiv);
pub const glNormalP3ui = GLEW_GET_FUN(__glewNormalP3ui);
pub const glNormalP3uiv = GLEW_GET_FUN(__glewNormalP3uiv);
pub const glSecondaryColorP3ui = GLEW_GET_FUN(__glewSecondaryColorP3ui);
pub const glSecondaryColorP3uiv = GLEW_GET_FUN(__glewSecondaryColorP3uiv);
pub const glTexCoordP1ui = GLEW_GET_FUN(__glewTexCoordP1ui);
pub const glTexCoordP1uiv = GLEW_GET_FUN(__glewTexCoordP1uiv);
pub const glTexCoordP2ui = GLEW_GET_FUN(__glewTexCoordP2ui);
pub const glTexCoordP2uiv = GLEW_GET_FUN(__glewTexCoordP2uiv);
pub const glTexCoordP3ui = GLEW_GET_FUN(__glewTexCoordP3ui);
pub const glTexCoordP3uiv = GLEW_GET_FUN(__glewTexCoordP3uiv);
pub const glTexCoordP4ui = GLEW_GET_FUN(__glewTexCoordP4ui);
pub const glTexCoordP4uiv = GLEW_GET_FUN(__glewTexCoordP4uiv);
pub const glVertexAttribP1ui = GLEW_GET_FUN(__glewVertexAttribP1ui);
pub const glVertexAttribP1uiv = GLEW_GET_FUN(__glewVertexAttribP1uiv);
pub const glVertexAttribP2ui = GLEW_GET_FUN(__glewVertexAttribP2ui);
pub const glVertexAttribP2uiv = GLEW_GET_FUN(__glewVertexAttribP2uiv);
pub const glVertexAttribP3ui = GLEW_GET_FUN(__glewVertexAttribP3ui);
pub const glVertexAttribP3uiv = GLEW_GET_FUN(__glewVertexAttribP3uiv);
pub const glVertexAttribP4ui = GLEW_GET_FUN(__glewVertexAttribP4ui);
pub const glVertexAttribP4uiv = GLEW_GET_FUN(__glewVertexAttribP4uiv);
pub const glVertexP2ui = GLEW_GET_FUN(__glewVertexP2ui);
pub const glVertexP2uiv = GLEW_GET_FUN(__glewVertexP2uiv);
pub const glVertexP3ui = GLEW_GET_FUN(__glewVertexP3ui);
pub const glVertexP3uiv = GLEW_GET_FUN(__glewVertexP3uiv);
pub const glVertexP4ui = GLEW_GET_FUN(__glewVertexP4ui);
pub const glVertexP4uiv = GLEW_GET_FUN(__glewVertexP4uiv);
pub const GLEW_ARB_vertex_type_2_10_10_10_rev = GLEW_GET_VAR(__GLEW_ARB_vertex_type_2_10_10_10_rev);
pub const GL_ARB_viewport_array = @as(c_int, 1);
pub const GL_MAX_VIEWPORTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_BOUNDS_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_LAYER_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const GL_UNDEFINED_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const glDepthRangeArrayv = GLEW_GET_FUN(__glewDepthRangeArrayv);
pub const glDepthRangeIndexed = GLEW_GET_FUN(__glewDepthRangeIndexed);
pub const glGetDoublei_v = GLEW_GET_FUN(__glewGetDoublei_v);
pub const glGetFloati_v = GLEW_GET_FUN(__glewGetFloati_v);
pub const glScissorArrayv = GLEW_GET_FUN(__glewScissorArrayv);
pub const glScissorIndexed = GLEW_GET_FUN(__glewScissorIndexed);
pub const glScissorIndexedv = GLEW_GET_FUN(__glewScissorIndexedv);
pub const glViewportArrayv = GLEW_GET_FUN(__glewViewportArrayv);
pub const glViewportIndexedf = GLEW_GET_FUN(__glewViewportIndexedf);
pub const glViewportIndexedfv = GLEW_GET_FUN(__glewViewportIndexedfv);
pub const GLEW_ARB_viewport_array = GLEW_GET_VAR(__GLEW_ARB_viewport_array);
pub const GL_ARB_window_pos = @as(c_int, 1);
pub const glWindowPos2dARB = GLEW_GET_FUN(__glewWindowPos2dARB);
pub const glWindowPos2dvARB = GLEW_GET_FUN(__glewWindowPos2dvARB);
pub const glWindowPos2fARB = GLEW_GET_FUN(__glewWindowPos2fARB);
pub const glWindowPos2fvARB = GLEW_GET_FUN(__glewWindowPos2fvARB);
pub const glWindowPos2iARB = GLEW_GET_FUN(__glewWindowPos2iARB);
pub const glWindowPos2ivARB = GLEW_GET_FUN(__glewWindowPos2ivARB);
pub const glWindowPos2sARB = GLEW_GET_FUN(__glewWindowPos2sARB);
pub const glWindowPos2svARB = GLEW_GET_FUN(__glewWindowPos2svARB);
pub const glWindowPos3dARB = GLEW_GET_FUN(__glewWindowPos3dARB);
pub const glWindowPos3dvARB = GLEW_GET_FUN(__glewWindowPos3dvARB);
pub const glWindowPos3fARB = GLEW_GET_FUN(__glewWindowPos3fARB);
pub const glWindowPos3fvARB = GLEW_GET_FUN(__glewWindowPos3fvARB);
pub const glWindowPos3iARB = GLEW_GET_FUN(__glewWindowPos3iARB);
pub const glWindowPos3ivARB = GLEW_GET_FUN(__glewWindowPos3ivARB);
pub const glWindowPos3sARB = GLEW_GET_FUN(__glewWindowPos3sARB);
pub const glWindowPos3svARB = GLEW_GET_FUN(__glewWindowPos3svARB);
pub const GLEW_ARB_window_pos = GLEW_GET_VAR(__GLEW_ARB_window_pos);
pub const GL_ARM_mali_program_binary = @as(c_int, 1);
pub const GL_MALI_PROGRAM_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F61, .hexadecimal);
pub const GLEW_ARM_mali_program_binary = GLEW_GET_VAR(__GLEW_ARM_mali_program_binary);
pub const GL_ARM_mali_shader_binary = @as(c_int, 1);
pub const GL_MALI_SHADER_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F60, .hexadecimal);
pub const GLEW_ARM_mali_shader_binary = GLEW_GET_VAR(__GLEW_ARM_mali_shader_binary);
pub const GL_ARM_rgba8 = @as(c_int, 1);
pub const GL_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GLEW_ARM_rgba8 = GLEW_GET_VAR(__GLEW_ARM_rgba8);
pub const GL_ARM_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FETCH_PER_SAMPLE_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F65, .hexadecimal);
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F66, .hexadecimal);
pub const GLEW_ARM_shader_framebuffer_fetch = GLEW_GET_VAR(__GLEW_ARM_shader_framebuffer_fetch);
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil = @as(c_int, 1);
pub const GLEW_ARM_shader_framebuffer_fetch_depth_stencil = GLEW_GET_VAR(__GLEW_ARM_shader_framebuffer_fetch_depth_stencil);
pub const GL_ARM_texture_unnormalized_coordinates = @as(c_int, 1);
pub const GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F6A, .hexadecimal);
pub const GLEW_ARM_texture_unnormalized_coordinates = GLEW_GET_VAR(__GLEW_ARM_texture_unnormalized_coordinates);
pub const GL_ATIX_point_sprites = @as(c_int, 1);
pub const GL_TEXTURE_POINT_MODE_ATIX = @as(c_int, 0x60B0);
pub const GL_TEXTURE_POINT_ONE_COORD_ATIX = @as(c_int, 0x60B1);
pub const GL_TEXTURE_POINT_SPRITE_ATIX = @as(c_int, 0x60B2);
pub const GL_POINT_SPRITE_CULL_MODE_ATIX = @as(c_int, 0x60B3);
pub const GL_POINT_SPRITE_CULL_CENTER_ATIX = @as(c_int, 0x60B4);
pub const GL_POINT_SPRITE_CULL_CLIP_ATIX = @as(c_int, 0x60B5);
pub const GLEW_ATIX_point_sprites = GLEW_GET_VAR(__GLEW_ATIX_point_sprites);
pub const GL_ATIX_texture_env_combine3 = @as(c_int, 1);
pub const GL_MODULATE_ADD_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hexadecimal);
pub const GL_MODULATE_SIGNED_ADD_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hexadecimal);
pub const GL_MODULATE_SUBTRACT_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hexadecimal);
pub const GLEW_ATIX_texture_env_combine3 = GLEW_GET_VAR(__GLEW_ATIX_texture_env_combine3);
pub const GL_ATIX_texture_env_route = @as(c_int, 1);
pub const GL_SECONDARY_COLOR_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8747, .hexadecimal);
pub const GL_TEXTURE_OUTPUT_RGB_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8748, .hexadecimal);
pub const GL_TEXTURE_OUTPUT_ALPHA_ATIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8749, .hexadecimal);
pub const GLEW_ATIX_texture_env_route = GLEW_GET_VAR(__GLEW_ATIX_texture_env_route);
pub const GL_ATIX_vertex_shader_output_point_size = @as(c_int, 1);
pub const GL_OUTPUT_POINT_SIZE_ATIX = @as(c_int, 0x610E);
pub const GLEW_ATIX_vertex_shader_output_point_size = GLEW_GET_VAR(__GLEW_ATIX_vertex_shader_output_point_size);
pub const GL_ATI_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const glDrawBuffersATI = GLEW_GET_FUN(__glewDrawBuffersATI);
pub const GLEW_ATI_draw_buffers = GLEW_GET_VAR(__GLEW_ATI_draw_buffers);
pub const GL_ATI_element_array = @as(c_int, 1);
pub const GL_ELEMENT_ARRAY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8768, .hexadecimal);
pub const GL_ELEMENT_ARRAY_TYPE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8769, .hexadecimal);
pub const GL_ELEMENT_ARRAY_POINTER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876A, .hexadecimal);
pub const glDrawElementArrayATI = GLEW_GET_FUN(__glewDrawElementArrayATI);
pub const glDrawRangeElementArrayATI = GLEW_GET_FUN(__glewDrawRangeElementArrayATI);
pub const glElementPointerATI = GLEW_GET_FUN(__glewElementPointerATI);
pub const GLEW_ATI_element_array = GLEW_GET_VAR(__GLEW_ATI_element_array);
pub const GL_ATI_envmap_bumpmap = @as(c_int, 1);
pub const GL_BUMP_ROT_MATRIX_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8775, .hexadecimal);
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8776, .hexadecimal);
pub const GL_BUMP_NUM_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8777, .hexadecimal);
pub const GL_BUMP_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8778, .hexadecimal);
pub const GL_DUDV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8779, .hexadecimal);
pub const GL_DU8DV8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877A, .hexadecimal);
pub const GL_BUMP_ENVMAP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877B, .hexadecimal);
pub const GL_BUMP_TARGET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877C, .hexadecimal);
pub const glGetTexBumpParameterfvATI = GLEW_GET_FUN(__glewGetTexBumpParameterfvATI);
pub const glGetTexBumpParameterivATI = GLEW_GET_FUN(__glewGetTexBumpParameterivATI);
pub const glTexBumpParameterfvATI = GLEW_GET_FUN(__glewTexBumpParameterfvATI);
pub const glTexBumpParameterivATI = GLEW_GET_FUN(__glewTexBumpParameterivATI);
pub const GLEW_ATI_envmap_bumpmap = GLEW_GET_VAR(__GLEW_ATI_envmap_bumpmap);
pub const GL_ATI_fragment_shader = @as(c_int, 1);
pub const GL_2X_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_RED_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_4X_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_COMP_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_GREEN_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_8X_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BLUE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_NEGATE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BIAS_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_HALF_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_QUARTER_BIT_ATI = @as(c_int, 0x00000010);
pub const GL_EIGHTH_BIT_ATI = @as(c_int, 0x00000020);
pub const GL_SATURATE_BIT_ATI = @as(c_int, 0x00000040);
pub const GL_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8920, .hexadecimal);
pub const GL_REG_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8921, .hexadecimal);
pub const GL_REG_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8922, .hexadecimal);
pub const GL_REG_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8923, .hexadecimal);
pub const GL_REG_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8924, .hexadecimal);
pub const GL_REG_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8925, .hexadecimal);
pub const GL_REG_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8926, .hexadecimal);
pub const GL_CON_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8941, .hexadecimal);
pub const GL_CON_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8942, .hexadecimal);
pub const GL_CON_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8943, .hexadecimal);
pub const GL_CON_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8944, .hexadecimal);
pub const GL_CON_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8945, .hexadecimal);
pub const GL_CON_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8946, .hexadecimal);
pub const GL_CON_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8947, .hexadecimal);
pub const GL_CON_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8948, .hexadecimal);
pub const GL_MOV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8961, .hexadecimal);
pub const GL_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8963, .hexadecimal);
pub const GL_MUL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8964, .hexadecimal);
pub const GL_SUB_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8965, .hexadecimal);
pub const GL_DOT3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8966, .hexadecimal);
pub const GL_DOT4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8967, .hexadecimal);
pub const GL_MAD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8968, .hexadecimal);
pub const GL_LERP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8969, .hexadecimal);
pub const GL_CND_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896A, .hexadecimal);
pub const GL_CND0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896B, .hexadecimal);
pub const GL_DOT2_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896C, .hexadecimal);
pub const GL_SECONDARY_INTERPOLATOR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896D, .hexadecimal);
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896E, .hexadecimal);
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896F, .hexadecimal);
pub const GL_NUM_PASSES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8970, .hexadecimal);
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8971, .hexadecimal);
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8972, .hexadecimal);
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8973, .hexadecimal);
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8974, .hexadecimal);
pub const GL_COLOR_ALPHA_PAIRING_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8975, .hexadecimal);
pub const GL_SWIZZLE_STR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8976, .hexadecimal);
pub const GL_SWIZZLE_STQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8977, .hexadecimal);
pub const GL_SWIZZLE_STR_DR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8978, .hexadecimal);
pub const GL_SWIZZLE_STQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8979, .hexadecimal);
pub const GL_SWIZZLE_STRQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897A, .hexadecimal);
pub const GL_SWIZZLE_STRQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897B, .hexadecimal);
pub const glAlphaFragmentOp1ATI = GLEW_GET_FUN(__glewAlphaFragmentOp1ATI);
pub const glAlphaFragmentOp2ATI = GLEW_GET_FUN(__glewAlphaFragmentOp2ATI);
pub const glAlphaFragmentOp3ATI = GLEW_GET_FUN(__glewAlphaFragmentOp3ATI);
pub const glBeginFragmentShaderATI = GLEW_GET_FUN(__glewBeginFragmentShaderATI);
pub const glBindFragmentShaderATI = GLEW_GET_FUN(__glewBindFragmentShaderATI);
pub const glColorFragmentOp1ATI = GLEW_GET_FUN(__glewColorFragmentOp1ATI);
pub const glColorFragmentOp2ATI = GLEW_GET_FUN(__glewColorFragmentOp2ATI);
pub const glColorFragmentOp3ATI = GLEW_GET_FUN(__glewColorFragmentOp3ATI);
pub const glDeleteFragmentShaderATI = GLEW_GET_FUN(__glewDeleteFragmentShaderATI);
pub const glEndFragmentShaderATI = GLEW_GET_FUN(__glewEndFragmentShaderATI);
pub const glGenFragmentShadersATI = GLEW_GET_FUN(__glewGenFragmentShadersATI);
pub const glPassTexCoordATI = GLEW_GET_FUN(__glewPassTexCoordATI);
pub const glSampleMapATI = GLEW_GET_FUN(__glewSampleMapATI);
pub const glSetFragmentShaderConstantATI = GLEW_GET_FUN(__glewSetFragmentShaderConstantATI);
pub const GLEW_ATI_fragment_shader = GLEW_GET_VAR(__GLEW_ATI_fragment_shader);
pub const GL_ATI_map_object_buffer = @as(c_int, 1);
pub const glMapObjectBufferATI = GLEW_GET_FUN(__glewMapObjectBufferATI);
pub const glUnmapObjectBufferATI = GLEW_GET_FUN(__glewUnmapObjectBufferATI);
pub const GLEW_ATI_map_object_buffer = GLEW_GET_VAR(__GLEW_ATI_map_object_buffer);
pub const GL_ATI_meminfo = @as(c_int, 1);
pub const GL_VBO_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FB, .hexadecimal);
pub const GL_TEXTURE_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FC, .hexadecimal);
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FD, .hexadecimal);
pub const GLEW_ATI_meminfo = GLEW_GET_VAR(__GLEW_ATI_meminfo);
pub const GL_ATI_pn_triangles = @as(c_int, 1);
pub const GL_PN_TRIANGLES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F0, .hexadecimal);
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F1, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F2, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F3, .hexadecimal);
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F4, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F5, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F6, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F7, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F8, .hexadecimal);
pub const glPNTrianglesfATI = GLEW_GET_FUN(__glewPNTrianglesfATI);
pub const glPNTrianglesiATI = GLEW_GET_FUN(__glewPNTrianglesiATI);
pub const GLEW_ATI_pn_triangles = GLEW_GET_VAR(__GLEW_ATI_pn_triangles);
pub const GL_ATI_separate_stencil = @as(c_int, 1);
pub const GL_STENCIL_BACK_FUNC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const glStencilFuncSeparateATI = GLEW_GET_FUN(__glewStencilFuncSeparateATI);
pub const glStencilOpSeparateATI = GLEW_GET_FUN(__glewStencilOpSeparateATI);
pub const GLEW_ATI_separate_stencil = GLEW_GET_VAR(__GLEW_ATI_separate_stencil);
pub const GL_ATI_shader_texture_lod = @as(c_int, 1);
pub const GLEW_ATI_shader_texture_lod = GLEW_GET_VAR(__GLEW_ATI_shader_texture_lod);
pub const GL_ATI_text_fragment_shader = @as(c_int, 1);
pub const GL_TEXT_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8200, .hexadecimal);
pub const GLEW_ATI_text_fragment_shader = GLEW_GET_VAR(__GLEW_ATI_text_fragment_shader);
pub const GL_ATI_texture_compression_3dc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8837, .hexadecimal);
pub const GLEW_ATI_texture_compression_3dc = GLEW_GET_VAR(__GLEW_ATI_texture_compression_3dc);
pub const GL_ATI_texture_env_combine3 = @as(c_int, 1);
pub const GL_MODULATE_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hexadecimal);
pub const GL_MODULATE_SIGNED_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hexadecimal);
pub const GL_MODULATE_SUBTRACT_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hexadecimal);
pub const GLEW_ATI_texture_env_combine3 = GLEW_GET_VAR(__GLEW_ATI_texture_env_combine3);
pub const GL_ATI_texture_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGB_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_INTENSITY_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_LUMINANCE_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_RGBA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGB_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_INTENSITY_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_LUMINANCE_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GLEW_ATI_texture_float = GLEW_GET_VAR(__GLEW_ATI_texture_float);
pub const GL_ATI_texture_mirror_once = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GLEW_ATI_texture_mirror_once = GLEW_GET_VAR(__GLEW_ATI_texture_mirror_once);
pub const GL_ATI_vertex_array_object = @as(c_int, 1);
pub const GL_STATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8760, .hexadecimal);
pub const GL_DYNAMIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8761, .hexadecimal);
pub const GL_PRESERVE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8762, .hexadecimal);
pub const GL_DISCARD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8763, .hexadecimal);
pub const GL_OBJECT_BUFFER_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_OBJECT_BUFFER_USAGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_ARRAY_OBJECT_BUFFER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8766, .hexadecimal);
pub const GL_ARRAY_OBJECT_OFFSET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8767, .hexadecimal);
pub const glArrayObjectATI = GLEW_GET_FUN(__glewArrayObjectATI);
pub const glFreeObjectBufferATI = GLEW_GET_FUN(__glewFreeObjectBufferATI);
pub const glGetArrayObjectfvATI = GLEW_GET_FUN(__glewGetArrayObjectfvATI);
pub const glGetArrayObjectivATI = GLEW_GET_FUN(__glewGetArrayObjectivATI);
pub const glGetObjectBufferfvATI = GLEW_GET_FUN(__glewGetObjectBufferfvATI);
pub const glGetObjectBufferivATI = GLEW_GET_FUN(__glewGetObjectBufferivATI);
pub const glGetVariantArrayObjectfvATI = GLEW_GET_FUN(__glewGetVariantArrayObjectfvATI);
pub const glGetVariantArrayObjectivATI = GLEW_GET_FUN(__glewGetVariantArrayObjectivATI);
pub const glIsObjectBufferATI = GLEW_GET_FUN(__glewIsObjectBufferATI);
pub const glNewObjectBufferATI = GLEW_GET_FUN(__glewNewObjectBufferATI);
pub const glUpdateObjectBufferATI = GLEW_GET_FUN(__glewUpdateObjectBufferATI);
pub const glVariantArrayObjectATI = GLEW_GET_FUN(__glewVariantArrayObjectATI);
pub const GLEW_ATI_vertex_array_object = GLEW_GET_VAR(__GLEW_ATI_vertex_array_object);
pub const GL_ATI_vertex_attrib_array_object = @as(c_int, 1);
pub const glGetVertexAttribArrayObjectfvATI = GLEW_GET_FUN(__glewGetVertexAttribArrayObjectfvATI);
pub const glGetVertexAttribArrayObjectivATI = GLEW_GET_FUN(__glewGetVertexAttribArrayObjectivATI);
pub const glVertexAttribArrayObjectATI = GLEW_GET_FUN(__glewVertexAttribArrayObjectATI);
pub const GLEW_ATI_vertex_attrib_array_object = GLEW_GET_VAR(__GLEW_ATI_vertex_attrib_array_object);
pub const GL_ATI_vertex_streams = @as(c_int, 1);
pub const GL_MAX_VERTEX_STREAMS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876B, .hexadecimal);
pub const GL_VERTEX_SOURCE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876C, .hexadecimal);
pub const GL_VERTEX_STREAM0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876D, .hexadecimal);
pub const GL_VERTEX_STREAM1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876E, .hexadecimal);
pub const GL_VERTEX_STREAM2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876F, .hexadecimal);
pub const GL_VERTEX_STREAM3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8770, .hexadecimal);
pub const GL_VERTEX_STREAM4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8771, .hexadecimal);
pub const GL_VERTEX_STREAM5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8772, .hexadecimal);
pub const GL_VERTEX_STREAM6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8773, .hexadecimal);
pub const GL_VERTEX_STREAM7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8774, .hexadecimal);
pub const glClientActiveVertexStreamATI = GLEW_GET_FUN(__glewClientActiveVertexStreamATI);
pub const glNormalStream3bATI = GLEW_GET_FUN(__glewNormalStream3bATI);
pub const glNormalStream3bvATI = GLEW_GET_FUN(__glewNormalStream3bvATI);
pub const glNormalStream3dATI = GLEW_GET_FUN(__glewNormalStream3dATI);
pub const glNormalStream3dvATI = GLEW_GET_FUN(__glewNormalStream3dvATI);
pub const glNormalStream3fATI = GLEW_GET_FUN(__glewNormalStream3fATI);
pub const glNormalStream3fvATI = GLEW_GET_FUN(__glewNormalStream3fvATI);
pub const glNormalStream3iATI = GLEW_GET_FUN(__glewNormalStream3iATI);
pub const glNormalStream3ivATI = GLEW_GET_FUN(__glewNormalStream3ivATI);
pub const glNormalStream3sATI = GLEW_GET_FUN(__glewNormalStream3sATI);
pub const glNormalStream3svATI = GLEW_GET_FUN(__glewNormalStream3svATI);
pub const glVertexBlendEnvfATI = GLEW_GET_FUN(__glewVertexBlendEnvfATI);
pub const glVertexBlendEnviATI = GLEW_GET_FUN(__glewVertexBlendEnviATI);
pub const glVertexStream1dATI = GLEW_GET_FUN(__glewVertexStream1dATI);
pub const glVertexStream1dvATI = GLEW_GET_FUN(__glewVertexStream1dvATI);
pub const glVertexStream1fATI = GLEW_GET_FUN(__glewVertexStream1fATI);
pub const glVertexStream1fvATI = GLEW_GET_FUN(__glewVertexStream1fvATI);
pub const glVertexStream1iATI = GLEW_GET_FUN(__glewVertexStream1iATI);
pub const glVertexStream1ivATI = GLEW_GET_FUN(__glewVertexStream1ivATI);
pub const glVertexStream1sATI = GLEW_GET_FUN(__glewVertexStream1sATI);
pub const glVertexStream1svATI = GLEW_GET_FUN(__glewVertexStream1svATI);
pub const glVertexStream2dATI = GLEW_GET_FUN(__glewVertexStream2dATI);
pub const glVertexStream2dvATI = GLEW_GET_FUN(__glewVertexStream2dvATI);
pub const glVertexStream2fATI = GLEW_GET_FUN(__glewVertexStream2fATI);
pub const glVertexStream2fvATI = GLEW_GET_FUN(__glewVertexStream2fvATI);
pub const glVertexStream2iATI = GLEW_GET_FUN(__glewVertexStream2iATI);
pub const glVertexStream2ivATI = GLEW_GET_FUN(__glewVertexStream2ivATI);
pub const glVertexStream2sATI = GLEW_GET_FUN(__glewVertexStream2sATI);
pub const glVertexStream2svATI = GLEW_GET_FUN(__glewVertexStream2svATI);
pub const glVertexStream3dATI = GLEW_GET_FUN(__glewVertexStream3dATI);
pub const glVertexStream3dvATI = GLEW_GET_FUN(__glewVertexStream3dvATI);
pub const glVertexStream3fATI = GLEW_GET_FUN(__glewVertexStream3fATI);
pub const glVertexStream3fvATI = GLEW_GET_FUN(__glewVertexStream3fvATI);
pub const glVertexStream3iATI = GLEW_GET_FUN(__glewVertexStream3iATI);
pub const glVertexStream3ivATI = GLEW_GET_FUN(__glewVertexStream3ivATI);
pub const glVertexStream3sATI = GLEW_GET_FUN(__glewVertexStream3sATI);
pub const glVertexStream3svATI = GLEW_GET_FUN(__glewVertexStream3svATI);
pub const glVertexStream4dATI = GLEW_GET_FUN(__glewVertexStream4dATI);
pub const glVertexStream4dvATI = GLEW_GET_FUN(__glewVertexStream4dvATI);
pub const glVertexStream4fATI = GLEW_GET_FUN(__glewVertexStream4fATI);
pub const glVertexStream4fvATI = GLEW_GET_FUN(__glewVertexStream4fvATI);
pub const glVertexStream4iATI = GLEW_GET_FUN(__glewVertexStream4iATI);
pub const glVertexStream4ivATI = GLEW_GET_FUN(__glewVertexStream4ivATI);
pub const glVertexStream4sATI = GLEW_GET_FUN(__glewVertexStream4sATI);
pub const glVertexStream4svATI = GLEW_GET_FUN(__glewVertexStream4svATI);
pub const GLEW_ATI_vertex_streams = GLEW_GET_VAR(__GLEW_ATI_vertex_streams);
pub const GL_DMP_program_binary = @as(c_int, 1);
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9251, .hexadecimal);
pub const GL_SMAPHS_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9252, .hexadecimal);
pub const GL_DMP_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9253, .hexadecimal);
pub const GLEW_DMP_program_binary = GLEW_GET_VAR(__GLEW_DMP_program_binary);
pub const GL_DMP_shader_binary = @as(c_int, 1);
pub const GL_SHADER_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9250, .hexadecimal);
pub const GLEW_DMP_shader_binary = GLEW_GET_VAR(__GLEW_DMP_shader_binary);
pub const GL_EXT_422_pixels = @as(c_int, 1);
pub const GL_422_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CC, .hexadecimal);
pub const GL_422_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CD, .hexadecimal);
pub const GL_422_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CE, .hexadecimal);
pub const GL_422_REV_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CF, .hexadecimal);
pub const GLEW_EXT_422_pixels = GLEW_GET_VAR(__GLEW_EXT_422_pixels);
pub const GL_EXT_Cg_shader = @as(c_int, 1);
pub const GL_CG_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x890E, .hexadecimal);
pub const GL_CG_FRAGMENT_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x890F, .hexadecimal);
pub const GLEW_EXT_Cg_shader = GLEW_GET_VAR(__GLEW_EXT_Cg_shader);
pub const GL_EXT_EGL_image_array = @as(c_int, 1);
pub const GLEW_EXT_EGL_image_array = GLEW_GET_VAR(__GLEW_EXT_EGL_image_array);
pub const GL_EXT_EGL_image_external_wrap_modes = @as(c_int, 1);
pub const GLEW_EXT_EGL_image_external_wrap_modes = GLEW_GET_VAR(__GLEW_EXT_EGL_image_external_wrap_modes);
pub const GL_EXT_EGL_image_storage = @as(c_int, 1);
pub const glEGLImageTargetTexStorageEXT = GLEW_GET_FUN(__glewEGLImageTargetTexStorageEXT);
pub const glEGLImageTargetTextureStorageEXT = GLEW_GET_FUN(__glewEGLImageTargetTextureStorageEXT);
pub const GLEW_EXT_EGL_image_storage = GLEW_GET_VAR(__GLEW_EXT_EGL_image_storage);
pub const GL_EXT_EGL_sync = @as(c_int, 1);
pub const GLEW_EXT_EGL_sync = GLEW_GET_VAR(__GLEW_EXT_EGL_sync);
pub const GL_EXT_YUV_target = @as(c_int, 1);
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BE7, .hexadecimal);
pub const GLEW_EXT_YUV_target = GLEW_GET_VAR(__GLEW_EXT_YUV_target);
pub const GL_EXT_abgr = @as(c_int, 1);
pub const GL_ABGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const GLEW_EXT_abgr = GLEW_GET_VAR(__GLEW_EXT_abgr);
pub const GL_EXT_base_instance = @as(c_int, 1);
pub const glDrawArraysInstancedBaseInstanceEXT = GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstanceEXT);
pub const glDrawElementsInstancedBaseInstanceEXT = GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstanceEXT);
pub const glDrawElementsInstancedBaseVertexBaseInstanceEXT = GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstanceEXT);
pub const GLEW_EXT_base_instance = GLEW_GET_VAR(__GLEW_EXT_base_instance);
pub const GL_EXT_bgra = @as(c_int, 1);
pub const GL_BGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GLEW_EXT_bgra = GLEW_GET_VAR(__GLEW_EXT_bgra);
pub const GL_EXT_bindable_uniform = @as(c_int, 1);
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE2, .hexadecimal);
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE3, .hexadecimal);
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE4, .hexadecimal);
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DED, .hexadecimal);
pub const GL_UNIFORM_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEE, .hexadecimal);
pub const GL_UNIFORM_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEF, .hexadecimal);
pub const glGetUniformBufferSizeEXT = GLEW_GET_FUN(__glewGetUniformBufferSizeEXT);
pub const glGetUniformOffsetEXT = GLEW_GET_FUN(__glewGetUniformOffsetEXT);
pub const glUniformBufferEXT = GLEW_GET_FUN(__glewUniformBufferEXT);
pub const GLEW_EXT_bindable_uniform = GLEW_GET_VAR(__GLEW_EXT_bindable_uniform);
pub const GL_EXT_blend_color = @as(c_int, 1);
pub const GL_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_BLEND_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const glBlendColorEXT = GLEW_GET_FUN(__glewBlendColorEXT);
pub const GLEW_EXT_blend_color = GLEW_GET_VAR(__GLEW_EXT_blend_color);
pub const GL_EXT_blend_equation_separate = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const glBlendEquationSeparateEXT = GLEW_GET_FUN(__glewBlendEquationSeparateEXT);
pub const GLEW_EXT_blend_equation_separate = GLEW_GET_VAR(__GLEW_EXT_blend_equation_separate);
pub const GL_EXT_blend_func_extended = @as(c_int, 1);
pub const GL_SRC_ALPHA_SATURATE_EXT = @as(c_int, 0x0308);
pub const GL_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hexadecimal);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hexadecimal);
pub const GL_LOCATION_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hexadecimal);
pub const glBindFragDataLocationIndexedEXT = GLEW_GET_FUN(__glewBindFragDataLocationIndexedEXT);
pub const glGetFragDataIndexEXT = GLEW_GET_FUN(__glewGetFragDataIndexEXT);
pub const glGetProgramResourceLocationIndexEXT = GLEW_GET_FUN(__glewGetProgramResourceLocationIndexEXT);
pub const GLEW_EXT_blend_func_extended = GLEW_GET_VAR(__GLEW_EXT_blend_func_extended);
pub const GL_EXT_blend_func_separate = @as(c_int, 1);
pub const GL_BLEND_DST_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_SRC_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_DST_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const glBlendFuncSeparateEXT = GLEW_GET_FUN(__glewBlendFuncSeparateEXT);
pub const GLEW_EXT_blend_func_separate = GLEW_GET_VAR(__GLEW_EXT_blend_func_separate);
pub const GL_EXT_blend_logic_op = @as(c_int, 1);
pub const GLEW_EXT_blend_logic_op = GLEW_GET_VAR(__GLEW_EXT_blend_logic_op);
pub const GL_EXT_blend_minmax = @as(c_int, 1);
pub const GL_FUNC_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_BLEND_EQUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const glBlendEquationEXT = GLEW_GET_FUN(__glewBlendEquationEXT);
pub const GLEW_EXT_blend_minmax = GLEW_GET_VAR(__GLEW_EXT_blend_minmax);
pub const GL_EXT_blend_subtract = @as(c_int, 1);
pub const GL_FUNC_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GLEW_EXT_blend_subtract = GLEW_GET_VAR(__GLEW_EXT_blend_subtract);
pub const GL_EXT_buffer_storage = @as(c_int, 1);
pub const GL_MAP_PERSISTENT_BIT_EXT = @as(c_int, 0x0040);
pub const GL_MAP_COHERENT_BIT_EXT = @as(c_int, 0x0080);
pub const GL_DYNAMIC_STORAGE_BIT_EXT = @as(c_int, 0x0100);
pub const GL_CLIENT_STORAGE_BIT_EXT = @as(c_int, 0x0200);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00004000);
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hexadecimal);
pub const GL_BUFFER_STORAGE_FLAGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hexadecimal);
pub const glBufferStorageEXT = GLEW_GET_FUN(__glewBufferStorageEXT);
pub const glNamedBufferStorageEXT = GLEW_GET_FUN(__glewNamedBufferStorageEXT);
pub const GLEW_EXT_buffer_storage = GLEW_GET_VAR(__GLEW_EXT_buffer_storage);
pub const GL_EXT_clear_texture = @as(c_int, 1);
pub const glClearTexImageEXT = GLEW_GET_FUN(__glewClearTexImageEXT);
pub const glClearTexSubImageEXT = GLEW_GET_FUN(__glewClearTexSubImageEXT);
pub const GLEW_EXT_clear_texture = GLEW_GET_VAR(__GLEW_EXT_clear_texture);
pub const GL_EXT_clip_control = @as(c_int, 1);
pub const GL_LOWER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const GL_UPPER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const GL_CLIP_ORIGIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hexadecimal);
pub const GL_CLIP_DEPTH_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hexadecimal);
pub const GL_NEGATIVE_ONE_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hexadecimal);
pub const GL_ZERO_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hexadecimal);
pub const glClipControlEXT = GLEW_GET_FUN(__glewClipControlEXT);
pub const GLEW_EXT_clip_control = GLEW_GET_VAR(__GLEW_EXT_clip_control);
pub const GL_EXT_clip_cull_distance = @as(c_int, 1);
pub const GL_MAX_CLIP_DISTANCES_EXT = @as(c_int, 0x0D32);
pub const GL_CLIP_DISTANCE0_EXT = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1_EXT = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2_EXT = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3_EXT = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4_EXT = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5_EXT = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6_EXT = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7_EXT = @as(c_int, 0x3007);
pub const GL_MAX_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hexadecimal);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hexadecimal);
pub const GLEW_EXT_clip_cull_distance = GLEW_GET_VAR(__GLEW_EXT_clip_cull_distance);
pub const GL_EXT_clip_volume_hint = @as(c_int, 1);
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80F0, .hexadecimal);
pub const GLEW_EXT_clip_volume_hint = GLEW_GET_VAR(__GLEW_EXT_clip_volume_hint);
pub const GL_EXT_cmyka = @as(c_int, 1);
pub const GL_CMYK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800C, .hexadecimal);
pub const GL_CMYKA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800D, .hexadecimal);
pub const GL_PACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800E, .hexadecimal);
pub const GL_UNPACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800F, .hexadecimal);
pub const GLEW_EXT_cmyka = GLEW_GET_VAR(__GLEW_EXT_cmyka);
pub const GL_EXT_color_buffer_float = @as(c_int, 1);
pub const GLEW_EXT_color_buffer_float = GLEW_GET_VAR(__GLEW_EXT_color_buffer_float);
pub const GL_EXT_color_buffer_half_float = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hexadecimal);
pub const GL_R16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const GL_RG16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const GL_RGBA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGB16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GLEW_EXT_color_buffer_half_float = GLEW_GET_VAR(__GLEW_EXT_color_buffer_half_float);
pub const GL_EXT_color_subtable = @as(c_int, 1);
pub const glColorSubTableEXT = GLEW_GET_FUN(__glewColorSubTableEXT);
pub const glCopyColorSubTableEXT = GLEW_GET_FUN(__glewCopyColorSubTableEXT);
pub const GLEW_EXT_color_subtable = GLEW_GET_VAR(__GLEW_EXT_color_subtable);
pub const GL_EXT_compiled_vertex_array = @as(c_int, 1);
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A8, .hexadecimal);
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A9, .hexadecimal);
pub const glLockArraysEXT = GLEW_GET_FUN(__glewLockArraysEXT);
pub const glUnlockArraysEXT = GLEW_GET_FUN(__glewUnlockArraysEXT);
pub const GLEW_EXT_compiled_vertex_array = GLEW_GET_VAR(__GLEW_EXT_compiled_vertex_array);
pub const GL_EXT_compressed_ETC1_RGB8_sub_texture = @as(c_int, 1);
pub const GLEW_EXT_compressed_ETC1_RGB8_sub_texture = GLEW_GET_VAR(__GLEW_EXT_compressed_ETC1_RGB8_sub_texture);
pub const GL_EXT_conservative_depth = @as(c_int, 1);
pub const GLEW_EXT_conservative_depth = GLEW_GET_VAR(__GLEW_EXT_conservative_depth);
pub const GL_EXT_convolution = @as(c_int, 1);
pub const GL_CONVOLUTION_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const GL_CONVOLUTION_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const GL_SEPARABLE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hexadecimal);
pub const GL_REDUCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hexadecimal);
pub const GL_CONVOLUTION_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hexadecimal);
pub const GL_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hexadecimal);
pub const GL_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hexadecimal);
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hexadecimal);
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hexadecimal);
pub const glConvolutionFilter1DEXT = GLEW_GET_FUN(__glewConvolutionFilter1DEXT);
pub const glConvolutionFilter2DEXT = GLEW_GET_FUN(__glewConvolutionFilter2DEXT);
pub const glConvolutionParameterfEXT = GLEW_GET_FUN(__glewConvolutionParameterfEXT);
pub const glConvolutionParameterfvEXT = GLEW_GET_FUN(__glewConvolutionParameterfvEXT);
pub const glConvolutionParameteriEXT = GLEW_GET_FUN(__glewConvolutionParameteriEXT);
pub const glConvolutionParameterivEXT = GLEW_GET_FUN(__glewConvolutionParameterivEXT);
pub const glCopyConvolutionFilter1DEXT = GLEW_GET_FUN(__glewCopyConvolutionFilter1DEXT);
pub const glCopyConvolutionFilter2DEXT = GLEW_GET_FUN(__glewCopyConvolutionFilter2DEXT);
pub const glGetConvolutionFilterEXT = GLEW_GET_FUN(__glewGetConvolutionFilterEXT);
pub const glGetConvolutionParameterfvEXT = GLEW_GET_FUN(__glewGetConvolutionParameterfvEXT);
pub const glGetConvolutionParameterivEXT = GLEW_GET_FUN(__glewGetConvolutionParameterivEXT);
pub const glGetSeparableFilterEXT = GLEW_GET_FUN(__glewGetSeparableFilterEXT);
pub const glSeparableFilter2DEXT = GLEW_GET_FUN(__glewSeparableFilter2DEXT);
pub const GLEW_EXT_convolution = GLEW_GET_VAR(__GLEW_EXT_convolution);
pub const GL_EXT_coordinate_frame = @as(c_int, 1);
pub const GL_TANGENT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8439, .hexadecimal);
pub const GL_BINORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843A, .hexadecimal);
pub const GL_CURRENT_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843B, .hexadecimal);
pub const GL_CURRENT_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843C, .hexadecimal);
pub const GL_TANGENT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843E, .hexadecimal);
pub const GL_TANGENT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843F, .hexadecimal);
pub const GL_BINORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8440, .hexadecimal);
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8441, .hexadecimal);
pub const GL_TANGENT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8442, .hexadecimal);
pub const GL_BINORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8443, .hexadecimal);
pub const GL_MAP1_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8444, .hexadecimal);
pub const GL_MAP2_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8445, .hexadecimal);
pub const GL_MAP1_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8446, .hexadecimal);
pub const GL_MAP2_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8447, .hexadecimal);
pub const glBinormalPointerEXT = GLEW_GET_FUN(__glewBinormalPointerEXT);
pub const glTangentPointerEXT = GLEW_GET_FUN(__glewTangentPointerEXT);
pub const GLEW_EXT_coordinate_frame = GLEW_GET_VAR(__GLEW_EXT_coordinate_frame);
pub const GL_EXT_copy_image = @as(c_int, 1);
pub const glCopyImageSubDataEXT = GLEW_GET_FUN(__glewCopyImageSubDataEXT);
pub const GLEW_EXT_copy_image = GLEW_GET_VAR(__GLEW_EXT_copy_image);
pub const GL_EXT_copy_texture = @as(c_int, 1);
pub const glCopyTexImage1DEXT = GLEW_GET_FUN(__glewCopyTexImage1DEXT);
pub const glCopyTexImage2DEXT = GLEW_GET_FUN(__glewCopyTexImage2DEXT);
pub const glCopyTexSubImage1DEXT = GLEW_GET_FUN(__glewCopyTexSubImage1DEXT);
pub const glCopyTexSubImage2DEXT = GLEW_GET_FUN(__glewCopyTexSubImage2DEXT);
pub const glCopyTexSubImage3DEXT = GLEW_GET_FUN(__glewCopyTexSubImage3DEXT);
pub const GLEW_EXT_copy_texture = GLEW_GET_VAR(__GLEW_EXT_copy_texture);
pub const GL_EXT_cull_vertex = @as(c_int, 1);
pub const GL_CULL_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AA, .hexadecimal);
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AB, .hexadecimal);
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AC, .hexadecimal);
pub const glCullParameterdvEXT = GLEW_GET_FUN(__glewCullParameterdvEXT);
pub const glCullParameterfvEXT = GLEW_GET_FUN(__glewCullParameterfvEXT);
pub const GLEW_EXT_cull_vertex = GLEW_GET_VAR(__GLEW_EXT_cull_vertex);
pub const GL_EXT_debug_label = @as(c_int, 1);
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4F, .hexadecimal);
pub const GL_PROGRAM_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hexadecimal);
pub const GL_SHADER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hexadecimal);
pub const GL_BUFFER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hexadecimal);
pub const GL_QUERY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hexadecimal);
pub const GL_VERTEX_ARRAY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hexadecimal);
pub const glGetObjectLabelEXT = GLEW_GET_FUN(__glewGetObjectLabelEXT);
pub const glLabelObjectEXT = GLEW_GET_FUN(__glewLabelObjectEXT);
pub const GLEW_EXT_debug_label = GLEW_GET_VAR(__GLEW_EXT_debug_label);
pub const GL_EXT_debug_marker = @as(c_int, 1);
pub const glInsertEventMarkerEXT = GLEW_GET_FUN(__glewInsertEventMarkerEXT);
pub const glPopGroupMarkerEXT = GLEW_GET_FUN(__glewPopGroupMarkerEXT);
pub const glPushGroupMarkerEXT = GLEW_GET_FUN(__glewPushGroupMarkerEXT);
pub const GLEW_EXT_debug_marker = GLEW_GET_VAR(__GLEW_EXT_debug_marker);
pub const GL_EXT_depth_bounds_test = @as(c_int, 1);
pub const GL_DEPTH_BOUNDS_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8890, .hexadecimal);
pub const GL_DEPTH_BOUNDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8891, .hexadecimal);
pub const glDepthBoundsEXT = GLEW_GET_FUN(__glewDepthBoundsEXT);
pub const GLEW_EXT_depth_bounds_test = GLEW_GET_VAR(__GLEW_EXT_depth_bounds_test);
pub const GL_EXT_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GLEW_EXT_depth_clamp = GLEW_GET_VAR(__GLEW_EXT_depth_clamp);
pub const GL_EXT_direct_state_access = @as(c_int, 1);
pub const GL_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2D, .hexadecimal);
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2E, .hexadecimal);
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2F, .hexadecimal);
pub const glBindMultiTextureEXT = GLEW_GET_FUN(__glewBindMultiTextureEXT);
pub const glCheckNamedFramebufferStatusEXT = GLEW_GET_FUN(__glewCheckNamedFramebufferStatusEXT);
pub const glClientAttribDefaultEXT = GLEW_GET_FUN(__glewClientAttribDefaultEXT);
pub const glCompressedMultiTexImage1DEXT = GLEW_GET_FUN(__glewCompressedMultiTexImage1DEXT);
pub const glCompressedMultiTexImage2DEXT = GLEW_GET_FUN(__glewCompressedMultiTexImage2DEXT);
pub const glCompressedMultiTexImage3DEXT = GLEW_GET_FUN(__glewCompressedMultiTexImage3DEXT);
pub const glCompressedMultiTexSubImage1DEXT = GLEW_GET_FUN(__glewCompressedMultiTexSubImage1DEXT);
pub const glCompressedMultiTexSubImage2DEXT = GLEW_GET_FUN(__glewCompressedMultiTexSubImage2DEXT);
pub const glCompressedMultiTexSubImage3DEXT = GLEW_GET_FUN(__glewCompressedMultiTexSubImage3DEXT);
pub const glCompressedTextureImage1DEXT = GLEW_GET_FUN(__glewCompressedTextureImage1DEXT);
pub const glCompressedTextureImage2DEXT = GLEW_GET_FUN(__glewCompressedTextureImage2DEXT);
pub const glCompressedTextureImage3DEXT = GLEW_GET_FUN(__glewCompressedTextureImage3DEXT);
pub const glCompressedTextureSubImage1DEXT = GLEW_GET_FUN(__glewCompressedTextureSubImage1DEXT);
pub const glCompressedTextureSubImage2DEXT = GLEW_GET_FUN(__glewCompressedTextureSubImage2DEXT);
pub const glCompressedTextureSubImage3DEXT = GLEW_GET_FUN(__glewCompressedTextureSubImage3DEXT);
pub const glCopyMultiTexImage1DEXT = GLEW_GET_FUN(__glewCopyMultiTexImage1DEXT);
pub const glCopyMultiTexImage2DEXT = GLEW_GET_FUN(__glewCopyMultiTexImage2DEXT);
pub const glCopyMultiTexSubImage1DEXT = GLEW_GET_FUN(__glewCopyMultiTexSubImage1DEXT);
pub const glCopyMultiTexSubImage2DEXT = GLEW_GET_FUN(__glewCopyMultiTexSubImage2DEXT);
pub const glCopyMultiTexSubImage3DEXT = GLEW_GET_FUN(__glewCopyMultiTexSubImage3DEXT);
pub const glCopyTextureImage1DEXT = GLEW_GET_FUN(__glewCopyTextureImage1DEXT);
pub const glCopyTextureImage2DEXT = GLEW_GET_FUN(__glewCopyTextureImage2DEXT);
pub const glCopyTextureSubImage1DEXT = GLEW_GET_FUN(__glewCopyTextureSubImage1DEXT);
pub const glCopyTextureSubImage2DEXT = GLEW_GET_FUN(__glewCopyTextureSubImage2DEXT);
pub const glCopyTextureSubImage3DEXT = GLEW_GET_FUN(__glewCopyTextureSubImage3DEXT);
pub const glDisableClientStateIndexedEXT = GLEW_GET_FUN(__glewDisableClientStateIndexedEXT);
pub const glDisableClientStateiEXT = GLEW_GET_FUN(__glewDisableClientStateiEXT);
pub const glDisableVertexArrayAttribEXT = GLEW_GET_FUN(__glewDisableVertexArrayAttribEXT);
pub const glDisableVertexArrayEXT = GLEW_GET_FUN(__glewDisableVertexArrayEXT);
pub const glEnableClientStateIndexedEXT = GLEW_GET_FUN(__glewEnableClientStateIndexedEXT);
pub const glEnableClientStateiEXT = GLEW_GET_FUN(__glewEnableClientStateiEXT);
pub const glEnableVertexArrayAttribEXT = GLEW_GET_FUN(__glewEnableVertexArrayAttribEXT);
pub const glEnableVertexArrayEXT = GLEW_GET_FUN(__glewEnableVertexArrayEXT);
pub const glFlushMappedNamedBufferRangeEXT = GLEW_GET_FUN(__glewFlushMappedNamedBufferRangeEXT);
pub const glFramebufferDrawBufferEXT = GLEW_GET_FUN(__glewFramebufferDrawBufferEXT);
pub const glFramebufferDrawBuffersEXT = GLEW_GET_FUN(__glewFramebufferDrawBuffersEXT);
pub const glFramebufferReadBufferEXT = GLEW_GET_FUN(__glewFramebufferReadBufferEXT);
pub const glGenerateMultiTexMipmapEXT = GLEW_GET_FUN(__glewGenerateMultiTexMipmapEXT);
pub const glGenerateTextureMipmapEXT = GLEW_GET_FUN(__glewGenerateTextureMipmapEXT);
pub const glGetCompressedMultiTexImageEXT = GLEW_GET_FUN(__glewGetCompressedMultiTexImageEXT);
pub const glGetCompressedTextureImageEXT = GLEW_GET_FUN(__glewGetCompressedTextureImageEXT);
pub const glGetDoubleIndexedvEXT = GLEW_GET_FUN(__glewGetDoubleIndexedvEXT);
pub const glGetDoublei_vEXT = GLEW_GET_FUN(__glewGetDoublei_vEXT);
pub const glGetFloatIndexedvEXT = GLEW_GET_FUN(__glewGetFloatIndexedvEXT);
pub const glGetFloati_vEXT = GLEW_GET_FUN(__glewGetFloati_vEXT);
pub const glGetFramebufferParameterivEXT = GLEW_GET_FUN(__glewGetFramebufferParameterivEXT);
pub const glGetMultiTexEnvfvEXT = GLEW_GET_FUN(__glewGetMultiTexEnvfvEXT);
pub const glGetMultiTexEnvivEXT = GLEW_GET_FUN(__glewGetMultiTexEnvivEXT);
pub const glGetMultiTexGendvEXT = GLEW_GET_FUN(__glewGetMultiTexGendvEXT);
pub const glGetMultiTexGenfvEXT = GLEW_GET_FUN(__glewGetMultiTexGenfvEXT);
pub const glGetMultiTexGenivEXT = GLEW_GET_FUN(__glewGetMultiTexGenivEXT);
pub const glGetMultiTexImageEXT = GLEW_GET_FUN(__glewGetMultiTexImageEXT);
pub const glGetMultiTexLevelParameterfvEXT = GLEW_GET_FUN(__glewGetMultiTexLevelParameterfvEXT);
pub const glGetMultiTexLevelParameterivEXT = GLEW_GET_FUN(__glewGetMultiTexLevelParameterivEXT);
pub const glGetMultiTexParameterIivEXT = GLEW_GET_FUN(__glewGetMultiTexParameterIivEXT);
pub const glGetMultiTexParameterIuivEXT = GLEW_GET_FUN(__glewGetMultiTexParameterIuivEXT);
pub const glGetMultiTexParameterfvEXT = GLEW_GET_FUN(__glewGetMultiTexParameterfvEXT);
pub const glGetMultiTexParameterivEXT = GLEW_GET_FUN(__glewGetMultiTexParameterivEXT);
pub const glGetNamedBufferParameterivEXT = GLEW_GET_FUN(__glewGetNamedBufferParameterivEXT);
pub const glGetNamedBufferPointervEXT = GLEW_GET_FUN(__glewGetNamedBufferPointervEXT);
pub const glGetNamedBufferSubDataEXT = GLEW_GET_FUN(__glewGetNamedBufferSubDataEXT);
pub const glGetNamedFramebufferAttachmentParameterivEXT = GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameterivEXT);
pub const glGetNamedProgramLocalParameterIivEXT = GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIivEXT);
pub const glGetNamedProgramLocalParameterIuivEXT = GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIuivEXT);
pub const glGetNamedProgramLocalParameterdvEXT = GLEW_GET_FUN(__glewGetNamedProgramLocalParameterdvEXT);
pub const glGetNamedProgramLocalParameterfvEXT = GLEW_GET_FUN(__glewGetNamedProgramLocalParameterfvEXT);
pub const glGetNamedProgramStringEXT = GLEW_GET_FUN(__glewGetNamedProgramStringEXT);
pub const glGetNamedProgramivEXT = GLEW_GET_FUN(__glewGetNamedProgramivEXT);
pub const glGetNamedRenderbufferParameterivEXT = GLEW_GET_FUN(__glewGetNamedRenderbufferParameterivEXT);
pub const glGetPointerIndexedvEXT = GLEW_GET_FUN(__glewGetPointerIndexedvEXT);
pub const glGetPointeri_vEXT = GLEW_GET_FUN(__glewGetPointeri_vEXT);
pub const glGetTextureImageEXT = GLEW_GET_FUN(__glewGetTextureImageEXT);
pub const glGetTextureLevelParameterfvEXT = GLEW_GET_FUN(__glewGetTextureLevelParameterfvEXT);
pub const glGetTextureLevelParameterivEXT = GLEW_GET_FUN(__glewGetTextureLevelParameterivEXT);
pub const glGetTextureParameterIivEXT = GLEW_GET_FUN(__glewGetTextureParameterIivEXT);
pub const glGetTextureParameterIuivEXT = GLEW_GET_FUN(__glewGetTextureParameterIuivEXT);
pub const glGetTextureParameterfvEXT = GLEW_GET_FUN(__glewGetTextureParameterfvEXT);
pub const glGetTextureParameterivEXT = GLEW_GET_FUN(__glewGetTextureParameterivEXT);
pub const glGetVertexArrayIntegeri_vEXT = GLEW_GET_FUN(__glewGetVertexArrayIntegeri_vEXT);
pub const glGetVertexArrayIntegervEXT = GLEW_GET_FUN(__glewGetVertexArrayIntegervEXT);
pub const glGetVertexArrayPointeri_vEXT = GLEW_GET_FUN(__glewGetVertexArrayPointeri_vEXT);
pub const glGetVertexArrayPointervEXT = GLEW_GET_FUN(__glewGetVertexArrayPointervEXT);
pub const glMapNamedBufferEXT = GLEW_GET_FUN(__glewMapNamedBufferEXT);
pub const glMapNamedBufferRangeEXT = GLEW_GET_FUN(__glewMapNamedBufferRangeEXT);
pub const glMatrixFrustumEXT = GLEW_GET_FUN(__glewMatrixFrustumEXT);
pub const glMatrixLoadIdentityEXT = GLEW_GET_FUN(__glewMatrixLoadIdentityEXT);
pub const glMatrixLoadTransposedEXT = GLEW_GET_FUN(__glewMatrixLoadTransposedEXT);
pub const glMatrixLoadTransposefEXT = GLEW_GET_FUN(__glewMatrixLoadTransposefEXT);
pub const glMatrixLoaddEXT = GLEW_GET_FUN(__glewMatrixLoaddEXT);
pub const glMatrixLoadfEXT = GLEW_GET_FUN(__glewMatrixLoadfEXT);
pub const glMatrixMultTransposedEXT = GLEW_GET_FUN(__glewMatrixMultTransposedEXT);
pub const glMatrixMultTransposefEXT = GLEW_GET_FUN(__glewMatrixMultTransposefEXT);
pub const glMatrixMultdEXT = GLEW_GET_FUN(__glewMatrixMultdEXT);
pub const glMatrixMultfEXT = GLEW_GET_FUN(__glewMatrixMultfEXT);
pub const glMatrixOrthoEXT = GLEW_GET_FUN(__glewMatrixOrthoEXT);
pub const glMatrixPopEXT = GLEW_GET_FUN(__glewMatrixPopEXT);
pub const glMatrixPushEXT = GLEW_GET_FUN(__glewMatrixPushEXT);
pub const glMatrixRotatedEXT = GLEW_GET_FUN(__glewMatrixRotatedEXT);
pub const glMatrixRotatefEXT = GLEW_GET_FUN(__glewMatrixRotatefEXT);
pub const glMatrixScaledEXT = GLEW_GET_FUN(__glewMatrixScaledEXT);
pub const glMatrixScalefEXT = GLEW_GET_FUN(__glewMatrixScalefEXT);
pub const glMatrixTranslatedEXT = GLEW_GET_FUN(__glewMatrixTranslatedEXT);
pub const glMatrixTranslatefEXT = GLEW_GET_FUN(__glewMatrixTranslatefEXT);
pub const glMultiTexBufferEXT = GLEW_GET_FUN(__glewMultiTexBufferEXT);
pub const glMultiTexCoordPointerEXT = GLEW_GET_FUN(__glewMultiTexCoordPointerEXT);
pub const glMultiTexEnvfEXT = GLEW_GET_FUN(__glewMultiTexEnvfEXT);
pub const glMultiTexEnvfvEXT = GLEW_GET_FUN(__glewMultiTexEnvfvEXT);
pub const glMultiTexEnviEXT = GLEW_GET_FUN(__glewMultiTexEnviEXT);
pub const glMultiTexEnvivEXT = GLEW_GET_FUN(__glewMultiTexEnvivEXT);
pub const glMultiTexGendEXT = GLEW_GET_FUN(__glewMultiTexGendEXT);
pub const glMultiTexGendvEXT = GLEW_GET_FUN(__glewMultiTexGendvEXT);
pub const glMultiTexGenfEXT = GLEW_GET_FUN(__glewMultiTexGenfEXT);
pub const glMultiTexGenfvEXT = GLEW_GET_FUN(__glewMultiTexGenfvEXT);
pub const glMultiTexGeniEXT = GLEW_GET_FUN(__glewMultiTexGeniEXT);
pub const glMultiTexGenivEXT = GLEW_GET_FUN(__glewMultiTexGenivEXT);
pub const glMultiTexImage1DEXT = GLEW_GET_FUN(__glewMultiTexImage1DEXT);
pub const glMultiTexImage2DEXT = GLEW_GET_FUN(__glewMultiTexImage2DEXT);
pub const glMultiTexImage3DEXT = GLEW_GET_FUN(__glewMultiTexImage3DEXT);
pub const glMultiTexParameterIivEXT = GLEW_GET_FUN(__glewMultiTexParameterIivEXT);
pub const glMultiTexParameterIuivEXT = GLEW_GET_FUN(__glewMultiTexParameterIuivEXT);
pub const glMultiTexParameterfEXT = GLEW_GET_FUN(__glewMultiTexParameterfEXT);
pub const glMultiTexParameterfvEXT = GLEW_GET_FUN(__glewMultiTexParameterfvEXT);
pub const glMultiTexParameteriEXT = GLEW_GET_FUN(__glewMultiTexParameteriEXT);
pub const glMultiTexParameterivEXT = GLEW_GET_FUN(__glewMultiTexParameterivEXT);
pub const glMultiTexRenderbufferEXT = GLEW_GET_FUN(__glewMultiTexRenderbufferEXT);
pub const glMultiTexSubImage1DEXT = GLEW_GET_FUN(__glewMultiTexSubImage1DEXT);
pub const glMultiTexSubImage2DEXT = GLEW_GET_FUN(__glewMultiTexSubImage2DEXT);
pub const glMultiTexSubImage3DEXT = GLEW_GET_FUN(__glewMultiTexSubImage3DEXT);
pub const glNamedBufferDataEXT = GLEW_GET_FUN(__glewNamedBufferDataEXT);
pub const glNamedBufferSubDataEXT = GLEW_GET_FUN(__glewNamedBufferSubDataEXT);
pub const glNamedCopyBufferSubDataEXT = GLEW_GET_FUN(__glewNamedCopyBufferSubDataEXT);
pub const glNamedFramebufferRenderbufferEXT = GLEW_GET_FUN(__glewNamedFramebufferRenderbufferEXT);
pub const glNamedFramebufferTexture1DEXT = GLEW_GET_FUN(__glewNamedFramebufferTexture1DEXT);
pub const glNamedFramebufferTexture2DEXT = GLEW_GET_FUN(__glewNamedFramebufferTexture2DEXT);
pub const glNamedFramebufferTexture3DEXT = GLEW_GET_FUN(__glewNamedFramebufferTexture3DEXT);
pub const glNamedFramebufferTextureEXT = GLEW_GET_FUN(__glewNamedFramebufferTextureEXT);
pub const glNamedFramebufferTextureFaceEXT = GLEW_GET_FUN(__glewNamedFramebufferTextureFaceEXT);
pub const glNamedFramebufferTextureLayerEXT = GLEW_GET_FUN(__glewNamedFramebufferTextureLayerEXT);
pub const glNamedProgramLocalParameter4dEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameter4dEXT);
pub const glNamedProgramLocalParameter4dvEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameter4dvEXT);
pub const glNamedProgramLocalParameter4fEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameter4fEXT);
pub const glNamedProgramLocalParameter4fvEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameter4fvEXT);
pub const glNamedProgramLocalParameterI4iEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameterI4iEXT);
pub const glNamedProgramLocalParameterI4ivEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameterI4ivEXT);
pub const glNamedProgramLocalParameterI4uiEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uiEXT);
pub const glNamedProgramLocalParameterI4uivEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uivEXT);
pub const glNamedProgramLocalParameters4fvEXT = GLEW_GET_FUN(__glewNamedProgramLocalParameters4fvEXT);
pub const glNamedProgramLocalParametersI4ivEXT = GLEW_GET_FUN(__glewNamedProgramLocalParametersI4ivEXT);
pub const glNamedProgramLocalParametersI4uivEXT = GLEW_GET_FUN(__glewNamedProgramLocalParametersI4uivEXT);
pub const glNamedProgramStringEXT = GLEW_GET_FUN(__glewNamedProgramStringEXT);
pub const glNamedRenderbufferStorageEXT = GLEW_GET_FUN(__glewNamedRenderbufferStorageEXT);
pub const glNamedRenderbufferStorageMultisampleCoverageEXT = GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleCoverageEXT);
pub const glNamedRenderbufferStorageMultisampleEXT = GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleEXT);
pub const glProgramUniform1fEXT = GLEW_GET_FUN(__glewProgramUniform1fEXT);
pub const glProgramUniform1fvEXT = GLEW_GET_FUN(__glewProgramUniform1fvEXT);
pub const glProgramUniform1iEXT = GLEW_GET_FUN(__glewProgramUniform1iEXT);
pub const glProgramUniform1ivEXT = GLEW_GET_FUN(__glewProgramUniform1ivEXT);
pub const glProgramUniform1uiEXT = GLEW_GET_FUN(__glewProgramUniform1uiEXT);
pub const glProgramUniform1uivEXT = GLEW_GET_FUN(__glewProgramUniform1uivEXT);
pub const glProgramUniform2fEXT = GLEW_GET_FUN(__glewProgramUniform2fEXT);
pub const glProgramUniform2fvEXT = GLEW_GET_FUN(__glewProgramUniform2fvEXT);
pub const glProgramUniform2iEXT = GLEW_GET_FUN(__glewProgramUniform2iEXT);
pub const glProgramUniform2ivEXT = GLEW_GET_FUN(__glewProgramUniform2ivEXT);
pub const glProgramUniform2uiEXT = GLEW_GET_FUN(__glewProgramUniform2uiEXT);
pub const glProgramUniform2uivEXT = GLEW_GET_FUN(__glewProgramUniform2uivEXT);
pub const glProgramUniform3fEXT = GLEW_GET_FUN(__glewProgramUniform3fEXT);
pub const glProgramUniform3fvEXT = GLEW_GET_FUN(__glewProgramUniform3fvEXT);
pub const glProgramUniform3iEXT = GLEW_GET_FUN(__glewProgramUniform3iEXT);
pub const glProgramUniform3ivEXT = GLEW_GET_FUN(__glewProgramUniform3ivEXT);
pub const glProgramUniform3uiEXT = GLEW_GET_FUN(__glewProgramUniform3uiEXT);
pub const glProgramUniform3uivEXT = GLEW_GET_FUN(__glewProgramUniform3uivEXT);
pub const glProgramUniform4fEXT = GLEW_GET_FUN(__glewProgramUniform4fEXT);
pub const glProgramUniform4fvEXT = GLEW_GET_FUN(__glewProgramUniform4fvEXT);
pub const glProgramUniform4iEXT = GLEW_GET_FUN(__glewProgramUniform4iEXT);
pub const glProgramUniform4ivEXT = GLEW_GET_FUN(__glewProgramUniform4ivEXT);
pub const glProgramUniform4uiEXT = GLEW_GET_FUN(__glewProgramUniform4uiEXT);
pub const glProgramUniform4uivEXT = GLEW_GET_FUN(__glewProgramUniform4uivEXT);
pub const glProgramUniformMatrix2fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix2fvEXT);
pub const glProgramUniformMatrix2x3fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix2x3fvEXT);
pub const glProgramUniformMatrix2x4fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix2x4fvEXT);
pub const glProgramUniformMatrix3fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix3fvEXT);
pub const glProgramUniformMatrix3x2fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix3x2fvEXT);
pub const glProgramUniformMatrix3x4fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix3x4fvEXT);
pub const glProgramUniformMatrix4fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix4fvEXT);
pub const glProgramUniformMatrix4x2fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix4x2fvEXT);
pub const glProgramUniformMatrix4x3fvEXT = GLEW_GET_FUN(__glewProgramUniformMatrix4x3fvEXT);
pub const glPushClientAttribDefaultEXT = GLEW_GET_FUN(__glewPushClientAttribDefaultEXT);
pub const glTextureBufferEXT = GLEW_GET_FUN(__glewTextureBufferEXT);
pub const glTextureImage1DEXT = GLEW_GET_FUN(__glewTextureImage1DEXT);
pub const glTextureImage2DEXT = GLEW_GET_FUN(__glewTextureImage2DEXT);
pub const glTextureImage3DEXT = GLEW_GET_FUN(__glewTextureImage3DEXT);
pub const glTextureParameterIivEXT = GLEW_GET_FUN(__glewTextureParameterIivEXT);
pub const glTextureParameterIuivEXT = GLEW_GET_FUN(__glewTextureParameterIuivEXT);
pub const glTextureParameterfEXT = GLEW_GET_FUN(__glewTextureParameterfEXT);
pub const glTextureParameterfvEXT = GLEW_GET_FUN(__glewTextureParameterfvEXT);
pub const glTextureParameteriEXT = GLEW_GET_FUN(__glewTextureParameteriEXT);
pub const glTextureParameterivEXT = GLEW_GET_FUN(__glewTextureParameterivEXT);
pub const glTextureRenderbufferEXT = GLEW_GET_FUN(__glewTextureRenderbufferEXT);
pub const glTextureSubImage1DEXT = GLEW_GET_FUN(__glewTextureSubImage1DEXT);
pub const glTextureSubImage2DEXT = GLEW_GET_FUN(__glewTextureSubImage2DEXT);
pub const glTextureSubImage3DEXT = GLEW_GET_FUN(__glewTextureSubImage3DEXT);
pub const glUnmapNamedBufferEXT = GLEW_GET_FUN(__glewUnmapNamedBufferEXT);
pub const glVertexArrayColorOffsetEXT = GLEW_GET_FUN(__glewVertexArrayColorOffsetEXT);
pub const glVertexArrayEdgeFlagOffsetEXT = GLEW_GET_FUN(__glewVertexArrayEdgeFlagOffsetEXT);
pub const glVertexArrayFogCoordOffsetEXT = GLEW_GET_FUN(__glewVertexArrayFogCoordOffsetEXT);
pub const glVertexArrayIndexOffsetEXT = GLEW_GET_FUN(__glewVertexArrayIndexOffsetEXT);
pub const glVertexArrayMultiTexCoordOffsetEXT = GLEW_GET_FUN(__glewVertexArrayMultiTexCoordOffsetEXT);
pub const glVertexArrayNormalOffsetEXT = GLEW_GET_FUN(__glewVertexArrayNormalOffsetEXT);
pub const glVertexArraySecondaryColorOffsetEXT = GLEW_GET_FUN(__glewVertexArraySecondaryColorOffsetEXT);
pub const glVertexArrayTexCoordOffsetEXT = GLEW_GET_FUN(__glewVertexArrayTexCoordOffsetEXT);
pub const glVertexArrayVertexAttribDivisorEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribDivisorEXT);
pub const glVertexArrayVertexAttribIOffsetEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribIOffsetEXT);
pub const glVertexArrayVertexAttribOffsetEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribOffsetEXT);
pub const glVertexArrayVertexOffsetEXT = GLEW_GET_FUN(__glewVertexArrayVertexOffsetEXT);
pub const GLEW_EXT_direct_state_access = GLEW_GET_VAR(__GLEW_EXT_direct_state_access);
pub const GL_EXT_discard_framebuffer = @as(c_int, 1);
pub const GL_COLOR_EXT = @as(c_int, 0x1800);
pub const GL_DEPTH_EXT = @as(c_int, 0x1801);
pub const GL_STENCIL_EXT = @as(c_int, 0x1802);
pub const glDiscardFramebufferEXT = GLEW_GET_FUN(__glewDiscardFramebufferEXT);
pub const GLEW_EXT_discard_framebuffer = GLEW_GET_VAR(__GLEW_EXT_discard_framebuffer);
pub const GL_EXT_disjoint_timer_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_QUERY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_QUERY_RESULT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_TIME_ELAPSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_TIMESTAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_GPU_DISJOINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBB, .hexadecimal);
pub const glBeginQueryEXT = GLEW_GET_FUN(__glewBeginQueryEXT);
pub const glDeleteQueriesEXT = GLEW_GET_FUN(__glewDeleteQueriesEXT);
pub const glEndQueryEXT = GLEW_GET_FUN(__glewEndQueryEXT);
pub const glGenQueriesEXT = GLEW_GET_FUN(__glewGenQueriesEXT);
pub const glGetInteger64vEXT = GLEW_GET_FUN(__glewGetInteger64vEXT);
pub const glGetQueryObjectivEXT = GLEW_GET_FUN(__glewGetQueryObjectivEXT);
pub const glGetQueryObjectuivEXT = GLEW_GET_FUN(__glewGetQueryObjectuivEXT);
pub const glGetQueryivEXT = GLEW_GET_FUN(__glewGetQueryivEXT);
pub const glIsQueryEXT = GLEW_GET_FUN(__glewIsQueryEXT);
pub const glQueryCounterEXT = GLEW_GET_FUN(__glewQueryCounterEXT);
pub const GLEW_EXT_disjoint_timer_query = GLEW_GET_VAR(__GLEW_EXT_disjoint_timer_query);
pub const GL_EXT_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const glDrawBuffersEXT = GLEW_GET_FUN(__glewDrawBuffersEXT);
pub const GLEW_EXT_draw_buffers = GLEW_GET_VAR(__GLEW_EXT_draw_buffers);
pub const GL_EXT_draw_buffers2 = @as(c_int, 1);
pub const glColorMaskIndexedEXT = GLEW_GET_FUN(__glewColorMaskIndexedEXT);
pub const glDisableIndexedEXT = GLEW_GET_FUN(__glewDisableIndexedEXT);
pub const glEnableIndexedEXT = GLEW_GET_FUN(__glewEnableIndexedEXT);
pub const glGetBooleanIndexedvEXT = GLEW_GET_FUN(__glewGetBooleanIndexedvEXT);
pub const glGetIntegerIndexedvEXT = GLEW_GET_FUN(__glewGetIntegerIndexedvEXT);
pub const glIsEnabledIndexedEXT = GLEW_GET_FUN(__glewIsEnabledIndexedEXT);
pub const GLEW_EXT_draw_buffers2 = GLEW_GET_VAR(__GLEW_EXT_draw_buffers2);
pub const GL_EXT_draw_buffers_indexed = @as(c_int, 1);
pub const glBlendEquationSeparateiEXT = GLEW_GET_FUN(__glewBlendEquationSeparateiEXT);
pub const glBlendEquationiEXT = GLEW_GET_FUN(__glewBlendEquationiEXT);
pub const glBlendFuncSeparateiEXT = GLEW_GET_FUN(__glewBlendFuncSeparateiEXT);
pub const glBlendFunciEXT = GLEW_GET_FUN(__glewBlendFunciEXT);
pub const glColorMaskiEXT = GLEW_GET_FUN(__glewColorMaskiEXT);
pub const glDisableiEXT = GLEW_GET_FUN(__glewDisableiEXT);
pub const glEnableiEXT = GLEW_GET_FUN(__glewEnableiEXT);
pub const glIsEnablediEXT = GLEW_GET_FUN(__glewIsEnablediEXT);
pub const GLEW_EXT_draw_buffers_indexed = GLEW_GET_VAR(__GLEW_EXT_draw_buffers_indexed);
pub const GL_EXT_draw_elements_base_vertex = @as(c_int, 1);
pub const glDrawElementsBaseVertexEXT = GLEW_GET_FUN(__glewDrawElementsBaseVertexEXT);
pub const glDrawElementsInstancedBaseVertexEXT = GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexEXT);
pub const glDrawRangeElementsBaseVertexEXT = GLEW_GET_FUN(__glewDrawRangeElementsBaseVertexEXT);
pub const glMultiDrawElementsBaseVertexEXT = GLEW_GET_FUN(__glewMultiDrawElementsBaseVertexEXT);
pub const GLEW_EXT_draw_elements_base_vertex = GLEW_GET_VAR(__GLEW_EXT_draw_elements_base_vertex);
pub const GL_EXT_draw_instanced = @as(c_int, 1);
pub const glDrawArraysInstancedEXT = GLEW_GET_FUN(__glewDrawArraysInstancedEXT);
pub const glDrawElementsInstancedEXT = GLEW_GET_FUN(__glewDrawElementsInstancedEXT);
pub const GLEW_EXT_draw_instanced = GLEW_GET_VAR(__GLEW_EXT_draw_instanced);
pub const GL_EXT_draw_range_elements = @as(c_int, 1);
pub const GL_MAX_ELEMENTS_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const glDrawRangeElementsEXT = GLEW_GET_FUN(__glewDrawRangeElementsEXT);
pub const GLEW_EXT_draw_range_elements = GLEW_GET_VAR(__GLEW_EXT_draw_range_elements);
pub const GL_EXT_draw_transform_feedback = @as(c_int, 1);
pub const glDrawTransformFeedbackEXT = GLEW_GET_FUN(__glewDrawTransformFeedbackEXT);
pub const glDrawTransformFeedbackInstancedEXT = GLEW_GET_FUN(__glewDrawTransformFeedbackInstancedEXT);
pub const GLEW_EXT_draw_transform_feedback = GLEW_GET_VAR(__GLEW_EXT_draw_transform_feedback);
pub const GL_EXT_external_buffer = @as(c_int, 1);
pub const glBufferStorageExternalEXT = GLEW_GET_FUN(__glewBufferStorageExternalEXT);
pub const glNamedBufferStorageExternalEXT = GLEW_GET_FUN(__glewNamedBufferStorageExternalEXT);
pub const GLEW_EXT_external_buffer = GLEW_GET_VAR(__GLEW_EXT_external_buffer);
pub const GL_EXT_float_blend = @as(c_int, 1);
pub const GLEW_EXT_float_blend = GLEW_GET_VAR(__GLEW_EXT_float_blend);
pub const GL_EXT_fog_coord = @as(c_int, 1);
pub const GL_FOG_COORDINATE_SOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FRAGMENT_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const GL_CURRENT_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const glFogCoordPointerEXT = GLEW_GET_FUN(__glewFogCoordPointerEXT);
pub const glFogCoorddEXT = GLEW_GET_FUN(__glewFogCoorddEXT);
pub const glFogCoorddvEXT = GLEW_GET_FUN(__glewFogCoorddvEXT);
pub const glFogCoordfEXT = GLEW_GET_FUN(__glewFogCoordfEXT);
pub const glFogCoordfvEXT = GLEW_GET_FUN(__glewFogCoordfvEXT);
pub const GLEW_EXT_fog_coord = GLEW_GET_VAR(__GLEW_EXT_fog_coord);
pub const GL_EXT_frag_depth = @as(c_int, 1);
pub const GLEW_EXT_frag_depth = GLEW_GET_VAR(__GLEW_EXT_frag_depth);
pub const GL_EXT_fragment_lighting = @as(c_int, 1);
pub const GL_FRAGMENT_LIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8400, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8401, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8402, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8403, .hexadecimal);
pub const GL_MAX_FRAGMENT_LIGHTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8404, .hexadecimal);
pub const GL_MAX_ACTIVE_LIGHTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8405, .hexadecimal);
pub const GL_CURRENT_RASTER_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8406, .hexadecimal);
pub const GL_LIGHT_ENV_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8407, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8408, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8409, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840A, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840B, .hexadecimal);
pub const GL_FRAGMENT_LIGHT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840C, .hexadecimal);
pub const GL_FRAGMENT_LIGHT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8413, .hexadecimal);
pub const glFragmentColorMaterialEXT = GLEW_GET_FUN(__glewFragmentColorMaterialEXT);
pub const glFragmentLightModelfEXT = GLEW_GET_FUN(__glewFragmentLightModelfEXT);
pub const glFragmentLightModelfvEXT = GLEW_GET_FUN(__glewFragmentLightModelfvEXT);
pub const glFragmentLightModeliEXT = GLEW_GET_FUN(__glewFragmentLightModeliEXT);
pub const glFragmentLightModelivEXT = GLEW_GET_FUN(__glewFragmentLightModelivEXT);
pub const glFragmentLightfEXT = GLEW_GET_FUN(__glewFragmentLightfEXT);
pub const glFragmentLightfvEXT = GLEW_GET_FUN(__glewFragmentLightfvEXT);
pub const glFragmentLightiEXT = GLEW_GET_FUN(__glewFragmentLightiEXT);
pub const glFragmentLightivEXT = GLEW_GET_FUN(__glewFragmentLightivEXT);
pub const glFragmentMaterialfEXT = GLEW_GET_FUN(__glewFragmentMaterialfEXT);
pub const glFragmentMaterialfvEXT = GLEW_GET_FUN(__glewFragmentMaterialfvEXT);
pub const glFragmentMaterialiEXT = GLEW_GET_FUN(__glewFragmentMaterialiEXT);
pub const glFragmentMaterialivEXT = GLEW_GET_FUN(__glewFragmentMaterialivEXT);
pub const glGetFragmentLightfvEXT = GLEW_GET_FUN(__glewGetFragmentLightfvEXT);
pub const glGetFragmentLightivEXT = GLEW_GET_FUN(__glewGetFragmentLightivEXT);
pub const glGetFragmentMaterialfvEXT = GLEW_GET_FUN(__glewGetFragmentMaterialfvEXT);
pub const glGetFragmentMaterialivEXT = GLEW_GET_FUN(__glewGetFragmentMaterialivEXT);
pub const glLightEnviEXT = GLEW_GET_FUN(__glewLightEnviEXT);
pub const GLEW_EXT_fragment_lighting = GLEW_GET_VAR(__GLEW_EXT_fragment_lighting);
pub const GL_EXT_framebuffer_blit = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const glBlitFramebufferEXT = GLEW_GET_FUN(__glewBlitFramebufferEXT);
pub const GLEW_EXT_framebuffer_blit = GLEW_GET_VAR(__GLEW_EXT_framebuffer_blit);
pub const GL_EXT_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_MAX_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const glRenderbufferStorageMultisampleEXT = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleEXT);
pub const GLEW_EXT_framebuffer_multisample = GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample);
pub const GL_EXT_framebuffer_multisample_blit_scaled = @as(c_int, 1);
pub const GL_SCALED_RESOLVE_FASTEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BA, .hexadecimal);
pub const GL_SCALED_RESOLVE_NICEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BB, .hexadecimal);
pub const GLEW_EXT_framebuffer_multisample_blit_scaled = GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample_blit_scaled);
pub const GL_EXT_framebuffer_object = @as(c_int, 1);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = @as(c_int, 0x0506);
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_RENDERBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_STENCIL_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const glBindFramebufferEXT = GLEW_GET_FUN(__glewBindFramebufferEXT);
pub const glBindRenderbufferEXT = GLEW_GET_FUN(__glewBindRenderbufferEXT);
pub const glCheckFramebufferStatusEXT = GLEW_GET_FUN(__glewCheckFramebufferStatusEXT);
pub const glDeleteFramebuffersEXT = GLEW_GET_FUN(__glewDeleteFramebuffersEXT);
pub const glDeleteRenderbuffersEXT = GLEW_GET_FUN(__glewDeleteRenderbuffersEXT);
pub const glFramebufferRenderbufferEXT = GLEW_GET_FUN(__glewFramebufferRenderbufferEXT);
pub const glFramebufferTexture1DEXT = GLEW_GET_FUN(__glewFramebufferTexture1DEXT);
pub const glFramebufferTexture2DEXT = GLEW_GET_FUN(__glewFramebufferTexture2DEXT);
pub const glFramebufferTexture3DEXT = GLEW_GET_FUN(__glewFramebufferTexture3DEXT);
pub const glGenFramebuffersEXT = GLEW_GET_FUN(__glewGenFramebuffersEXT);
pub const glGenRenderbuffersEXT = GLEW_GET_FUN(__glewGenRenderbuffersEXT);
pub const glGenerateMipmapEXT = GLEW_GET_FUN(__glewGenerateMipmapEXT);
pub const glGetFramebufferAttachmentParameterivEXT = GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivEXT);
pub const glGetRenderbufferParameterivEXT = GLEW_GET_FUN(__glewGetRenderbufferParameterivEXT);
pub const glIsFramebufferEXT = GLEW_GET_FUN(__glewIsFramebufferEXT);
pub const glIsRenderbufferEXT = GLEW_GET_FUN(__glewIsRenderbufferEXT);
pub const glRenderbufferStorageEXT = GLEW_GET_FUN(__glewRenderbufferStorageEXT);
pub const GLEW_EXT_framebuffer_object = GLEW_GET_VAR(__GLEW_EXT_framebuffer_object);
pub const GL_EXT_framebuffer_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBA, .hexadecimal);
pub const GLEW_EXT_framebuffer_sRGB = GLEW_GET_VAR(__GLEW_EXT_framebuffer_sRGB);
pub const GL_EXT_geometry_point_size = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_LINES_ADJACENCY_EXT = @as(c_int, 0xA);
pub const GL_LINE_STRIP_ADJACENCY_EXT = @as(c_int, 0xB);
pub const GL_TRIANGLES_ADJACENCY_EXT = @as(c_int, 0xC);
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = @as(c_int, 0xD);
pub const GL_LAYER_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_UNDEFINED_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GLEW_EXT_geometry_point_size = GLEW_GET_VAR(__GLEW_EXT_geometry_point_size);
pub const GL_EXT_geometry_shader = @as(c_int, 1);
pub const GLEW_EXT_geometry_shader = GLEW_GET_VAR(__GLEW_EXT_geometry_shader);
pub const GL_EXT_geometry_shader4 = @as(c_int, 1);
pub const GL_PROGRAM_POINT_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_MAX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hexadecimal);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hexadecimal);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hexadecimal);
pub const glFramebufferTextureEXT = GLEW_GET_FUN(__glewFramebufferTextureEXT);
pub const glFramebufferTextureFaceEXT = GLEW_GET_FUN(__glewFramebufferTextureFaceEXT);
pub const glProgramParameteriEXT = GLEW_GET_FUN(__glewProgramParameteriEXT);
pub const GLEW_EXT_geometry_shader4 = GLEW_GET_VAR(__GLEW_EXT_geometry_shader4);
pub const GL_EXT_gpu_program_parameters = @as(c_int, 1);
pub const glProgramEnvParameters4fvEXT = GLEW_GET_FUN(__glewProgramEnvParameters4fvEXT);
pub const glProgramLocalParameters4fvEXT = GLEW_GET_FUN(__glewProgramLocalParameters4fvEXT);
pub const GLEW_EXT_gpu_program_parameters = GLEW_GET_VAR(__GLEW_EXT_gpu_program_parameters);
pub const GL_EXT_gpu_shader4 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const GL_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const GL_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const GL_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const GL_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const GL_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const glBindFragDataLocationEXT = GLEW_GET_FUN(__glewBindFragDataLocationEXT);
pub const glGetFragDataLocationEXT = GLEW_GET_FUN(__glewGetFragDataLocationEXT);
pub const glGetUniformuivEXT = GLEW_GET_FUN(__glewGetUniformuivEXT);
pub const glGetVertexAttribIivEXT = GLEW_GET_FUN(__glewGetVertexAttribIivEXT);
pub const glGetVertexAttribIuivEXT = GLEW_GET_FUN(__glewGetVertexAttribIuivEXT);
pub const glUniform1uiEXT = GLEW_GET_FUN(__glewUniform1uiEXT);
pub const glUniform1uivEXT = GLEW_GET_FUN(__glewUniform1uivEXT);
pub const glUniform2uiEXT = GLEW_GET_FUN(__glewUniform2uiEXT);
pub const glUniform2uivEXT = GLEW_GET_FUN(__glewUniform2uivEXT);
pub const glUniform3uiEXT = GLEW_GET_FUN(__glewUniform3uiEXT);
pub const glUniform3uivEXT = GLEW_GET_FUN(__glewUniform3uivEXT);
pub const glUniform4uiEXT = GLEW_GET_FUN(__glewUniform4uiEXT);
pub const glUniform4uivEXT = GLEW_GET_FUN(__glewUniform4uivEXT);
pub const glVertexAttribI1iEXT = GLEW_GET_FUN(__glewVertexAttribI1iEXT);
pub const glVertexAttribI1ivEXT = GLEW_GET_FUN(__glewVertexAttribI1ivEXT);
pub const glVertexAttribI1uiEXT = GLEW_GET_FUN(__glewVertexAttribI1uiEXT);
pub const glVertexAttribI1uivEXT = GLEW_GET_FUN(__glewVertexAttribI1uivEXT);
pub const glVertexAttribI2iEXT = GLEW_GET_FUN(__glewVertexAttribI2iEXT);
pub const glVertexAttribI2ivEXT = GLEW_GET_FUN(__glewVertexAttribI2ivEXT);
pub const glVertexAttribI2uiEXT = GLEW_GET_FUN(__glewVertexAttribI2uiEXT);
pub const glVertexAttribI2uivEXT = GLEW_GET_FUN(__glewVertexAttribI2uivEXT);
pub const glVertexAttribI3iEXT = GLEW_GET_FUN(__glewVertexAttribI3iEXT);
pub const glVertexAttribI3ivEXT = GLEW_GET_FUN(__glewVertexAttribI3ivEXT);
pub const glVertexAttribI3uiEXT = GLEW_GET_FUN(__glewVertexAttribI3uiEXT);
pub const glVertexAttribI3uivEXT = GLEW_GET_FUN(__glewVertexAttribI3uivEXT);
pub const glVertexAttribI4bvEXT = GLEW_GET_FUN(__glewVertexAttribI4bvEXT);
pub const glVertexAttribI4iEXT = GLEW_GET_FUN(__glewVertexAttribI4iEXT);
pub const glVertexAttribI4ivEXT = GLEW_GET_FUN(__glewVertexAttribI4ivEXT);
pub const glVertexAttribI4svEXT = GLEW_GET_FUN(__glewVertexAttribI4svEXT);
pub const glVertexAttribI4ubvEXT = GLEW_GET_FUN(__glewVertexAttribI4ubvEXT);
pub const glVertexAttribI4uiEXT = GLEW_GET_FUN(__glewVertexAttribI4uiEXT);
pub const glVertexAttribI4uivEXT = GLEW_GET_FUN(__glewVertexAttribI4uivEXT);
pub const glVertexAttribI4usvEXT = GLEW_GET_FUN(__glewVertexAttribI4usvEXT);
pub const glVertexAttribIPointerEXT = GLEW_GET_FUN(__glewVertexAttribIPointerEXT);
pub const GLEW_EXT_gpu_shader4 = GLEW_GET_VAR(__GLEW_EXT_gpu_shader4);
pub const GL_EXT_gpu_shader5 = @as(c_int, 1);
pub const GLEW_EXT_gpu_shader5 = GLEW_GET_VAR(__GLEW_EXT_gpu_shader5);
pub const GL_EXT_histogram = @as(c_int, 1);
pub const GL_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const GL_PROXY_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const GL_HISTOGRAM_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hexadecimal);
pub const GL_HISTOGRAM_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hexadecimal);
pub const GL_HISTOGRAM_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hexadecimal);
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hexadecimal);
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hexadecimal);
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hexadecimal);
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hexadecimal);
pub const GL_HISTOGRAM_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hexadecimal);
pub const GL_MINMAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const GL_MINMAX_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hexadecimal);
pub const GL_MINMAX_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hexadecimal);
pub const glGetHistogramEXT = GLEW_GET_FUN(__glewGetHistogramEXT);
pub const glGetHistogramParameterfvEXT = GLEW_GET_FUN(__glewGetHistogramParameterfvEXT);
pub const glGetHistogramParameterivEXT = GLEW_GET_FUN(__glewGetHistogramParameterivEXT);
pub const glGetMinmaxEXT = GLEW_GET_FUN(__glewGetMinmaxEXT);
pub const glGetMinmaxParameterfvEXT = GLEW_GET_FUN(__glewGetMinmaxParameterfvEXT);
pub const glGetMinmaxParameterivEXT = GLEW_GET_FUN(__glewGetMinmaxParameterivEXT);
pub const glHistogramEXT = GLEW_GET_FUN(__glewHistogramEXT);
pub const glMinmaxEXT = GLEW_GET_FUN(__glewMinmaxEXT);
pub const glResetHistogramEXT = GLEW_GET_FUN(__glewResetHistogramEXT);
pub const glResetMinmaxEXT = GLEW_GET_FUN(__glewResetMinmaxEXT);
pub const GLEW_EXT_histogram = GLEW_GET_VAR(__GLEW_EXT_histogram);
pub const GL_EXT_index_array_formats = @as(c_int, 1);
pub const GLEW_EXT_index_array_formats = GLEW_GET_VAR(__GLEW_EXT_index_array_formats);
pub const GL_EXT_index_func = @as(c_int, 1);
pub const glIndexFuncEXT = GLEW_GET_FUN(__glewIndexFuncEXT);
pub const GLEW_EXT_index_func = GLEW_GET_VAR(__GLEW_EXT_index_func);
pub const GL_EXT_index_material = @as(c_int, 1);
pub const glIndexMaterialEXT = GLEW_GET_FUN(__glewIndexMaterialEXT);
pub const GLEW_EXT_index_material = GLEW_GET_VAR(__GLEW_EXT_index_material);
pub const GL_EXT_index_texture = @as(c_int, 1);
pub const GLEW_EXT_index_texture = GLEW_GET_VAR(__GLEW_EXT_index_texture);
pub const GL_EXT_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const glVertexAttribDivisorEXT = GLEW_GET_FUN(__glewVertexAttribDivisorEXT);
pub const GLEW_EXT_instanced_arrays = GLEW_GET_VAR(__GLEW_EXT_instanced_arrays);
pub const GL_EXT_light_texture = @as(c_int, 1);
pub const GL_FRAGMENT_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8349, .hexadecimal);
pub const GL_FRAGMENT_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834A, .hexadecimal);
pub const GL_FRAGMENT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834C, .hexadecimal);
pub const GL_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834D, .hexadecimal);
pub const GL_SHADOW_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834E, .hexadecimal);
pub const GL_TEXTURE_APPLICATION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834F, .hexadecimal);
pub const GL_TEXTURE_LIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8350, .hexadecimal);
pub const GL_TEXTURE_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8351, .hexadecimal);
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8352, .hexadecimal);
pub const glApplyTextureEXT = GLEW_GET_FUN(__glewApplyTextureEXT);
pub const glTextureLightEXT = GLEW_GET_FUN(__glewTextureLightEXT);
pub const glTextureMaterialEXT = GLEW_GET_FUN(__glewTextureMaterialEXT);
pub const GLEW_EXT_light_texture = GLEW_GET_VAR(__GLEW_EXT_light_texture);
pub const GL_EXT_map_buffer_range = @as(c_int, 1);
pub const GL_MAP_READ_BIT_EXT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT_EXT = @as(c_int, 0x0002);
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = @as(c_int, 0x0008);
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = @as(c_int, 0x0010);
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT = @as(c_int, 0x0020);
pub const glFlushMappedBufferRangeEXT = GLEW_GET_FUN(__glewFlushMappedBufferRangeEXT);
pub const glMapBufferRangeEXT = GLEW_GET_FUN(__glewMapBufferRangeEXT);
pub const GLEW_EXT_map_buffer_range = GLEW_GET_VAR(__GLEW_EXT_map_buffer_range);
pub const GL_EXT_memory_object = @as(c_int, 1);
pub const GL_UUID_SIZE_EXT = @as(c_int, 16);
pub const GL_TEXTURE_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9580, .hexadecimal);
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9581, .hexadecimal);
pub const GL_NUM_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9582, .hexadecimal);
pub const GL_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9583, .hexadecimal);
pub const GL_OPTIMAL_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9584, .hexadecimal);
pub const GL_LINEAR_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9585, .hexadecimal);
pub const GL_NUM_DEVICE_UUIDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9596, .hexadecimal);
pub const GL_DEVICE_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9597, .hexadecimal);
pub const GL_DRIVER_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9598, .hexadecimal);
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959B, .hexadecimal);
pub const glBufferStorageMemEXT = GLEW_GET_FUN(__glewBufferStorageMemEXT);
pub const glCreateMemoryObjectsEXT = GLEW_GET_FUN(__glewCreateMemoryObjectsEXT);
pub const glDeleteMemoryObjectsEXT = GLEW_GET_FUN(__glewDeleteMemoryObjectsEXT);
pub const glGetMemoryObjectParameterivEXT = GLEW_GET_FUN(__glewGetMemoryObjectParameterivEXT);
pub const glGetUnsignedBytei_vEXT = GLEW_GET_FUN(__glewGetUnsignedBytei_vEXT);
pub const glGetUnsignedBytevEXT = GLEW_GET_FUN(__glewGetUnsignedBytevEXT);
pub const glIsMemoryObjectEXT = GLEW_GET_FUN(__glewIsMemoryObjectEXT);
pub const glMemoryObjectParameterivEXT = GLEW_GET_FUN(__glewMemoryObjectParameterivEXT);
pub const glNamedBufferStorageMemEXT = GLEW_GET_FUN(__glewNamedBufferStorageMemEXT);
pub const glTexStorageMem1DEXT = GLEW_GET_FUN(__glewTexStorageMem1DEXT);
pub const glTexStorageMem2DEXT = GLEW_GET_FUN(__glewTexStorageMem2DEXT);
pub const glTexStorageMem2DMultisampleEXT = GLEW_GET_FUN(__glewTexStorageMem2DMultisampleEXT);
pub const glTexStorageMem3DEXT = GLEW_GET_FUN(__glewTexStorageMem3DEXT);
pub const glTexStorageMem3DMultisampleEXT = GLEW_GET_FUN(__glewTexStorageMem3DMultisampleEXT);
pub const glTextureStorageMem1DEXT = GLEW_GET_FUN(__glewTextureStorageMem1DEXT);
pub const glTextureStorageMem2DEXT = GLEW_GET_FUN(__glewTextureStorageMem2DEXT);
pub const glTextureStorageMem2DMultisampleEXT = GLEW_GET_FUN(__glewTextureStorageMem2DMultisampleEXT);
pub const glTextureStorageMem3DEXT = GLEW_GET_FUN(__glewTextureStorageMem3DEXT);
pub const glTextureStorageMem3DMultisampleEXT = GLEW_GET_FUN(__glewTextureStorageMem3DMultisampleEXT);
pub const GLEW_EXT_memory_object = GLEW_GET_VAR(__GLEW_EXT_memory_object);
pub const GL_EXT_memory_object_fd = @as(c_int, 1);
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9586, .hexadecimal);
pub const glImportMemoryFdEXT = GLEW_GET_FUN(__glewImportMemoryFdEXT);
pub const GLEW_EXT_memory_object_fd = GLEW_GET_VAR(__GLEW_EXT_memory_object_fd);
pub const GL_EXT_memory_object_win32 = @as(c_int, 1);
pub const GL_LUID_SIZE_EXT = @as(c_int, 8);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9587, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9588, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9589, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958A, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958B, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958C, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9594, .hexadecimal);
pub const GL_D3D12_FENCE_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hexadecimal);
pub const GL_DEVICE_LUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9599, .hexadecimal);
pub const GL_DEVICE_NODE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959A, .hexadecimal);
pub const glImportMemoryWin32HandleEXT = GLEW_GET_FUN(__glewImportMemoryWin32HandleEXT);
pub const glImportMemoryWin32NameEXT = GLEW_GET_FUN(__glewImportMemoryWin32NameEXT);
pub const GLEW_EXT_memory_object_win32 = GLEW_GET_VAR(__GLEW_EXT_memory_object_win32);
pub const GL_EXT_misc_attribute = @as(c_int, 1);
pub const GLEW_EXT_misc_attribute = GLEW_GET_VAR(__GLEW_EXT_misc_attribute);
pub const GL_EXT_multi_draw_arrays = @as(c_int, 1);
pub const glMultiDrawArraysEXT = GLEW_GET_FUN(__glewMultiDrawArraysEXT);
pub const glMultiDrawElementsEXT = GLEW_GET_FUN(__glewMultiDrawElementsEXT);
pub const GLEW_EXT_multi_draw_arrays = GLEW_GET_VAR(__GLEW_EXT_multi_draw_arrays);
pub const GL_EXT_multi_draw_indirect = @as(c_int, 1);
pub const glMultiDrawArraysIndirectEXT = GLEW_GET_FUN(__glewMultiDrawArraysIndirectEXT);
pub const glMultiDrawElementsIndirectEXT = GLEW_GET_FUN(__glewMultiDrawElementsIndirectEXT);
pub const GLEW_EXT_multi_draw_indirect = GLEW_GET_VAR(__GLEW_EXT_multi_draw_indirect);
pub const GL_EXT_multiple_textures = @as(c_int, 1);
pub const GLEW_EXT_multiple_textures = GLEW_GET_VAR(__GLEW_EXT_multiple_textures);
pub const GL_EXT_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_1PASS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hexadecimal);
pub const GL_2PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hexadecimal);
pub const GL_2PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hexadecimal);
pub const GL_4PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hexadecimal);
pub const GL_4PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hexadecimal);
pub const GL_4PASS_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hexadecimal);
pub const GL_4PASS_3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_MASK_INVERT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_PATTERN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const glSampleMaskEXT = GLEW_GET_FUN(__glewSampleMaskEXT);
pub const glSamplePatternEXT = GLEW_GET_FUN(__glewSamplePatternEXT);
pub const GLEW_EXT_multisample = GLEW_GET_VAR(__GLEW_EXT_multisample);
pub const GL_EXT_multisample_compatibility = @as(c_int, 1);
pub const GLEW_EXT_multisample_compatibility = GLEW_GET_VAR(__GLEW_EXT_multisample_compatibility);
pub const GL_EXT_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6C, .hexadecimal);
pub const glFramebufferTexture2DMultisampleEXT = GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleEXT);
pub const GLEW_EXT_multisampled_render_to_texture = GLEW_GET_VAR(__GLEW_EXT_multisampled_render_to_texture);
pub const GL_EXT_multisampled_render_to_texture2 = @as(c_int, 1);
pub const GLEW_EXT_multisampled_render_to_texture2 = GLEW_GET_VAR(__GLEW_EXT_multisampled_render_to_texture2);
pub const GL_EXT_multiview_draw_buffers = @as(c_int, 1);
pub const GL_DRAW_BUFFER_EXT = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER_EXT = @as(c_int, 0x0C02);
pub const GL_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F0, .hexadecimal);
pub const GL_MULTIVIEW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F1, .hexadecimal);
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F2, .hexadecimal);
pub const glDrawBuffersIndexedEXT = GLEW_GET_FUN(__glewDrawBuffersIndexedEXT);
pub const glGetIntegeri_vEXT = GLEW_GET_FUN(__glewGetIntegeri_vEXT);
pub const glReadBufferIndexedEXT = GLEW_GET_FUN(__glewReadBufferIndexedEXT);
pub const GLEW_EXT_multiview_draw_buffers = GLEW_GET_VAR(__GLEW_EXT_multiview_draw_buffers);
pub const GL_EXT_multiview_tessellation_geometry_shader = @as(c_int, 1);
pub const GLEW_EXT_multiview_tessellation_geometry_shader = GLEW_GET_VAR(__GLEW_EXT_multiview_tessellation_geometry_shader);
pub const GL_EXT_multiview_texture_multisample = @as(c_int, 1);
pub const GLEW_EXT_multiview_texture_multisample = GLEW_GET_VAR(__GLEW_EXT_multiview_texture_multisample);
pub const GL_EXT_multiview_timer_query = @as(c_int, 1);
pub const GLEW_EXT_multiview_timer_query = GLEW_GET_VAR(__GLEW_EXT_multiview_timer_query);
pub const GL_EXT_occlusion_query_boolean = @as(c_int, 1);
pub const GL_ANY_SAMPLES_PASSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hexadecimal);
pub const GLEW_EXT_occlusion_query_boolean = GLEW_GET_VAR(__GLEW_EXT_occlusion_query_boolean);
pub const GL_EXT_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_DEPTH24_STENCIL8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_TEXTURE_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const GLEW_EXT_packed_depth_stencil = GLEW_GET_VAR(__GLEW_EXT_packed_depth_stencil);
pub const GL_EXT_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3C, .hexadecimal);
pub const GLEW_EXT_packed_float = GLEW_GET_VAR(__GLEW_EXT_packed_float);
pub const GL_EXT_packed_pixels = @as(c_int, 1);
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GLEW_EXT_packed_pixels = GLEW_GET_VAR(__GLEW_EXT_packed_pixels);
pub const GL_EXT_paletted_texture = @as(c_int, 1);
pub const GL_COLOR_TABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const GL_TEXTURE_INDEX_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80ED, .hexadecimal);
pub const glColorTableEXT = GLEW_GET_FUN(__glewColorTableEXT);
pub const glGetColorTableEXT = GLEW_GET_FUN(__glewGetColorTableEXT);
pub const glGetColorTableParameterfvEXT = GLEW_GET_FUN(__glewGetColorTableParameterfvEXT);
pub const glGetColorTableParameterivEXT = GLEW_GET_FUN(__glewGetColorTableParameterivEXT);
pub const GLEW_EXT_paletted_texture = GLEW_GET_VAR(__GLEW_EXT_paletted_texture);
pub const GL_EXT_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GLEW_EXT_pixel_buffer_object = GLEW_GET_VAR(__GLEW_EXT_pixel_buffer_object);
pub const GL_EXT_pixel_transform = @as(c_int, 1);
pub const GL_PIXEL_TRANSFORM_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8330, .hexadecimal);
pub const GL_PIXEL_MAG_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8331, .hexadecimal);
pub const GL_PIXEL_MIN_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8332, .hexadecimal);
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8333, .hexadecimal);
pub const GL_CUBIC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8334, .hexadecimal);
pub const GL_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8335, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8336, .hexadecimal);
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8337, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8338, .hexadecimal);
pub const glGetPixelTransformParameterfvEXT = GLEW_GET_FUN(__glewGetPixelTransformParameterfvEXT);
pub const glGetPixelTransformParameterivEXT = GLEW_GET_FUN(__glewGetPixelTransformParameterivEXT);
pub const glPixelTransformParameterfEXT = GLEW_GET_FUN(__glewPixelTransformParameterfEXT);
pub const glPixelTransformParameterfvEXT = GLEW_GET_FUN(__glewPixelTransformParameterfvEXT);
pub const glPixelTransformParameteriEXT = GLEW_GET_FUN(__glewPixelTransformParameteriEXT);
pub const glPixelTransformParameterivEXT = GLEW_GET_FUN(__glewPixelTransformParameterivEXT);
pub const GLEW_EXT_pixel_transform = GLEW_GET_VAR(__GLEW_EXT_pixel_transform);
pub const GL_EXT_pixel_transform_color_table = @as(c_int, 1);
pub const GLEW_EXT_pixel_transform_color_table = GLEW_GET_VAR(__GLEW_EXT_pixel_transform_color_table);
pub const GL_EXT_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_DISTANCE_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const glPointParameterfEXT = GLEW_GET_FUN(__glewPointParameterfEXT);
pub const glPointParameterfvEXT = GLEW_GET_FUN(__glewPointParameterfvEXT);
pub const GLEW_EXT_point_parameters = GLEW_GET_VAR(__GLEW_EXT_point_parameters);
pub const GL_EXT_polygon_offset = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_POLYGON_OFFSET_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8039, .hexadecimal);
pub const glPolygonOffsetEXT = GLEW_GET_FUN(__glewPolygonOffsetEXT);
pub const GLEW_EXT_polygon_offset = GLEW_GET_VAR(__GLEW_EXT_polygon_offset);
pub const GL_EXT_polygon_offset_clamp = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const glPolygonOffsetClampEXT = GLEW_GET_FUN(__glewPolygonOffsetClampEXT);
pub const GLEW_EXT_polygon_offset_clamp = GLEW_GET_VAR(__GLEW_EXT_polygon_offset_clamp);
pub const GL_EXT_post_depth_coverage = @as(c_int, 1);
pub const GLEW_EXT_post_depth_coverage = GLEW_GET_VAR(__GLEW_EXT_post_depth_coverage);
pub const GL_EXT_primitive_bounding_box = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const glPrimitiveBoundingBoxEXT = GLEW_GET_FUN(__glewPrimitiveBoundingBoxEXT);
pub const GLEW_EXT_primitive_bounding_box = GLEW_GET_VAR(__GLEW_EXT_primitive_bounding_box);
pub const GL_EXT_protected_textures = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_TEXTURE_PROTECTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFA, .hexadecimal);
pub const GLEW_EXT_protected_textures = GLEW_GET_VAR(__GLEW_EXT_protected_textures);
pub const GL_EXT_provoking_vertex = @as(c_int, 1);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const GL_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const glProvokingVertexEXT = GLEW_GET_FUN(__glewProvokingVertexEXT);
pub const GLEW_EXT_provoking_vertex = GLEW_GET_VAR(__GLEW_EXT_provoking_vertex);
pub const GL_EXT_pvrtc_sRGB = @as(c_int, 1);
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A54, .hexadecimal);
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A55, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A56, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A57, .hexadecimal);
pub const GLEW_EXT_pvrtc_sRGB = GLEW_GET_VAR(__GLEW_EXT_pvrtc_sRGB);
pub const GL_EXT_raster_multisample = @as(c_int, 1);
pub const GL_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E20, .hexadecimal);
pub const GL_RASTER_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9327, .hexadecimal);
pub const GL_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9328, .hexadecimal);
pub const GL_MAX_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9329, .hexadecimal);
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932A, .hexadecimal);
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932B, .hexadecimal);
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932C, .hexadecimal);
pub const GL_DEPTH_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932D, .hexadecimal);
pub const GL_STENCIL_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932E, .hexadecimal);
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932F, .hexadecimal);
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9330, .hexadecimal);
pub const GL_COVERAGE_MODULATION_TABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9331, .hexadecimal);
pub const GL_COVERAGE_MODULATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9332, .hexadecimal);
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9333, .hexadecimal);
pub const glCoverageModulationNV = GLEW_GET_FUN(__glewCoverageModulationNV);
pub const glCoverageModulationTableNV = GLEW_GET_FUN(__glewCoverageModulationTableNV);
pub const glGetCoverageModulationTableNV = GLEW_GET_FUN(__glewGetCoverageModulationTableNV);
pub const glRasterSamplesEXT = GLEW_GET_FUN(__glewRasterSamplesEXT);
pub const GLEW_EXT_raster_multisample = GLEW_GET_VAR(__GLEW_EXT_raster_multisample);
pub const GL_EXT_read_format_bgra = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const GLEW_EXT_read_format_bgra = GLEW_GET_VAR(__GLEW_EXT_read_format_bgra);
pub const GL_EXT_render_snorm = @as(c_int, 1);
pub const GL_R16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hexadecimal);
pub const GL_RG16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hexadecimal);
pub const GL_RGBA16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hexadecimal);
pub const GLEW_EXT_render_snorm = GLEW_GET_VAR(__GLEW_EXT_render_snorm);
pub const GL_EXT_rescale_normal = @as(c_int, 1);
pub const GL_RESCALE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const GLEW_EXT_rescale_normal = GLEW_GET_VAR(__GLEW_EXT_rescale_normal);
pub const GL_EXT_robustness = @as(c_int, 1);
pub const GL_LOSE_CONTEXT_ON_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_CONTEXT_ROBUST_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hexadecimal);
pub const glGetnUniformfvEXT = GLEW_GET_FUN(__glewGetnUniformfvEXT);
pub const glGetnUniformivEXT = GLEW_GET_FUN(__glewGetnUniformivEXT);
pub const glReadnPixelsEXT = GLEW_GET_FUN(__glewReadnPixelsEXT);
pub const GLEW_EXT_robustness = GLEW_GET_VAR(__GLEW_EXT_robustness);
pub const GL_EXT_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hexadecimal);
pub const GL_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GLEW_EXT_sRGB = GLEW_GET_VAR(__GLEW_EXT_sRGB);
pub const GL_EXT_sRGB_write_control = @as(c_int, 1);
pub const GLEW_EXT_sRGB_write_control = GLEW_GET_VAR(__GLEW_EXT_sRGB_write_control);
pub const GL_EXT_scene_marker = @as(c_int, 1);
pub const glBeginSceneEXT = GLEW_GET_FUN(__glewBeginSceneEXT);
pub const glEndSceneEXT = GLEW_GET_FUN(__glewEndSceneEXT);
pub const GLEW_EXT_scene_marker = GLEW_GET_VAR(__GLEW_EXT_scene_marker);
pub const GL_EXT_secondary_color = @as(c_int, 1);
pub const GL_COLOR_SUM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_CURRENT_SECONDARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const glSecondaryColor3bEXT = GLEW_GET_FUN(__glewSecondaryColor3bEXT);
pub const glSecondaryColor3bvEXT = GLEW_GET_FUN(__glewSecondaryColor3bvEXT);
pub const glSecondaryColor3dEXT = GLEW_GET_FUN(__glewSecondaryColor3dEXT);
pub const glSecondaryColor3dvEXT = GLEW_GET_FUN(__glewSecondaryColor3dvEXT);
pub const glSecondaryColor3fEXT = GLEW_GET_FUN(__glewSecondaryColor3fEXT);
pub const glSecondaryColor3fvEXT = GLEW_GET_FUN(__glewSecondaryColor3fvEXT);
pub const glSecondaryColor3iEXT = GLEW_GET_FUN(__glewSecondaryColor3iEXT);
pub const glSecondaryColor3ivEXT = GLEW_GET_FUN(__glewSecondaryColor3ivEXT);
pub const glSecondaryColor3sEXT = GLEW_GET_FUN(__glewSecondaryColor3sEXT);
pub const glSecondaryColor3svEXT = GLEW_GET_FUN(__glewSecondaryColor3svEXT);
pub const glSecondaryColor3ubEXT = GLEW_GET_FUN(__glewSecondaryColor3ubEXT);
pub const glSecondaryColor3ubvEXT = GLEW_GET_FUN(__glewSecondaryColor3ubvEXT);
pub const glSecondaryColor3uiEXT = GLEW_GET_FUN(__glewSecondaryColor3uiEXT);
pub const glSecondaryColor3uivEXT = GLEW_GET_FUN(__glewSecondaryColor3uivEXT);
pub const glSecondaryColor3usEXT = GLEW_GET_FUN(__glewSecondaryColor3usEXT);
pub const glSecondaryColor3usvEXT = GLEW_GET_FUN(__glewSecondaryColor3usvEXT);
pub const glSecondaryColorPointerEXT = GLEW_GET_FUN(__glewSecondaryColorPointerEXT);
pub const GLEW_EXT_secondary_color = GLEW_GET_VAR(__GLEW_EXT_secondary_color);
pub const GL_EXT_semaphore = @as(c_int, 1);
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9530, .hexadecimal);
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9531, .hexadecimal);
pub const GL_LAYOUT_GENERAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958D, .hexadecimal);
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958E, .hexadecimal);
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958F, .hexadecimal);
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9590, .hexadecimal);
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9591, .hexadecimal);
pub const GL_LAYOUT_TRANSFER_SRC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9592, .hexadecimal);
pub const GL_LAYOUT_TRANSFER_DST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9593, .hexadecimal);
pub const glDeleteSemaphoresEXT = GLEW_GET_FUN(__glewDeleteSemaphoresEXT);
pub const glGenSemaphoresEXT = GLEW_GET_FUN(__glewGenSemaphoresEXT);
pub const glGetSemaphoreParameterui64vEXT = GLEW_GET_FUN(__glewGetSemaphoreParameterui64vEXT);
pub const glIsSemaphoreEXT = GLEW_GET_FUN(__glewIsSemaphoreEXT);
pub const glSemaphoreParameterui64vEXT = GLEW_GET_FUN(__glewSemaphoreParameterui64vEXT);
pub const glSignalSemaphoreEXT = GLEW_GET_FUN(__glewSignalSemaphoreEXT);
pub const glWaitSemaphoreEXT = GLEW_GET_FUN(__glewWaitSemaphoreEXT);
pub const GLEW_EXT_semaphore = GLEW_GET_VAR(__GLEW_EXT_semaphore);
pub const GL_EXT_semaphore_fd = @as(c_int, 1);
pub const glImportSemaphoreFdEXT = GLEW_GET_FUN(__glewImportSemaphoreFdEXT);
pub const GLEW_EXT_semaphore_fd = GLEW_GET_VAR(__GLEW_EXT_semaphore_fd);
pub const GL_EXT_semaphore_win32 = @as(c_int, 1);
pub const glImportSemaphoreWin32HandleEXT = GLEW_GET_FUN(__glewImportSemaphoreWin32HandleEXT);
pub const glImportSemaphoreWin32NameEXT = GLEW_GET_FUN(__glewImportSemaphoreWin32NameEXT);
pub const GLEW_EXT_semaphore_win32 = GLEW_GET_VAR(__GLEW_EXT_semaphore_win32);
pub const GL_EXT_separate_shader_objects = @as(c_int, 1);
pub const GL_ACTIVE_PROGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const glActiveProgramEXT = GLEW_GET_FUN(__glewActiveProgramEXT);
pub const glCreateShaderProgramEXT = GLEW_GET_FUN(__glewCreateShaderProgramEXT);
pub const glUseShaderProgramEXT = GLEW_GET_FUN(__glewUseShaderProgramEXT);
pub const GLEW_EXT_separate_shader_objects = GLEW_GET_VAR(__GLEW_EXT_separate_shader_objects);
pub const GL_EXT_separate_specular_color = @as(c_int, 1);
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const GL_SINGLE_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const GLEW_EXT_separate_specular_color = GLEW_GET_VAR(__GLEW_EXT_separate_specular_color);
pub const GL_EXT_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A52, .hexadecimal);
pub const glFramebufferFetchBarrierEXT = GLEW_GET_FUN(__glewFramebufferFetchBarrierEXT);
pub const GLEW_EXT_shader_framebuffer_fetch = GLEW_GET_VAR(__GLEW_EXT_shader_framebuffer_fetch);
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = @as(c_int, 1);
pub const GLEW_EXT_shader_framebuffer_fetch_non_coherent = GLEW_GET_VAR(__GLEW_EXT_shader_framebuffer_fetch_non_coherent);
pub const GL_EXT_shader_group_vote = @as(c_int, 1);
pub const GLEW_EXT_shader_group_vote = GLEW_GET_VAR(__GLEW_EXT_shader_group_vote);
pub const GL_EXT_shader_image_load_formatted = @as(c_int, 1);
pub const GLEW_EXT_shader_image_load_formatted = GLEW_GET_VAR(__GLEW_EXT_shader_image_load_formatted);
pub const GL_EXT_shader_image_load_store = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_UNIFORM_BARRIER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = @as(c_int, 0x00000020);
pub const GL_COMMAND_BARRIER_BIT_EXT = @as(c_int, 0x00000040);
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000080);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000100);
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000200);
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000400);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = @as(c_int, 0x00001000);
pub const GL_MAX_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_IMAGE_BINDING_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const GL_IMAGE_BINDING_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const GL_IMAGE_BINDING_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const GL_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const GL_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const GL_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const GL_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const GL_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const GL_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const GL_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const GL_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const GL_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const GL_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const GL_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const GL_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const GL_MAX_IMAGE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const GL_IMAGE_BINDING_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const GL_ALL_BARRIER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const glBindImageTextureEXT = GLEW_GET_FUN(__glewBindImageTextureEXT);
pub const glMemoryBarrierEXT = GLEW_GET_FUN(__glewMemoryBarrierEXT);
pub const GLEW_EXT_shader_image_load_store = GLEW_GET_VAR(__GLEW_EXT_shader_image_load_store);
pub const GL_EXT_shader_implicit_conversions = @as(c_int, 1);
pub const GLEW_EXT_shader_implicit_conversions = GLEW_GET_VAR(__GLEW_EXT_shader_implicit_conversions);
pub const GL_EXT_shader_integer_mix = @as(c_int, 1);
pub const GLEW_EXT_shader_integer_mix = GLEW_GET_VAR(__GLEW_EXT_shader_integer_mix);
pub const GL_EXT_shader_io_blocks = @as(c_int, 1);
pub const GLEW_EXT_shader_io_blocks = GLEW_GET_VAR(__GLEW_EXT_shader_io_blocks);
pub const GL_EXT_shader_non_constant_global_initializers = @as(c_int, 1);
pub const GLEW_EXT_shader_non_constant_global_initializers = GLEW_GET_VAR(__GLEW_EXT_shader_non_constant_global_initializers);
pub const GL_EXT_shader_pixel_local_storage = @as(c_int, 1);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F63, .hexadecimal);
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F64, .hexadecimal);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F67, .hexadecimal);
pub const GLEW_EXT_shader_pixel_local_storage = GLEW_GET_VAR(__GLEW_EXT_shader_pixel_local_storage);
pub const GL_EXT_shader_pixel_local_storage2 = @as(c_int, 1);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9650, .hexadecimal);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9651, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9652, .hexadecimal);
pub const glClearPixelLocalStorageuiEXT = GLEW_GET_FUN(__glewClearPixelLocalStorageuiEXT);
pub const glFramebufferPixelLocalStorageSizeEXT = GLEW_GET_FUN(__glewFramebufferPixelLocalStorageSizeEXT);
pub const glGetFramebufferPixelLocalStorageSizeEXT = GLEW_GET_FUN(__glewGetFramebufferPixelLocalStorageSizeEXT);
pub const GLEW_EXT_shader_pixel_local_storage2 = GLEW_GET_VAR(__GLEW_EXT_shader_pixel_local_storage2);
pub const GL_EXT_shader_texture_lod = @as(c_int, 1);
pub const GLEW_EXT_shader_texture_lod = GLEW_GET_VAR(__GLEW_EXT_shader_texture_lod);
pub const GL_EXT_shadow_funcs = @as(c_int, 1);
pub const GLEW_EXT_shadow_funcs = GLEW_GET_VAR(__GLEW_EXT_shadow_funcs);
pub const GL_EXT_shadow_samplers = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_COMPARE_REF_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GLEW_EXT_shadow_samplers = GLEW_GET_VAR(__GLEW_EXT_shadow_samplers);
pub const GL_EXT_shared_texture_palette = @as(c_int, 1);
pub const GL_SHARED_TEXTURE_PALETTE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FB, .hexadecimal);
pub const GLEW_EXT_shared_texture_palette = GLEW_GET_VAR(__GLEW_EXT_shared_texture_palette);
pub const GL_EXT_sparse_texture = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_TEXTURE_SPARSE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hexadecimal);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hexadecimal);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hexadecimal);
pub const GL_NUM_SPARSE_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hexadecimal);
pub const glTexPageCommitmentEXT = GLEW_GET_FUN(__glewTexPageCommitmentEXT);
pub const glTexturePageCommitmentEXT = GLEW_GET_FUN(__glewTexturePageCommitmentEXT);
pub const GLEW_EXT_sparse_texture = GLEW_GET_VAR(__GLEW_EXT_sparse_texture);
pub const GL_EXT_sparse_texture2 = @as(c_int, 1);
pub const GLEW_EXT_sparse_texture2 = GLEW_GET_VAR(__GLEW_EXT_sparse_texture2);
pub const GL_EXT_static_vertex_array = @as(c_int, 1);
pub const GLEW_EXT_static_vertex_array = GLEW_GET_VAR(__GLEW_EXT_static_vertex_array);
pub const GL_EXT_stencil_clear_tag = @as(c_int, 1);
pub const GL_STENCIL_TAG_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F2, .hexadecimal);
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F3, .hexadecimal);
pub const GLEW_EXT_stencil_clear_tag = GLEW_GET_VAR(__GLEW_EXT_stencil_clear_tag);
pub const GL_EXT_stencil_two_side = @as(c_int, 1);
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8910, .hexadecimal);
pub const GL_ACTIVE_STENCIL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8911, .hexadecimal);
pub const glActiveStencilFaceEXT = GLEW_GET_FUN(__glewActiveStencilFaceEXT);
pub const GLEW_EXT_stencil_two_side = GLEW_GET_VAR(__GLEW_EXT_stencil_two_side);
pub const GL_EXT_stencil_wrap = @as(c_int, 1);
pub const GL_INCR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_DECR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GLEW_EXT_stencil_wrap = GLEW_GET_VAR(__GLEW_EXT_stencil_wrap);
pub const GL_EXT_subtexture = @as(c_int, 1);
pub const glTexSubImage1DEXT = GLEW_GET_FUN(__glewTexSubImage1DEXT);
pub const glTexSubImage2DEXT = GLEW_GET_FUN(__glewTexSubImage2DEXT);
pub const glTexSubImage3DEXT = GLEW_GET_FUN(__glewTexSubImage3DEXT);
pub const GLEW_EXT_subtexture = GLEW_GET_VAR(__GLEW_EXT_subtexture);
pub const GL_EXT_tessellation_point_size = @as(c_int, 1);
pub const GL_QUADS_EXT = @as(c_int, 0x0007);
pub const GL_TESS_CONTROL_SHADER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_PATCHES_EXT = @as(c_int, 0xE);
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_GEN_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_SPACING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_ISOLINES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_FRACTIONAL_ODD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRACTIONAL_EVEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_IS_PER_PATCH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const glPatchParameteriEXT = GLEW_GET_FUN(__glewPatchParameteriEXT);
pub const GLEW_EXT_tessellation_point_size = GLEW_GET_VAR(__GLEW_EXT_tessellation_point_size);
pub const GL_EXT_tessellation_shader = @as(c_int, 1);
pub const GLEW_EXT_tessellation_shader = GLEW_GET_VAR(__GLEW_EXT_tessellation_shader);
pub const GL_EXT_texture = @as(c_int, 1);
pub const GL_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const GL_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const GL_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const GL_LUMINANCE4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const GL_LUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const GL_LUMINANCE16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE6_ALPHA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const GL_INTENSITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const GL_INTENSITY4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const GL_INTENSITY8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const GL_INTENSITY12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const GL_INTENSITY16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const GL_RGB2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804E, .hexadecimal);
pub const GL_RGB4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGBA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGB5_A1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGBA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGB10_A2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGBA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const GL_REPLACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8062, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GLEW_EXT_texture = GLEW_GET_VAR(__GLEW_EXT_texture);
pub const GL_EXT_texture3D = @as(c_int, 1);
pub const GL_PACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_UNPACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_TEXTURE_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_WRAP_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const glTexImage3DEXT = GLEW_GET_FUN(__glewTexImage3DEXT);
pub const GLEW_EXT_texture3D = GLEW_GET_VAR(__GLEW_EXT_texture3D);
pub const GL_EXT_texture_array = @as(c_int, 1);
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const GL_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const glFramebufferTextureLayerEXT = GLEW_GET_FUN(__glewFramebufferTextureLayerEXT);
pub const GLEW_EXT_texture_array = GLEW_GET_VAR(__GLEW_EXT_texture_array);
pub const GL_EXT_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_EXT = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const glGetSamplerParameterIivEXT = GLEW_GET_FUN(__glewGetSamplerParameterIivEXT);
pub const glGetSamplerParameterIuivEXT = GLEW_GET_FUN(__glewGetSamplerParameterIuivEXT);
pub const glSamplerParameterIivEXT = GLEW_GET_FUN(__glewSamplerParameterIivEXT);
pub const glSamplerParameterIuivEXT = GLEW_GET_FUN(__glewSamplerParameterIuivEXT);
pub const GLEW_EXT_texture_border_clamp = GLEW_GET_VAR(__GLEW_EXT_texture_border_clamp);
pub const GL_EXT_texture_buffer = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const GLEW_EXT_texture_buffer = GLEW_GET_VAR(__GLEW_EXT_texture_buffer);
pub const GL_EXT_texture_buffer_object = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const glTexBufferEXT = GLEW_GET_FUN(__glewTexBufferEXT);
pub const GLEW_EXT_texture_buffer_object = GLEW_GET_VAR(__GLEW_EXT_texture_buffer_object);
pub const GL_EXT_texture_compression_astc_decode_mode = @as(c_int, 1);
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F69, .hexadecimal);
pub const GLEW_EXT_texture_compression_astc_decode_mode = GLEW_GET_VAR(__GLEW_EXT_texture_compression_astc_decode_mode);
pub const GL_EXT_texture_compression_astc_decode_mode_rgb9e5 = @as(c_int, 1);
pub const GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5 = GLEW_GET_VAR(__GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5);
pub const GL_EXT_texture_compression_bptc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GLEW_EXT_texture_compression_bptc = GLEW_GET_VAR(__GLEW_EXT_texture_compression_bptc);
pub const GL_EXT_texture_compression_dxt1 = @as(c_int, 1);
pub const GLEW_EXT_texture_compression_dxt1 = GLEW_GET_VAR(__GLEW_EXT_texture_compression_dxt1);
pub const GL_EXT_texture_compression_latc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hexadecimal);
pub const GLEW_EXT_texture_compression_latc = GLEW_GET_VAR(__GLEW_EXT_texture_compression_latc);
pub const GL_EXT_texture_compression_rgtc = @as(c_int, 1);
pub const GL_COMPRESSED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const GLEW_EXT_texture_compression_rgtc = GLEW_GET_VAR(__GLEW_EXT_texture_compression_rgtc);
pub const GL_EXT_texture_compression_s3tc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hexadecimal);
pub const GLEW_EXT_texture_compression_s3tc = GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc);
pub const GL_EXT_texture_compression_s3tc_srgb = @as(c_int, 1);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hexadecimal);
pub const GLEW_EXT_texture_compression_s3tc_srgb = GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc_srgb);
pub const GL_EXT_texture_cube_map = @as(c_int, 1);
pub const GL_NORMAL_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GLEW_EXT_texture_cube_map = GLEW_GET_VAR(__GLEW_EXT_texture_cube_map);
pub const GL_EXT_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GLEW_EXT_texture_cube_map_array = GLEW_GET_VAR(__GLEW_EXT_texture_cube_map_array);
pub const GL_EXT_texture_edge_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GLEW_EXT_texture_edge_clamp = GLEW_GET_VAR(__GLEW_EXT_texture_edge_clamp);
pub const GL_EXT_texture_env = @as(c_int, 1);
pub const GLEW_EXT_texture_env = GLEW_GET_VAR(__GLEW_EXT_texture_env);
pub const GL_EXT_texture_env_add = @as(c_int, 1);
pub const GLEW_EXT_texture_env_add = GLEW_GET_VAR(__GLEW_EXT_texture_env_add);
pub const GL_EXT_texture_env_combine = @as(c_int, 1);
pub const GL_COMBINE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_RGB_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_ADD_SIGNED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_INTERPOLATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_PRIMARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PREVIOUS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_SOURCE0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_OPERAND0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GLEW_EXT_texture_env_combine = GLEW_GET_VAR(__GLEW_EXT_texture_env_combine);
pub const GL_EXT_texture_env_dot3 = @as(c_int, 1);
pub const GL_DOT3_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hexadecimal);
pub const GL_DOT3_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GLEW_EXT_texture_env_dot3 = GLEW_GET_VAR(__GLEW_EXT_texture_env_dot3);
pub const GL_EXT_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const GLEW_EXT_texture_filter_anisotropic = GLEW_GET_VAR(__GLEW_EXT_texture_filter_anisotropic);
pub const GL_EXT_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hexadecimal);
pub const GL_WEIGHTED_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hexadecimal);
pub const GLEW_EXT_texture_filter_minmax = GLEW_GET_VAR(__GLEW_EXT_texture_filter_minmax);
pub const GL_EXT_texture_format_BGRA8888 = @as(c_int, 1);
pub const GLEW_EXT_texture_format_BGRA8888 = GLEW_GET_VAR(__GLEW_EXT_texture_format_BGRA8888);
pub const GL_EXT_texture_format_sRGB_override = @as(c_int, 1);
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBF, .hexadecimal);
pub const GLEW_EXT_texture_format_sRGB_override = GLEW_GET_VAR(__GLEW_EXT_texture_format_sRGB_override);
pub const GL_EXT_texture_integer = @as(c_int, 1);
pub const GL_RGBA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const GL_RGB32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const GL_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D72, .hexadecimal);
pub const GL_INTENSITY32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D73, .hexadecimal);
pub const GL_LUMINANCE32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D74, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D75, .hexadecimal);
pub const GL_RGBA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const GL_RGB16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const GL_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D78, .hexadecimal);
pub const GL_INTENSITY16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D79, .hexadecimal);
pub const GL_LUMINANCE16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7A, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7B, .hexadecimal);
pub const GL_RGBA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const GL_RGB8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const GL_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7E, .hexadecimal);
pub const GL_INTENSITY8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7F, .hexadecimal);
pub const GL_LUMINANCE8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D80, .hexadecimal);
pub const GL_LUMINANCE_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D81, .hexadecimal);
pub const GL_RGBA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const GL_RGB32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const GL_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D84, .hexadecimal);
pub const GL_INTENSITY32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D85, .hexadecimal);
pub const GL_LUMINANCE32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D86, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D87, .hexadecimal);
pub const GL_RGBA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const GL_RGB16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const GL_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8A, .hexadecimal);
pub const GL_INTENSITY16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8B, .hexadecimal);
pub const GL_LUMINANCE16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8C, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8D, .hexadecimal);
pub const GL_RGBA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const GL_RGB8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const GL_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D90, .hexadecimal);
pub const GL_INTENSITY8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D91, .hexadecimal);
pub const GL_LUMINANCE8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D92, .hexadecimal);
pub const GL_LUMINANCE_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D93, .hexadecimal);
pub const GL_RED_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GL_GREEN_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const GL_BLUE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const GL_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hexadecimal);
pub const GL_RGB_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const GL_RGBA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const GL_BGR_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const GL_BGRA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const GL_LUMINANCE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9C, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9D, .hexadecimal);
pub const GL_RGBA_INTEGER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9E, .hexadecimal);
pub const glClearColorIiEXT = GLEW_GET_FUN(__glewClearColorIiEXT);
pub const glClearColorIuiEXT = GLEW_GET_FUN(__glewClearColorIuiEXT);
pub const glGetTexParameterIivEXT = GLEW_GET_FUN(__glewGetTexParameterIivEXT);
pub const glGetTexParameterIuivEXT = GLEW_GET_FUN(__glewGetTexParameterIuivEXT);
pub const glTexParameterIivEXT = GLEW_GET_FUN(__glewTexParameterIivEXT);
pub const glTexParameterIuivEXT = GLEW_GET_FUN(__glewTexParameterIuivEXT);
pub const GLEW_EXT_texture_integer = GLEW_GET_VAR(__GLEW_EXT_texture_integer);
pub const GL_EXT_texture_lod_bias = @as(c_int, 1);
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_TEXTURE_FILTER_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GLEW_EXT_texture_lod_bias = GLEW_GET_VAR(__GLEW_EXT_texture_lod_bias);
pub const GL_EXT_texture_mirror_clamp = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8912, .hexadecimal);
pub const GLEW_EXT_texture_mirror_clamp = GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp);
pub const GL_EXT_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GLEW_EXT_texture_mirror_clamp_to_edge = GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp_to_edge);
pub const GL_EXT_texture_norm16 = @as(c_int, 1);
pub const GL_R16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hexadecimal);
pub const GL_RG16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hexadecimal);
pub const GL_RGB16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hexadecimal);
pub const GLEW_EXT_texture_norm16 = GLEW_GET_VAR(__GLEW_EXT_texture_norm16);
pub const GL_EXT_texture_object = @as(c_int, 1);
pub const GL_TEXTURE_PRIORITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const GL_TEXTURE_RESIDENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const GL_TEXTURE_1D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_2D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_TEXTURE_3D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const glAreTexturesResidentEXT = GLEW_GET_FUN(__glewAreTexturesResidentEXT);
pub const glBindTextureEXT = GLEW_GET_FUN(__glewBindTextureEXT);
pub const glDeleteTexturesEXT = GLEW_GET_FUN(__glewDeleteTexturesEXT);
pub const glGenTexturesEXT = GLEW_GET_FUN(__glewGenTexturesEXT);
pub const glIsTextureEXT = GLEW_GET_FUN(__glewIsTextureEXT);
pub const glPrioritizeTexturesEXT = GLEW_GET_FUN(__glewPrioritizeTexturesEXT);
pub const GLEW_EXT_texture_object = GLEW_GET_VAR(__GLEW_EXT_texture_object);
pub const GL_EXT_texture_perturb_normal = @as(c_int, 1);
pub const GL_PERTURB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AE, .hexadecimal);
pub const GL_TEXTURE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AF, .hexadecimal);
pub const glTextureNormalEXT = GLEW_GET_FUN(__glewTextureNormalEXT);
pub const GLEW_EXT_texture_perturb_normal = GLEW_GET_VAR(__GLEW_EXT_texture_perturb_normal);
pub const GL_EXT_texture_query_lod = @as(c_int, 1);
pub const GLEW_EXT_texture_query_lod = GLEW_GET_VAR(__GLEW_EXT_texture_query_lod);
pub const GL_EXT_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GLEW_EXT_texture_rectangle = GLEW_GET_VAR(__GLEW_EXT_texture_rectangle);
pub const GL_EXT_texture_rg = @as(c_int, 1);
pub const GL_RED_EXT = @as(c_int, 0x1903);
pub const GL_RG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hexadecimal);
pub const GL_R8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const GL_RG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const GLEW_EXT_texture_rg = GLEW_GET_VAR(__GLEW_EXT_texture_rg);
pub const GL_EXT_texture_sRGB = @as(c_int, 1);
pub const GL_SRGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_COMPRESSED_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const GLEW_EXT_texture_sRGB = GLEW_GET_VAR(__GLEW_EXT_texture_sRGB);
pub const GL_EXT_texture_sRGB_R8 = @as(c_int, 1);
pub const GL_SR8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBD, .hexadecimal);
pub const GLEW_EXT_texture_sRGB_R8 = GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_R8);
pub const GL_EXT_texture_sRGB_RG8 = @as(c_int, 1);
pub const GL_SRG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBE, .hexadecimal);
pub const GLEW_EXT_texture_sRGB_RG8 = GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_RG8);
pub const GL_EXT_texture_sRGB_decode = @as(c_int, 1);
pub const GL_TEXTURE_SRGB_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A48, .hexadecimal);
pub const GL_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A49, .hexadecimal);
pub const GL_SKIP_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4A, .hexadecimal);
pub const GLEW_EXT_texture_sRGB_decode = GLEW_GET_VAR(__GLEW_EXT_texture_sRGB_decode);
pub const GL_EXT_texture_shadow_lod = @as(c_int, 1);
pub const GLEW_EXT_texture_shadow_lod = GLEW_GET_VAR(__GLEW_EXT_texture_shadow_lod);
pub const GL_EXT_texture_shared_exponent = @as(c_int, 1);
pub const GL_RGB9_E5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_TEXTURE_SHARED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const GLEW_EXT_texture_shared_exponent = GLEW_GET_VAR(__GLEW_EXT_texture_shared_exponent);
pub const GL_EXT_texture_snorm = @as(c_int, 1);
pub const GL_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9010, .hexadecimal);
pub const GL_LUMINANCE_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9011, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9012, .hexadecimal);
pub const GL_INTENSITY_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9013, .hexadecimal);
pub const GL_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9014, .hexadecimal);
pub const GL_LUMINANCE8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9015, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9016, .hexadecimal);
pub const GL_INTENSITY8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9017, .hexadecimal);
pub const GL_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9018, .hexadecimal);
pub const GL_LUMINANCE16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9019, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901A, .hexadecimal);
pub const GL_INTENSITY16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901B, .hexadecimal);
pub const GLEW_EXT_texture_snorm = GLEW_GET_VAR(__GLEW_EXT_texture_snorm);
pub const GL_EXT_texture_storage = @as(c_int, 1);
pub const GL_R32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const GL_RG32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const GL_RGBA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGB32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_LUMINANCE32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_LUMINANCE16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const glTexStorage1DEXT = GLEW_GET_FUN(__glewTexStorage1DEXT);
pub const glTexStorage2DEXT = GLEW_GET_FUN(__glewTexStorage2DEXT);
pub const glTexStorage3DEXT = GLEW_GET_FUN(__glewTexStorage3DEXT);
pub const glTextureStorage1DEXT = GLEW_GET_FUN(__glewTextureStorage1DEXT);
pub const glTextureStorage2DEXT = GLEW_GET_FUN(__glewTextureStorage2DEXT);
pub const glTextureStorage3DEXT = GLEW_GET_FUN(__glewTextureStorage3DEXT);
pub const GLEW_EXT_texture_storage = GLEW_GET_VAR(__GLEW_EXT_texture_storage);
pub const GL_EXT_texture_swizzle = @as(c_int, 1);
pub const GL_TEXTURE_SWIZZLE_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_G_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_B_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_A_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const GLEW_EXT_texture_swizzle = GLEW_GET_VAR(__GLEW_EXT_texture_swizzle);
pub const GL_EXT_texture_type_2_10_10_10_REV = @as(c_int, 1);
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const GLEW_EXT_texture_type_2_10_10_10_REV = GLEW_GET_VAR(__GLEW_EXT_texture_type_2_10_10_10_REV);
pub const GL_EXT_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const glTextureViewEXT = GLEW_GET_FUN(__glewTextureViewEXT);
pub const GLEW_EXT_texture_view = GLEW_GET_VAR(__GLEW_EXT_texture_view);
pub const GL_EXT_timer_query = @as(c_int, 1);
pub const glGetQueryObjecti64vEXT = GLEW_GET_FUN(__glewGetQueryObjecti64vEXT);
pub const glGetQueryObjectui64vEXT = GLEW_GET_FUN(__glewGetQueryObjectui64vEXT);
pub const GLEW_EXT_timer_query = GLEW_GET_VAR(__GLEW_EXT_timer_query);
pub const GL_EXT_transform_feedback = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_RASTERIZER_DISCARD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const glBeginTransformFeedbackEXT = GLEW_GET_FUN(__glewBeginTransformFeedbackEXT);
pub const glBindBufferBaseEXT = GLEW_GET_FUN(__glewBindBufferBaseEXT);
pub const glBindBufferOffsetEXT = GLEW_GET_FUN(__glewBindBufferOffsetEXT);
pub const glBindBufferRangeEXT = GLEW_GET_FUN(__glewBindBufferRangeEXT);
pub const glEndTransformFeedbackEXT = GLEW_GET_FUN(__glewEndTransformFeedbackEXT);
pub const glGetTransformFeedbackVaryingEXT = GLEW_GET_FUN(__glewGetTransformFeedbackVaryingEXT);
pub const glTransformFeedbackVaryingsEXT = GLEW_GET_FUN(__glewTransformFeedbackVaryingsEXT);
pub const GLEW_EXT_transform_feedback = GLEW_GET_VAR(__GLEW_EXT_transform_feedback);
pub const GL_EXT_unpack_subimage = @as(c_int, 1);
pub const GL_UNPACK_ROW_LENGTH_EXT = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS_EXT = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS_EXT = @as(c_int, 0x0CF4);
pub const GLEW_EXT_unpack_subimage = GLEW_GET_VAR(__GLEW_EXT_unpack_subimage);
pub const GL_EXT_vertex_array = @as(c_int, 1);
pub const GL_DOUBLE_EXT = @as(c_int, 0x140A);
pub const GL_VERTEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_NORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const GL_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const GL_INDEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const GL_VERTEX_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const GL_VERTEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const GL_VERTEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const GL_VERTEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807D, .hexadecimal);
pub const GL_NORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const GL_NORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const GL_NORMAL_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8080, .hexadecimal);
pub const GL_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const GL_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const GL_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const GL_COLOR_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8084, .hexadecimal);
pub const GL_INDEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const GL_INDEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const GL_INDEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8087, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808B, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808D, .hexadecimal);
pub const GL_VERTEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const GL_NORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const GL_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const GL_INDEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const glArrayElementEXT = GLEW_GET_FUN(__glewArrayElementEXT);
pub const glColorPointerEXT = GLEW_GET_FUN(__glewColorPointerEXT);
pub const glDrawArraysEXT = GLEW_GET_FUN(__glewDrawArraysEXT);
pub const glEdgeFlagPointerEXT = GLEW_GET_FUN(__glewEdgeFlagPointerEXT);
pub const glIndexPointerEXT = GLEW_GET_FUN(__glewIndexPointerEXT);
pub const glNormalPointerEXT = GLEW_GET_FUN(__glewNormalPointerEXT);
pub const glTexCoordPointerEXT = GLEW_GET_FUN(__glewTexCoordPointerEXT);
pub const glVertexPointerEXT = GLEW_GET_FUN(__glewVertexPointerEXT);
pub const GLEW_EXT_vertex_array = GLEW_GET_VAR(__GLEW_EXT_vertex_array);
pub const GL_EXT_vertex_array_bgra = @as(c_int, 1);
pub const GLEW_EXT_vertex_array_bgra = GLEW_GET_VAR(__GLEW_EXT_vertex_array_bgra);
pub const GL_EXT_vertex_array_setXXX = @as(c_int, 1);
pub const glBindArraySetEXT = GLEW_GET_FUN(__glewBindArraySetEXT);
pub const glCreateArraySetExt = GLEW_GET_FUN(__glewCreateArraySetExt);
pub const glDeleteArraySetsEXT = GLEW_GET_FUN(__glewDeleteArraySetsEXT);
pub const GLEW_EXT_vertex_array_setXXX = GLEW_GET_VAR(__GLEW_EXT_vertex_array_setXXX);
pub const GL_EXT_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_DOUBLE_MAT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const GL_DOUBLE_MAT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const GL_DOUBLE_MAT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const GL_DOUBLE_MAT2x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const GL_DOUBLE_MAT2x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const GL_DOUBLE_MAT3x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const GL_DOUBLE_MAT3x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const GL_DOUBLE_MAT4x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const GL_DOUBLE_MAT4x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const GL_DOUBLE_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const GL_DOUBLE_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const GL_DOUBLE_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const glGetVertexAttribLdvEXT = GLEW_GET_FUN(__glewGetVertexAttribLdvEXT);
pub const glVertexArrayVertexAttribLOffsetEXT = GLEW_GET_FUN(__glewVertexArrayVertexAttribLOffsetEXT);
pub const glVertexAttribL1dEXT = GLEW_GET_FUN(__glewVertexAttribL1dEXT);
pub const glVertexAttribL1dvEXT = GLEW_GET_FUN(__glewVertexAttribL1dvEXT);
pub const glVertexAttribL2dEXT = GLEW_GET_FUN(__glewVertexAttribL2dEXT);
pub const glVertexAttribL2dvEXT = GLEW_GET_FUN(__glewVertexAttribL2dvEXT);
pub const glVertexAttribL3dEXT = GLEW_GET_FUN(__glewVertexAttribL3dEXT);
pub const glVertexAttribL3dvEXT = GLEW_GET_FUN(__glewVertexAttribL3dvEXT);
pub const glVertexAttribL4dEXT = GLEW_GET_FUN(__glewVertexAttribL4dEXT);
pub const glVertexAttribL4dvEXT = GLEW_GET_FUN(__glewVertexAttribL4dvEXT);
pub const glVertexAttribLPointerEXT = GLEW_GET_FUN(__glewVertexAttribLPointerEXT);
pub const GLEW_EXT_vertex_attrib_64bit = GLEW_GET_VAR(__GLEW_EXT_vertex_attrib_64bit);
pub const GL_EXT_vertex_shader = @as(c_int, 1);
pub const GL_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8780, .hexadecimal);
pub const GL_VERTEX_SHADER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8781, .hexadecimal);
pub const GL_OP_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8782, .hexadecimal);
pub const GL_OP_NEGATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8783, .hexadecimal);
pub const GL_OP_DOT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8784, .hexadecimal);
pub const GL_OP_DOT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8785, .hexadecimal);
pub const GL_OP_MUL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8786, .hexadecimal);
pub const GL_OP_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8787, .hexadecimal);
pub const GL_OP_MADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8788, .hexadecimal);
pub const GL_OP_FRAC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8789, .hexadecimal);
pub const GL_OP_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878A, .hexadecimal);
pub const GL_OP_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878B, .hexadecimal);
pub const GL_OP_SET_GE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878C, .hexadecimal);
pub const GL_OP_SET_LT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878D, .hexadecimal);
pub const GL_OP_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878E, .hexadecimal);
pub const GL_OP_FLOOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878F, .hexadecimal);
pub const GL_OP_ROUND_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8790, .hexadecimal);
pub const GL_OP_EXP_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8791, .hexadecimal);
pub const GL_OP_LOG_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8792, .hexadecimal);
pub const GL_OP_POWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8793, .hexadecimal);
pub const GL_OP_RECIP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8794, .hexadecimal);
pub const GL_OP_RECIP_SQRT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8795, .hexadecimal);
pub const GL_OP_SUB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8796, .hexadecimal);
pub const GL_OP_CROSS_PRODUCT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8797, .hexadecimal);
pub const GL_OP_MULTIPLY_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8798, .hexadecimal);
pub const GL_OP_MOV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8799, .hexadecimal);
pub const GL_OUTPUT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879A, .hexadecimal);
pub const GL_OUTPUT_COLOR0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879B, .hexadecimal);
pub const GL_OUTPUT_COLOR1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879C, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879D, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879E, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879F, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A0, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A1, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A2, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A3, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A4, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A5, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A6, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A7, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A8, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A9, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AA, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AB, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AC, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AD, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AE, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AF, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B0, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B1, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B2, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B3, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B4, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B5, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B6, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B7, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B8, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B9, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BA, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BB, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BC, .hexadecimal);
pub const GL_OUTPUT_FOG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BD, .hexadecimal);
pub const GL_SCALAR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BE, .hexadecimal);
pub const GL_VECTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BF, .hexadecimal);
pub const GL_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C0, .hexadecimal);
pub const GL_VARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C1, .hexadecimal);
pub const GL_INVARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C2, .hexadecimal);
pub const GL_LOCAL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C3, .hexadecimal);
pub const GL_LOCAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C4, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C5, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C6, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C7, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C8, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C9, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CA, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CB, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CC, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CD, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CE, .hexadecimal);
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CF, .hexadecimal);
pub const GL_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D0, .hexadecimal);
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D1, .hexadecimal);
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D2, .hexadecimal);
pub const GL_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D3, .hexadecimal);
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D4, .hexadecimal);
pub const GL_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D5, .hexadecimal);
pub const GL_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D6, .hexadecimal);
pub const GL_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D7, .hexadecimal);
pub const GL_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D8, .hexadecimal);
pub const GL_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D9, .hexadecimal);
pub const GL_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DA, .hexadecimal);
pub const GL_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DB, .hexadecimal);
pub const GL_NEGATIVE_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DC, .hexadecimal);
pub const GL_ZERO_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DD, .hexadecimal);
pub const GL_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DE, .hexadecimal);
pub const GL_NEGATIVE_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DF, .hexadecimal);
pub const GL_NORMALIZED_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E0, .hexadecimal);
pub const GL_FULL_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E1, .hexadecimal);
pub const GL_CURRENT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E2, .hexadecimal);
pub const GL_MVP_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E3, .hexadecimal);
pub const GL_VARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E4, .hexadecimal);
pub const GL_VARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E5, .hexadecimal);
pub const GL_VARIANT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E6, .hexadecimal);
pub const GL_VARIANT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E7, .hexadecimal);
pub const GL_VARIANT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E8, .hexadecimal);
pub const GL_VARIANT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E9, .hexadecimal);
pub const GL_INVARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EA, .hexadecimal);
pub const GL_INVARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EB, .hexadecimal);
pub const GL_LOCAL_CONSTANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EC, .hexadecimal);
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87ED, .hexadecimal);
pub const glBeginVertexShaderEXT = GLEW_GET_FUN(__glewBeginVertexShaderEXT);
pub const glBindLightParameterEXT = GLEW_GET_FUN(__glewBindLightParameterEXT);
pub const glBindMaterialParameterEXT = GLEW_GET_FUN(__glewBindMaterialParameterEXT);
pub const glBindParameterEXT = GLEW_GET_FUN(__glewBindParameterEXT);
pub const glBindTexGenParameterEXT = GLEW_GET_FUN(__glewBindTexGenParameterEXT);
pub const glBindTextureUnitParameterEXT = GLEW_GET_FUN(__glewBindTextureUnitParameterEXT);
pub const glBindVertexShaderEXT = GLEW_GET_FUN(__glewBindVertexShaderEXT);
pub const glDeleteVertexShaderEXT = GLEW_GET_FUN(__glewDeleteVertexShaderEXT);
pub const glDisableVariantClientStateEXT = GLEW_GET_FUN(__glewDisableVariantClientStateEXT);
pub const glEnableVariantClientStateEXT = GLEW_GET_FUN(__glewEnableVariantClientStateEXT);
pub const glEndVertexShaderEXT = GLEW_GET_FUN(__glewEndVertexShaderEXT);
pub const glExtractComponentEXT = GLEW_GET_FUN(__glewExtractComponentEXT);
pub const glGenSymbolsEXT = GLEW_GET_FUN(__glewGenSymbolsEXT);
pub const glGenVertexShadersEXT = GLEW_GET_FUN(__glewGenVertexShadersEXT);
pub const glGetInvariantBooleanvEXT = GLEW_GET_FUN(__glewGetInvariantBooleanvEXT);
pub const glGetInvariantFloatvEXT = GLEW_GET_FUN(__glewGetInvariantFloatvEXT);
pub const glGetInvariantIntegervEXT = GLEW_GET_FUN(__glewGetInvariantIntegervEXT);
pub const glGetLocalConstantBooleanvEXT = GLEW_GET_FUN(__glewGetLocalConstantBooleanvEXT);
pub const glGetLocalConstantFloatvEXT = GLEW_GET_FUN(__glewGetLocalConstantFloatvEXT);
pub const glGetLocalConstantIntegervEXT = GLEW_GET_FUN(__glewGetLocalConstantIntegervEXT);
pub const glGetVariantBooleanvEXT = GLEW_GET_FUN(__glewGetVariantBooleanvEXT);
pub const glGetVariantFloatvEXT = GLEW_GET_FUN(__glewGetVariantFloatvEXT);
pub const glGetVariantIntegervEXT = GLEW_GET_FUN(__glewGetVariantIntegervEXT);
pub const glGetVariantPointervEXT = GLEW_GET_FUN(__glewGetVariantPointervEXT);
pub const glInsertComponentEXT = GLEW_GET_FUN(__glewInsertComponentEXT);
pub const glIsVariantEnabledEXT = GLEW_GET_FUN(__glewIsVariantEnabledEXT);
pub const glSetInvariantEXT = GLEW_GET_FUN(__glewSetInvariantEXT);
pub const glSetLocalConstantEXT = GLEW_GET_FUN(__glewSetLocalConstantEXT);
pub const glShaderOp1EXT = GLEW_GET_FUN(__glewShaderOp1EXT);
pub const glShaderOp2EXT = GLEW_GET_FUN(__glewShaderOp2EXT);
pub const glShaderOp3EXT = GLEW_GET_FUN(__glewShaderOp3EXT);
pub const glSwizzleEXT = GLEW_GET_FUN(__glewSwizzleEXT);
pub const glVariantPointerEXT = GLEW_GET_FUN(__glewVariantPointerEXT);
pub const glVariantbvEXT = GLEW_GET_FUN(__glewVariantbvEXT);
pub const glVariantdvEXT = GLEW_GET_FUN(__glewVariantdvEXT);
pub const glVariantfvEXT = GLEW_GET_FUN(__glewVariantfvEXT);
pub const glVariantivEXT = GLEW_GET_FUN(__glewVariantivEXT);
pub const glVariantsvEXT = GLEW_GET_FUN(__glewVariantsvEXT);
pub const glVariantubvEXT = GLEW_GET_FUN(__glewVariantubvEXT);
pub const glVariantuivEXT = GLEW_GET_FUN(__glewVariantuivEXT);
pub const glVariantusvEXT = GLEW_GET_FUN(__glewVariantusvEXT);
pub const glWriteMaskEXT = GLEW_GET_FUN(__glewWriteMaskEXT);
pub const GLEW_EXT_vertex_shader = GLEW_GET_VAR(__GLEW_EXT_vertex_shader);
pub const GL_EXT_vertex_weighting = @as(c_int, 1);
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = @as(c_int, 0x0BA3);
pub const GL_MODELVIEW0_MATRIX_EXT = @as(c_int, 0x0BA6);
pub const GL_MODELVIEW0_EXT = @as(c_int, 0x1700);
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8502, .hexadecimal);
pub const GL_MODELVIEW1_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8506, .hexadecimal);
pub const GL_VERTEX_WEIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8509, .hexadecimal);
pub const GL_MODELVIEW1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hexadecimal);
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850B, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850C, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850D, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850E, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850F, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8510, .hexadecimal);
pub const glVertexWeightPointerEXT = GLEW_GET_FUN(__glewVertexWeightPointerEXT);
pub const glVertexWeightfEXT = GLEW_GET_FUN(__glewVertexWeightfEXT);
pub const glVertexWeightfvEXT = GLEW_GET_FUN(__glewVertexWeightfvEXT);
pub const GLEW_EXT_vertex_weighting = GLEW_GET_VAR(__GLEW_EXT_vertex_weighting);
pub const GL_EXT_win32_keyed_mutex = @as(c_int, 1);
pub const glAcquireKeyedMutexWin32EXT = GLEW_GET_FUN(__glewAcquireKeyedMutexWin32EXT);
pub const glReleaseKeyedMutexWin32EXT = GLEW_GET_FUN(__glewReleaseKeyedMutexWin32EXT);
pub const GLEW_EXT_win32_keyed_mutex = GLEW_GET_VAR(__GLEW_EXT_win32_keyed_mutex);
pub const GL_EXT_window_rectangles = @as(c_int, 1);
pub const GL_INCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F10, .hexadecimal);
pub const GL_EXCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F11, .hexadecimal);
pub const GL_WINDOW_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F12, .hexadecimal);
pub const GL_WINDOW_RECTANGLE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F13, .hexadecimal);
pub const GL_MAX_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F14, .hexadecimal);
pub const GL_NUM_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F15, .hexadecimal);
pub const glWindowRectanglesEXT = GLEW_GET_FUN(__glewWindowRectanglesEXT);
pub const GLEW_EXT_window_rectangles = GLEW_GET_VAR(__GLEW_EXT_window_rectangles);
pub const GL_EXT_x11_sync_object = @as(c_int, 1);
pub const GL_SYNC_X11_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90E1, .hexadecimal);
pub const glImportSyncEXT = GLEW_GET_FUN(__glewImportSyncEXT);
pub const GLEW_EXT_x11_sync_object = GLEW_GET_VAR(__GLEW_EXT_x11_sync_object);
pub const GL_FJ_shader_binary_GCCSO = @as(c_int, 1);
pub const GL_GCCSO_SHADER_BINARY_FJ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9260, .hexadecimal);
pub const GLEW_FJ_shader_binary_GCCSO = GLEW_GET_VAR(__GLEW_FJ_shader_binary_GCCSO);
pub const GL_GREMEDY_frame_terminator = @as(c_int, 1);
pub const glFrameTerminatorGREMEDY = GLEW_GET_FUN(__glewFrameTerminatorGREMEDY);
pub const GLEW_GREMEDY_frame_terminator = GLEW_GET_VAR(__GLEW_GREMEDY_frame_terminator);
pub const GL_GREMEDY_string_marker = @as(c_int, 1);
pub const glStringMarkerGREMEDY = GLEW_GET_FUN(__glewStringMarkerGREMEDY);
pub const GLEW_GREMEDY_string_marker = GLEW_GET_VAR(__GLEW_GREMEDY_string_marker);
pub const GL_HP_convolution_border_modes = @as(c_int, 1);
pub const GLEW_HP_convolution_border_modes = GLEW_GET_VAR(__GLEW_HP_convolution_border_modes);
pub const GL_HP_image_transform = @as(c_int, 1);
pub const glGetImageTransformParameterfvHP = GLEW_GET_FUN(__glewGetImageTransformParameterfvHP);
pub const glGetImageTransformParameterivHP = GLEW_GET_FUN(__glewGetImageTransformParameterivHP);
pub const glImageTransformParameterfHP = GLEW_GET_FUN(__glewImageTransformParameterfHP);
pub const glImageTransformParameterfvHP = GLEW_GET_FUN(__glewImageTransformParameterfvHP);
pub const glImageTransformParameteriHP = GLEW_GET_FUN(__glewImageTransformParameteriHP);
pub const glImageTransformParameterivHP = GLEW_GET_FUN(__glewImageTransformParameterivHP);
pub const GLEW_HP_image_transform = GLEW_GET_VAR(__GLEW_HP_image_transform);
pub const GL_HP_occlusion_test = @as(c_int, 1);
pub const GLEW_HP_occlusion_test = GLEW_GET_VAR(__GLEW_HP_occlusion_test);
pub const GL_HP_texture_lighting = @as(c_int, 1);
pub const GLEW_HP_texture_lighting = GLEW_GET_VAR(__GLEW_HP_texture_lighting);
pub const GL_IBM_cull_vertex = @as(c_int, 1);
pub const GL_CULL_VERTEX_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103050, .decimal);
pub const GLEW_IBM_cull_vertex = GLEW_GET_VAR(__GLEW_IBM_cull_vertex);
pub const GL_IBM_multimode_draw_arrays = @as(c_int, 1);
pub const glMultiModeDrawArraysIBM = GLEW_GET_FUN(__glewMultiModeDrawArraysIBM);
pub const glMultiModeDrawElementsIBM = GLEW_GET_FUN(__glewMultiModeDrawElementsIBM);
pub const GLEW_IBM_multimode_draw_arrays = GLEW_GET_VAR(__GLEW_IBM_multimode_draw_arrays);
pub const GL_IBM_rasterpos_clip = @as(c_int, 1);
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103010, .decimal);
pub const GLEW_IBM_rasterpos_clip = GLEW_GET_VAR(__GLEW_IBM_rasterpos_clip);
pub const GL_IBM_static_data = @as(c_int, 1);
pub const GL_ALL_STATIC_DATA_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103060, .decimal);
pub const GL_STATIC_VERTEX_ARRAY_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103061, .decimal);
pub const GLEW_IBM_static_data = GLEW_GET_VAR(__GLEW_IBM_static_data);
pub const GL_IBM_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_MIRRORED_REPEAT_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GLEW_IBM_texture_mirrored_repeat = GLEW_GET_VAR(__GLEW_IBM_texture_mirrored_repeat);
pub const GL_IBM_vertex_array_lists = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103070, .decimal);
pub const GL_NORMAL_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103071, .decimal);
pub const GL_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103072, .decimal);
pub const GL_INDEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103073, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103074, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103075, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103076, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103077, .decimal);
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103080, .decimal);
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103081, .decimal);
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103082, .decimal);
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103083, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103084, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103085, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103086, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103087, .decimal);
pub const glColorPointerListIBM = GLEW_GET_FUN(__glewColorPointerListIBM);
pub const glEdgeFlagPointerListIBM = GLEW_GET_FUN(__glewEdgeFlagPointerListIBM);
pub const glFogCoordPointerListIBM = GLEW_GET_FUN(__glewFogCoordPointerListIBM);
pub const glIndexPointerListIBM = GLEW_GET_FUN(__glewIndexPointerListIBM);
pub const glNormalPointerListIBM = GLEW_GET_FUN(__glewNormalPointerListIBM);
pub const glSecondaryColorPointerListIBM = GLEW_GET_FUN(__glewSecondaryColorPointerListIBM);
pub const glTexCoordPointerListIBM = GLEW_GET_FUN(__glewTexCoordPointerListIBM);
pub const glVertexPointerListIBM = GLEW_GET_FUN(__glewVertexPointerListIBM);
pub const GLEW_IBM_vertex_array_lists = GLEW_GET_VAR(__GLEW_IBM_vertex_array_lists);
pub const GL_IMG_bindless_texture = @as(c_int, 1);
pub const glGetTextureHandleIMG = GLEW_GET_FUN(__glewGetTextureHandleIMG);
pub const glGetTextureSamplerHandleIMG = GLEW_GET_FUN(__glewGetTextureSamplerHandleIMG);
pub const glProgramUniformHandleui64IMG = GLEW_GET_FUN(__glewProgramUniformHandleui64IMG);
pub const glProgramUniformHandleui64vIMG = GLEW_GET_FUN(__glewProgramUniformHandleui64vIMG);
pub const glUniformHandleui64IMG = GLEW_GET_FUN(__glewUniformHandleui64IMG);
pub const glUniformHandleui64vIMG = GLEW_GET_FUN(__glewUniformHandleui64vIMG);
pub const GLEW_IMG_bindless_texture = GLEW_GET_VAR(__GLEW_IMG_bindless_texture);
pub const GL_IMG_framebuffer_downsample = @as(c_int, 1);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913C, .hexadecimal);
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913D, .hexadecimal);
pub const GL_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913E, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913F, .hexadecimal);
pub const glFramebufferTexture2DDownsampleIMG = GLEW_GET_FUN(__glewFramebufferTexture2DDownsampleIMG);
pub const glFramebufferTextureLayerDownsampleIMG = GLEW_GET_FUN(__glewFramebufferTextureLayerDownsampleIMG);
pub const GLEW_IMG_framebuffer_downsample = GLEW_GET_VAR(__GLEW_IMG_framebuffer_downsample);
pub const GL_IMG_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9133, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9134, .hexadecimal);
pub const GL_MAX_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9135, .hexadecimal);
pub const GL_TEXTURE_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9136, .hexadecimal);
pub const glFramebufferTexture2DMultisampleIMG = GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleIMG);
pub const glRenderbufferStorageMultisampleIMG = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleIMG);
pub const GLEW_IMG_multisampled_render_to_texture = GLEW_GET_VAR(__GLEW_IMG_multisampled_render_to_texture);
pub const GL_IMG_program_binary = @as(c_int, 1);
pub const GL_SGX_PROGRAM_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9130, .hexadecimal);
pub const GLEW_IMG_program_binary = GLEW_GET_VAR(__GLEW_IMG_program_binary);
pub const GL_IMG_read_format = @as(c_int, 1);
pub const GL_BGRA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GLEW_IMG_read_format = GLEW_GET_VAR(__GLEW_IMG_read_format);
pub const GL_IMG_shader_binary = @as(c_int, 1);
pub const GL_SGX_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C0A, .hexadecimal);
pub const GLEW_IMG_shader_binary = GLEW_GET_VAR(__GLEW_IMG_shader_binary);
pub const GL_IMG_texture_compression_pvrtc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C00, .hexadecimal);
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C01, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C02, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C03, .hexadecimal);
pub const GLEW_IMG_texture_compression_pvrtc = GLEW_GET_VAR(__GLEW_IMG_texture_compression_pvrtc);
pub const GL_IMG_texture_compression_pvrtc2 = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9137, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9138, .hexadecimal);
pub const GLEW_IMG_texture_compression_pvrtc2 = GLEW_GET_VAR(__GLEW_IMG_texture_compression_pvrtc2);
pub const GL_IMG_texture_env_enhanced_fixed_function = @as(c_int, 1);
pub const GL_DOT3_RGBA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_MODULATE_COLOR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C04, .hexadecimal);
pub const GL_RECIP_ADD_SIGNED_ALPHA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C05, .hexadecimal);
pub const GL_TEXTURE_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C06, .hexadecimal);
pub const GL_FACTOR_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C07, .hexadecimal);
pub const GL_FRAGMENT_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C08, .hexadecimal);
pub const GL_ADD_BLEND_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C09, .hexadecimal);
pub const GLEW_IMG_texture_env_enhanced_fixed_function = GLEW_GET_VAR(__GLEW_IMG_texture_env_enhanced_fixed_function);
pub const GL_IMG_texture_filter_cubic = @as(c_int, 1);
pub const GL_CUBIC_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9139, .hexadecimal);
pub const GL_CUBIC_MIPMAP_NEAREST_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913A, .hexadecimal);
pub const GL_CUBIC_MIPMAP_LINEAR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913B, .hexadecimal);
pub const GLEW_IMG_texture_filter_cubic = GLEW_GET_VAR(__GLEW_IMG_texture_filter_cubic);
pub const GL_INGR_color_clamp = @as(c_int, 1);
pub const GL_RED_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8560, .hexadecimal);
pub const GL_GREEN_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8561, .hexadecimal);
pub const GL_BLUE_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8562, .hexadecimal);
pub const GL_ALPHA_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8563, .hexadecimal);
pub const GL_RED_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8564, .hexadecimal);
pub const GL_GREEN_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8565, .hexadecimal);
pub const GL_BLUE_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8566, .hexadecimal);
pub const GL_ALPHA_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8567, .hexadecimal);
pub const GLEW_INGR_color_clamp = GLEW_GET_VAR(__GLEW_INGR_color_clamp);
pub const GL_INGR_interlace_read = @as(c_int, 1);
pub const GL_INTERLACE_READ_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8568, .hexadecimal);
pub const GLEW_INGR_interlace_read = GLEW_GET_VAR(__GLEW_INGR_interlace_read);
pub const GL_INTEL_blackhole_render = @as(c_int, 1);
pub const GL_BLACKHOLE_RENDER_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FC, .hexadecimal);
pub const GLEW_INTEL_blackhole_render = GLEW_GET_VAR(__GLEW_INTEL_blackhole_render);
pub const GL_INTEL_conservative_rasterization = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FE, .hexadecimal);
pub const GLEW_INTEL_conservative_rasterization = GLEW_GET_VAR(__GLEW_INTEL_conservative_rasterization);
pub const GL_INTEL_fragment_shader_ordering = @as(c_int, 1);
pub const GLEW_INTEL_fragment_shader_ordering = GLEW_GET_VAR(__GLEW_INTEL_fragment_shader_ordering);
pub const GL_INTEL_framebuffer_CMAA = @as(c_int, 1);
pub const GLEW_INTEL_framebuffer_CMAA = GLEW_GET_VAR(__GLEW_INTEL_framebuffer_CMAA);
pub const GL_INTEL_map_texture = @as(c_int, 1);
pub const GL_LAYOUT_DEFAULT_INTEL = @as(c_int, 0);
pub const GL_LAYOUT_LINEAR_INTEL = @as(c_int, 1);
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = @as(c_int, 2);
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FF, .hexadecimal);
pub const glMapTexture2DINTEL = GLEW_GET_FUN(__glewMapTexture2DINTEL);
pub const glSyncTextureINTEL = GLEW_GET_FUN(__glewSyncTextureINTEL);
pub const glUnmapTexture2DINTEL = GLEW_GET_FUN(__glewUnmapTexture2DINTEL);
pub const GLEW_INTEL_map_texture = GLEW_GET_VAR(__GLEW_INTEL_map_texture);
pub const GL_INTEL_parallel_arrays = @as(c_int, 1);
pub const GL_PARALLEL_ARRAYS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F4, .hexadecimal);
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F5, .hexadecimal);
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F6, .hexadecimal);
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F7, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F8, .hexadecimal);
pub const glColorPointervINTEL = GLEW_GET_FUN(__glewColorPointervINTEL);
pub const glNormalPointervINTEL = GLEW_GET_FUN(__glewNormalPointervINTEL);
pub const glTexCoordPointervINTEL = GLEW_GET_FUN(__glewTexCoordPointervINTEL);
pub const glVertexPointervINTEL = GLEW_GET_FUN(__glewVertexPointervINTEL);
pub const GLEW_INTEL_parallel_arrays = GLEW_GET_VAR(__GLEW_INTEL_parallel_arrays);
pub const GL_INTEL_performance_query = @as(c_int, 1);
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = @as(c_int, 0x0000);
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = @as(c_int, 0x0001);
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F9, .hexadecimal);
pub const GL_PERFQUERY_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FA, .hexadecimal);
pub const GL_PERFQUERY_WAIT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FB, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F0, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F1, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F2, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F3, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F4, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F5, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F8, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F9, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FA, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FB, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FC, .hexadecimal);
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FD, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FE, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FF, .hexadecimal);
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9500, .hexadecimal);
pub const glBeginPerfQueryINTEL = GLEW_GET_FUN(__glewBeginPerfQueryINTEL);
pub const glCreatePerfQueryINTEL = GLEW_GET_FUN(__glewCreatePerfQueryINTEL);
pub const glDeletePerfQueryINTEL = GLEW_GET_FUN(__glewDeletePerfQueryINTEL);
pub const glEndPerfQueryINTEL = GLEW_GET_FUN(__glewEndPerfQueryINTEL);
pub const glGetFirstPerfQueryIdINTEL = GLEW_GET_FUN(__glewGetFirstPerfQueryIdINTEL);
pub const glGetNextPerfQueryIdINTEL = GLEW_GET_FUN(__glewGetNextPerfQueryIdINTEL);
pub const glGetPerfCounterInfoINTEL = GLEW_GET_FUN(__glewGetPerfCounterInfoINTEL);
pub const glGetPerfQueryDataINTEL = GLEW_GET_FUN(__glewGetPerfQueryDataINTEL);
pub const glGetPerfQueryIdByNameINTEL = GLEW_GET_FUN(__glewGetPerfQueryIdByNameINTEL);
pub const glGetPerfQueryInfoINTEL = GLEW_GET_FUN(__glewGetPerfQueryInfoINTEL);
pub const GLEW_INTEL_performance_query = GLEW_GET_VAR(__GLEW_INTEL_performance_query);
pub const GL_INTEL_shader_integer_functions2 = @as(c_int, 1);
pub const GLEW_INTEL_shader_integer_functions2 = GLEW_GET_VAR(__GLEW_INTEL_shader_integer_functions2);
pub const GL_INTEL_texture_scissor = @as(c_int, 1);
pub const glTexScissorFuncINTEL = GLEW_GET_FUN(__glewTexScissorFuncINTEL);
pub const glTexScissorINTEL = GLEW_GET_FUN(__glewTexScissorINTEL);
pub const GLEW_INTEL_texture_scissor = GLEW_GET_VAR(__GLEW_INTEL_texture_scissor);
pub const GL_KHR_blend_equation_advanced = @as(c_int, 1);
pub const GL_BLEND_ADVANCED_COHERENT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hexadecimal);
pub const GL_MULTIPLY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_SCREEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_OVERLAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_DARKEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_LIGHTEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_COLORDODGE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLORBURN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_HARDLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_SOFTLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_DIFFERENCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_EXCLUSION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_HSL_HUE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_SATURATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_HSL_COLOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_LUMINOSITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const glBlendBarrierKHR = GLEW_GET_FUN(__glewBlendBarrierKHR);
pub const GLEW_KHR_blend_equation_advanced = GLEW_GET_VAR(__GLEW_KHR_blend_equation_advanced);
pub const GL_KHR_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GLEW_KHR_blend_equation_advanced_coherent = GLEW_GET_VAR(__GLEW_KHR_blend_equation_advanced_coherent);
pub const GL_KHR_context_flush_control = @as(c_int, 1);
pub const GL_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hexadecimal);
pub const GLEW_KHR_context_flush_control = GLEW_GET_VAR(__GLEW_KHR_context_flush_control);
pub const GL_KHR_debug = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_DEBUG_BIT = @as(c_int, 0x00000002);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_SOURCE_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_DEBUG_TYPE_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hexadecimal);
pub const GL_DEBUG_TYPE_PUSH_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hexadecimal);
pub const GL_DEBUG_TYPE_POP_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hexadecimal);
pub const GL_DEBUG_SEVERITY_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hexadecimal);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hexadecimal);
pub const GL_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hexadecimal);
pub const GL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hexadecimal);
pub const GL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hexadecimal);
pub const GL_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hexadecimal);
pub const GL_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hexadecimal);
pub const GL_PROGRAM_PIPELINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hexadecimal);
pub const GL_SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hexadecimal);
pub const GL_DISPLAY_LIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E7, .hexadecimal);
pub const GL_MAX_LABEL_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hexadecimal);
pub const glDebugMessageCallback = GLEW_GET_FUN(__glewDebugMessageCallback);
pub const glDebugMessageControl = GLEW_GET_FUN(__glewDebugMessageControl);
pub const glDebugMessageInsert = GLEW_GET_FUN(__glewDebugMessageInsert);
pub const glGetDebugMessageLog = GLEW_GET_FUN(__glewGetDebugMessageLog);
pub const glGetObjectLabel = GLEW_GET_FUN(__glewGetObjectLabel);
pub const glGetObjectPtrLabel = GLEW_GET_FUN(__glewGetObjectPtrLabel);
pub const glObjectLabel = GLEW_GET_FUN(__glewObjectLabel);
pub const glObjectPtrLabel = GLEW_GET_FUN(__glewObjectPtrLabel);
pub const glPopDebugGroup = GLEW_GET_FUN(__glewPopDebugGroup);
pub const glPushDebugGroup = GLEW_GET_FUN(__glewPushDebugGroup);
pub const GLEW_KHR_debug = GLEW_GET_VAR(__GLEW_KHR_debug);
pub const GL_KHR_no_error = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = @as(c_int, 0x00000008);
pub const GLEW_KHR_no_error = GLEW_GET_VAR(__GLEW_KHR_no_error);
pub const GL_KHR_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hexadecimal);
pub const GL_COMPLETION_STATUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hexadecimal);
pub const glMaxShaderCompilerThreadsKHR = GLEW_GET_FUN(__glewMaxShaderCompilerThreadsKHR);
pub const GLEW_KHR_parallel_shader_compile = GLEW_GET_VAR(__GLEW_KHR_parallel_shader_compile);
pub const GL_KHR_robust_buffer_access_behavior = @as(c_int, 1);
pub const GLEW_KHR_robust_buffer_access_behavior = GLEW_GET_VAR(__GLEW_KHR_robust_buffer_access_behavior);
pub const GL_KHR_robustness = @as(c_int, 1);
pub const GL_CONTEXT_LOST = @as(c_int, 0x0507);
pub const GL_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_CONTEXT_ROBUST_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hexadecimal);
pub const glGetnUniformfv = GLEW_GET_FUN(__glewGetnUniformfv);
pub const glGetnUniformiv = GLEW_GET_FUN(__glewGetnUniformiv);
pub const glGetnUniformuiv = GLEW_GET_FUN(__glewGetnUniformuiv);
pub const glReadnPixels = GLEW_GET_FUN(__glewReadnPixels);
pub const GLEW_KHR_robustness = GLEW_GET_VAR(__GLEW_KHR_robustness);
pub const GL_KHR_shader_subgroup = @as(c_int, 1);
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = @as(c_int, 0x00000001);
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = @as(c_int, 0x00000004);
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = @as(c_int, 0x00000010);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = @as(c_int, 0x00000020);
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = @as(c_int, 0x00000040);
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = @as(c_int, 0x00000080);
pub const GL_SUBGROUP_SIZE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9532, .hexadecimal);
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9533, .hexadecimal);
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9534, .hexadecimal);
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9535, .hexadecimal);
pub const GLEW_KHR_shader_subgroup = GLEW_GET_VAR(__GLEW_KHR_shader_subgroup);
pub const GL_KHR_texture_compression_astc_hdr = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C4, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C5, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C7, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C8, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C9, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E0, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E1, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E2, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E3, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E4, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E5, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E6, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E7, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E8, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E9, .hexadecimal);
pub const GLEW_KHR_texture_compression_astc_hdr = GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_hdr);
pub const GL_KHR_texture_compression_astc_ldr = @as(c_int, 1);
pub const GLEW_KHR_texture_compression_astc_ldr = GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_ldr);
pub const GL_KHR_texture_compression_astc_sliced_3d = @as(c_int, 1);
pub const GLEW_KHR_texture_compression_astc_sliced_3d = GLEW_GET_VAR(__GLEW_KHR_texture_compression_astc_sliced_3d);
pub const GL_KTX_buffer_region = @as(c_int, 1);
pub const GL_KTX_FRONT_REGION = @as(c_int, 0x0);
pub const GL_KTX_BACK_REGION = @as(c_int, 0x1);
pub const GL_KTX_Z_REGION = @as(c_int, 0x2);
pub const GL_KTX_STENCIL_REGION = @as(c_int, 0x3);
pub const glBufferRegionEnabled = GLEW_GET_FUN(__glewBufferRegionEnabled);
pub const glDeleteBufferRegion = GLEW_GET_FUN(__glewDeleteBufferRegion);
pub const glDrawBufferRegion = GLEW_GET_FUN(__glewDrawBufferRegion);
pub const glNewBufferRegion = GLEW_GET_FUN(__glewNewBufferRegion);
pub const glReadBufferRegion = GLEW_GET_FUN(__glewReadBufferRegion);
pub const GLEW_KTX_buffer_region = GLEW_GET_VAR(__GLEW_KTX_buffer_region);
pub const GL_MESAX_texture_stack = @as(c_int, 1);
pub const GL_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8759, .hexadecimal);
pub const GL_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875A, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875B, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875C, .hexadecimal);
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875D, .hexadecimal);
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875E, .hexadecimal);
pub const GLEW_MESAX_texture_stack = GLEW_GET_VAR(__GLEW_MESAX_texture_stack);
pub const GL_MESA_framebuffer_flip_y = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBB, .hexadecimal);
pub const glFramebufferParameteriMESA = GLEW_GET_FUN(__glewFramebufferParameteriMESA);
pub const glGetFramebufferParameterivMESA = GLEW_GET_FUN(__glewGetFramebufferParameterivMESA);
pub const GLEW_MESA_framebuffer_flip_y = GLEW_GET_VAR(__GLEW_MESA_framebuffer_flip_y);
pub const GL_MESA_pack_invert = @as(c_int, 1);
pub const GL_PACK_INVERT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8758, .hexadecimal);
pub const GLEW_MESA_pack_invert = GLEW_GET_VAR(__GLEW_MESA_pack_invert);
pub const GL_MESA_program_binary_formats = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_FORMAT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875F, .hexadecimal);
pub const GLEW_MESA_program_binary_formats = GLEW_GET_VAR(__GLEW_MESA_program_binary_formats);
pub const GL_MESA_resize_buffers = @as(c_int, 1);
pub const glResizeBuffersMESA = GLEW_GET_FUN(__glewResizeBuffersMESA);
pub const GLEW_MESA_resize_buffers = GLEW_GET_VAR(__GLEW_MESA_resize_buffers);
pub const GL_MESA_shader_integer_functions = @as(c_int, 1);
pub const GLEW_MESA_shader_integer_functions = GLEW_GET_VAR(__GLEW_MESA_shader_integer_functions);
pub const GL_MESA_tile_raster_order = @as(c_int, 1);
pub const GLEW_MESA_tile_raster_order = GLEW_GET_VAR(__GLEW_MESA_tile_raster_order);
pub const GL_MESA_window_pos = @as(c_int, 1);
pub const glWindowPos2dMESA = GLEW_GET_FUN(__glewWindowPos2dMESA);
pub const glWindowPos2dvMESA = GLEW_GET_FUN(__glewWindowPos2dvMESA);
pub const glWindowPos2fMESA = GLEW_GET_FUN(__glewWindowPos2fMESA);
pub const glWindowPos2fvMESA = GLEW_GET_FUN(__glewWindowPos2fvMESA);
pub const glWindowPos2iMESA = GLEW_GET_FUN(__glewWindowPos2iMESA);
pub const glWindowPos2ivMESA = GLEW_GET_FUN(__glewWindowPos2ivMESA);
pub const glWindowPos2sMESA = GLEW_GET_FUN(__glewWindowPos2sMESA);
pub const glWindowPos2svMESA = GLEW_GET_FUN(__glewWindowPos2svMESA);
pub const glWindowPos3dMESA = GLEW_GET_FUN(__glewWindowPos3dMESA);
pub const glWindowPos3dvMESA = GLEW_GET_FUN(__glewWindowPos3dvMESA);
pub const glWindowPos3fMESA = GLEW_GET_FUN(__glewWindowPos3fMESA);
pub const glWindowPos3fvMESA = GLEW_GET_FUN(__glewWindowPos3fvMESA);
pub const glWindowPos3iMESA = GLEW_GET_FUN(__glewWindowPos3iMESA);
pub const glWindowPos3ivMESA = GLEW_GET_FUN(__glewWindowPos3ivMESA);
pub const glWindowPos3sMESA = GLEW_GET_FUN(__glewWindowPos3sMESA);
pub const glWindowPos3svMESA = GLEW_GET_FUN(__glewWindowPos3svMESA);
pub const glWindowPos4dMESA = GLEW_GET_FUN(__glewWindowPos4dMESA);
pub const glWindowPos4dvMESA = GLEW_GET_FUN(__glewWindowPos4dvMESA);
pub const glWindowPos4fMESA = GLEW_GET_FUN(__glewWindowPos4fMESA);
pub const glWindowPos4fvMESA = GLEW_GET_FUN(__glewWindowPos4fvMESA);
pub const glWindowPos4iMESA = GLEW_GET_FUN(__glewWindowPos4iMESA);
pub const glWindowPos4ivMESA = GLEW_GET_FUN(__glewWindowPos4ivMESA);
pub const glWindowPos4sMESA = GLEW_GET_FUN(__glewWindowPos4sMESA);
pub const glWindowPos4svMESA = GLEW_GET_FUN(__glewWindowPos4svMESA);
pub const GLEW_MESA_window_pos = GLEW_GET_VAR(__GLEW_MESA_window_pos);
pub const GL_MESA_ycbcr_texture = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_8_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hexadecimal);
pub const GL_YCBCR_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8757, .hexadecimal);
pub const GLEW_MESA_ycbcr_texture = GLEW_GET_VAR(__GLEW_MESA_ycbcr_texture);
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = @as(c_int, 1);
pub const GLEW_NVX_blend_equation_advanced_multi_draw_buffers = GLEW_GET_VAR(__GLEW_NVX_blend_equation_advanced_multi_draw_buffers);
pub const GL_NVX_conditional_render = @as(c_int, 1);
pub const glBeginConditionalRenderNVX = GLEW_GET_FUN(__glewBeginConditionalRenderNVX);
pub const glEndConditionalRenderNVX = GLEW_GET_FUN(__glewEndConditionalRenderNVX);
pub const GLEW_NVX_conditional_render = GLEW_GET_VAR(__GLEW_NVX_conditional_render);
pub const GL_NVX_gpu_memory_info = @as(c_int, 1);
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9047, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9048, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9049, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904A, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904B, .hexadecimal);
pub const GLEW_NVX_gpu_memory_info = GLEW_GET_VAR(__GLEW_NVX_gpu_memory_info);
pub const GL_NVX_gpu_multicast2 = @as(c_int, 1);
pub const GL_UPLOAD_GPU_MASK_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954A, .hexadecimal);
pub const glAsyncCopyBufferSubDataNVX = GLEW_GET_FUN(__glewAsyncCopyBufferSubDataNVX);
pub const glAsyncCopyImageSubDataNVX = GLEW_GET_FUN(__glewAsyncCopyImageSubDataNVX);
pub const glMulticastScissorArrayvNVX = GLEW_GET_FUN(__glewMulticastScissorArrayvNVX);
pub const glMulticastViewportArrayvNVX = GLEW_GET_FUN(__glewMulticastViewportArrayvNVX);
pub const glMulticastViewportPositionWScaleNVX = GLEW_GET_FUN(__glewMulticastViewportPositionWScaleNVX);
pub const glUploadGpuMaskNVX = GLEW_GET_FUN(__glewUploadGpuMaskNVX);
pub const GLEW_NVX_gpu_multicast2 = GLEW_GET_VAR(__GLEW_NVX_gpu_multicast2);
pub const GL_NVX_linked_gpu_multicast = @as(c_int, 1);
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = @as(c_int, 0x0800);
pub const GL_MAX_LGPU_GPUS_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hexadecimal);
pub const glLGPUCopyImageSubDataNVX = GLEW_GET_FUN(__glewLGPUCopyImageSubDataNVX);
pub const glLGPUInterlockNVX = GLEW_GET_FUN(__glewLGPUInterlockNVX);
pub const glLGPUNamedBufferSubDataNVX = GLEW_GET_FUN(__glewLGPUNamedBufferSubDataNVX);
pub const GLEW_NVX_linked_gpu_multicast = GLEW_GET_VAR(__GLEW_NVX_linked_gpu_multicast);
pub const GL_NVX_progress_fence = @as(c_int, 1);
pub const glClientWaitSemaphoreui64NVX = GLEW_GET_FUN(__glewClientWaitSemaphoreui64NVX);
pub const glSignalSemaphoreui64NVX = GLEW_GET_FUN(__glewSignalSemaphoreui64NVX);
pub const glWaitSemaphoreui64NVX = GLEW_GET_FUN(__glewWaitSemaphoreui64NVX);
pub const GLEW_NVX_progress_fence = GLEW_GET_VAR(__GLEW_NVX_progress_fence);
pub const GL_NV_3dvision_settings = @as(c_int, 1);
pub const GL_3DVISION_STEREO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F4, .hexadecimal);
pub const GL_STEREO_SEPARATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F5, .hexadecimal);
pub const GL_STEREO_CONVERGENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F6, .hexadecimal);
pub const GL_STEREO_CUTOFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F7, .hexadecimal);
pub const GL_STEREO_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F8, .hexadecimal);
pub const GL_STEREO_PROJECTION_PERSPECTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F9, .hexadecimal);
pub const GL_STEREO_PROJECTION_ORTHO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FA, .hexadecimal);
pub const glStereoParameterfNV = GLEW_GET_FUN(__glewStereoParameterfNV);
pub const glStereoParameteriNV = GLEW_GET_FUN(__glewStereoParameteriNV);
pub const GLEW_NV_3dvision_settings = GLEW_GET_VAR(__GLEW_NV_3dvision_settings);
pub const GL_NV_EGL_stream_consumer_external = @as(c_int, 1);
pub const GL_TEXTURE_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D65, .hexadecimal);
pub const GL_SAMPLER_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D66, .hexadecimal);
pub const GL_TEXTURE_BINDING_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D67, .hexadecimal);
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D68, .hexadecimal);
pub const GLEW_NV_EGL_stream_consumer_external = GLEW_GET_VAR(__GLEW_NV_EGL_stream_consumer_external);
pub const GL_NV_alpha_to_coverage_dither_control = @as(c_int, 1);
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BF, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934D, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934E, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934F, .hexadecimal);
pub const glAlphaToCoverageDitherControlNV = GLEW_GET_FUN(__glewAlphaToCoverageDitherControlNV);
pub const GLEW_NV_alpha_to_coverage_dither_control = GLEW_GET_VAR(__GLEW_NV_alpha_to_coverage_dither_control);
pub const GL_NV_bgr = @as(c_int, 1);
pub const GL_BGR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GLEW_NV_bgr = GLEW_GET_VAR(__GLEW_NV_bgr);
pub const GL_NV_bindless_multi_draw_indirect = @as(c_int, 1);
pub const glMultiDrawArraysIndirectBindlessNV = GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessNV);
pub const glMultiDrawElementsIndirectBindlessNV = GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessNV);
pub const GLEW_NV_bindless_multi_draw_indirect = GLEW_GET_VAR(__GLEW_NV_bindless_multi_draw_indirect);
pub const GL_NV_bindless_multi_draw_indirect_count = @as(c_int, 1);
pub const glMultiDrawArraysIndirectBindlessCountNV = GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessCountNV);
pub const glMultiDrawElementsIndirectBindlessCountNV = GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessCountNV);
pub const GLEW_NV_bindless_multi_draw_indirect_count = GLEW_GET_VAR(__GLEW_NV_bindless_multi_draw_indirect_count);
pub const GL_NV_bindless_texture = @as(c_int, 1);
pub const glGetImageHandleNV = GLEW_GET_FUN(__glewGetImageHandleNV);
pub const glGetTextureHandleNV = GLEW_GET_FUN(__glewGetTextureHandleNV);
pub const glGetTextureSamplerHandleNV = GLEW_GET_FUN(__glewGetTextureSamplerHandleNV);
pub const glIsImageHandleResidentNV = GLEW_GET_FUN(__glewIsImageHandleResidentNV);
pub const glIsTextureHandleResidentNV = GLEW_GET_FUN(__glewIsTextureHandleResidentNV);
pub const glMakeImageHandleNonResidentNV = GLEW_GET_FUN(__glewMakeImageHandleNonResidentNV);
pub const glMakeImageHandleResidentNV = GLEW_GET_FUN(__glewMakeImageHandleResidentNV);
pub const glMakeTextureHandleNonResidentNV = GLEW_GET_FUN(__glewMakeTextureHandleNonResidentNV);
pub const glMakeTextureHandleResidentNV = GLEW_GET_FUN(__glewMakeTextureHandleResidentNV);
pub const glProgramUniformHandleui64NV = GLEW_GET_FUN(__glewProgramUniformHandleui64NV);
pub const glProgramUniformHandleui64vNV = GLEW_GET_FUN(__glewProgramUniformHandleui64vNV);
pub const glUniformHandleui64NV = GLEW_GET_FUN(__glewUniformHandleui64NV);
pub const glUniformHandleui64vNV = GLEW_GET_FUN(__glewUniformHandleui64vNV);
pub const GLEW_NV_bindless_texture = GLEW_GET_VAR(__GLEW_NV_bindless_texture);
pub const GL_NV_blend_equation_advanced = @as(c_int, 1);
pub const GL_XOR_NV = @as(c_int, 0x1506);
pub const GL_RED_NV = @as(c_int, 0x1903);
pub const GL_GREEN_NV = @as(c_int, 0x1904);
pub const GL_BLUE_NV = @as(c_int, 0x1905);
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9280, .hexadecimal);
pub const GL_BLEND_OVERLAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9281, .hexadecimal);
pub const GL_UNCORRELATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9282, .hexadecimal);
pub const GL_DISJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9283, .hexadecimal);
pub const GL_CONJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9284, .hexadecimal);
pub const GL_BLEND_ADVANCED_COHERENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hexadecimal);
pub const GL_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9286, .hexadecimal);
pub const GL_DST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9287, .hexadecimal);
pub const GL_SRC_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9288, .hexadecimal);
pub const GL_DST_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9289, .hexadecimal);
pub const GL_SRC_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928A, .hexadecimal);
pub const GL_DST_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928B, .hexadecimal);
pub const GL_SRC_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928C, .hexadecimal);
pub const GL_DST_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928D, .hexadecimal);
pub const GL_SRC_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928E, .hexadecimal);
pub const GL_DST_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928F, .hexadecimal);
pub const GL_PLUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9291, .hexadecimal);
pub const GL_PLUS_DARKER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9292, .hexadecimal);
pub const GL_MULTIPLY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_SCREEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_OVERLAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_DARKEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_LIGHTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_COLORDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLORBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_HARDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_SOFTLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_MINUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929F, .hexadecimal);
pub const GL_EXCLUSION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_CONTRAST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A1, .hexadecimal);
pub const GL_INVERT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A3, .hexadecimal);
pub const GL_LINEARDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A4, .hexadecimal);
pub const GL_LINEARBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A5, .hexadecimal);
pub const GL_VIVIDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A6, .hexadecimal);
pub const GL_LINEARLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A7, .hexadecimal);
pub const GL_PINLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A8, .hexadecimal);
pub const GL_HARDMIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A9, .hexadecimal);
pub const GL_HSL_HUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_SATURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_HSL_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_LUMINOSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const GL_PLUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B1, .hexadecimal);
pub const GL_PLUS_CLAMPED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B2, .hexadecimal);
pub const GL_MINUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B3, .hexadecimal);
pub const GL_INVERT_OVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B4, .hexadecimal);
pub const glBlendBarrierNV = GLEW_GET_FUN(__glewBlendBarrierNV);
pub const glBlendParameteriNV = GLEW_GET_FUN(__glewBlendParameteriNV);
pub const GLEW_NV_blend_equation_advanced = GLEW_GET_VAR(__GLEW_NV_blend_equation_advanced);
pub const GL_NV_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GLEW_NV_blend_equation_advanced_coherent = GLEW_GET_VAR(__GLEW_NV_blend_equation_advanced_coherent);
pub const GL_NV_blend_minmax_factor = @as(c_int, 1);
pub const GLEW_NV_blend_minmax_factor = GLEW_GET_VAR(__GLEW_NV_blend_minmax_factor);
pub const GL_NV_blend_square = @as(c_int, 1);
pub const GLEW_NV_blend_square = GLEW_GET_VAR(__GLEW_NV_blend_square);
pub const GL_NV_clip_space_w_scaling = @as(c_int, 1);
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937C, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937D, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937E, .hexadecimal);
pub const glViewportPositionWScaleNV = GLEW_GET_FUN(__glewViewportPositionWScaleNV);
pub const GLEW_NV_clip_space_w_scaling = GLEW_GET_VAR(__GLEW_NV_clip_space_w_scaling);
pub const GL_NV_command_list = @as(c_int, 1);
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = @as(c_int, 0x0000);
pub const GL_NOP_COMMAND_NV = @as(c_int, 0x0001);
pub const GL_DRAW_ELEMENTS_COMMAND_NV = @as(c_int, 0x0002);
pub const GL_DRAW_ARRAYS_COMMAND_NV = @as(c_int, 0x0003);
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = @as(c_int, 0x0004);
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = @as(c_int, 0x0005);
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = @as(c_int, 0x0006);
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = @as(c_int, 0x0007);
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = @as(c_int, 0x0008);
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = @as(c_int, 0x0009);
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = @as(c_int, 0x000a);
pub const GL_BLEND_COLOR_COMMAND_NV = @as(c_int, 0x000b);
pub const GL_STENCIL_REF_COMMAND_NV = @as(c_int, 0x000c);
pub const GL_LINE_WIDTH_COMMAND_NV = @as(c_int, 0x000d);
pub const GL_POLYGON_OFFSET_COMMAND_NV = @as(c_int, 0x000e);
pub const GL_ALPHA_REF_COMMAND_NV = @as(c_int, 0x000f);
pub const GL_VIEWPORT_COMMAND_NV = @as(c_int, 0x0010);
pub const GL_SCISSOR_COMMAND_NV = @as(c_int, 0x0011);
pub const GL_FRONT_FACE_COMMAND_NV = @as(c_int, 0x0012);
pub const glCallCommandListNV = GLEW_GET_FUN(__glewCallCommandListNV);
pub const glCommandListSegmentsNV = GLEW_GET_FUN(__glewCommandListSegmentsNV);
pub const glCompileCommandListNV = GLEW_GET_FUN(__glewCompileCommandListNV);
pub const glCreateCommandListsNV = GLEW_GET_FUN(__glewCreateCommandListsNV);
pub const glCreateStatesNV = GLEW_GET_FUN(__glewCreateStatesNV);
pub const glDeleteCommandListsNV = GLEW_GET_FUN(__glewDeleteCommandListsNV);
pub const glDeleteStatesNV = GLEW_GET_FUN(__glewDeleteStatesNV);
pub const glDrawCommandsAddressNV = GLEW_GET_FUN(__glewDrawCommandsAddressNV);
pub const glDrawCommandsNV = GLEW_GET_FUN(__glewDrawCommandsNV);
pub const glDrawCommandsStatesAddressNV = GLEW_GET_FUN(__glewDrawCommandsStatesAddressNV);
pub const glDrawCommandsStatesNV = GLEW_GET_FUN(__glewDrawCommandsStatesNV);
pub const glGetCommandHeaderNV = GLEW_GET_FUN(__glewGetCommandHeaderNV);
pub const glGetStageIndexNV = GLEW_GET_FUN(__glewGetStageIndexNV);
pub const glIsCommandListNV = GLEW_GET_FUN(__glewIsCommandListNV);
pub const glIsStateNV = GLEW_GET_FUN(__glewIsStateNV);
pub const glListDrawCommandsStatesClientNV = GLEW_GET_FUN(__glewListDrawCommandsStatesClientNV);
pub const glStateCaptureNV = GLEW_GET_FUN(__glewStateCaptureNV);
pub const GLEW_NV_command_list = GLEW_GET_VAR(__GLEW_NV_command_list);
pub const GL_NV_compute_program5 = @as(c_int, 1);
pub const GL_COMPUTE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FB, .hexadecimal);
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FC, .hexadecimal);
pub const GLEW_NV_compute_program5 = GLEW_GET_VAR(__GLEW_NV_compute_program5);
pub const GL_NV_compute_shader_derivatives = @as(c_int, 1);
pub const GLEW_NV_compute_shader_derivatives = GLEW_GET_VAR(__GLEW_NV_compute_shader_derivatives);
pub const GL_NV_conditional_render = @as(c_int, 1);
pub const GL_QUERY_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const GL_QUERY_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const glBeginConditionalRenderNV = GLEW_GET_FUN(__glewBeginConditionalRenderNV);
pub const glEndConditionalRenderNV = GLEW_GET_FUN(__glewEndConditionalRenderNV);
pub const GLEW_NV_conditional_render = GLEW_GET_VAR(__GLEW_NV_conditional_render);
pub const GL_NV_conservative_raster = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9346, .hexadecimal);
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9347, .hexadecimal);
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9348, .hexadecimal);
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9349, .hexadecimal);
pub const glSubpixelPrecisionBiasNV = GLEW_GET_FUN(__glewSubpixelPrecisionBiasNV);
pub const GLEW_NV_conservative_raster = GLEW_GET_VAR(__GLEW_NV_conservative_raster);
pub const GL_NV_conservative_raster_dilate = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9379, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937A, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937B, .hexadecimal);
pub const glConservativeRasterParameterfNV = GLEW_GET_FUN(__glewConservativeRasterParameterfNV);
pub const GLEW_NV_conservative_raster_dilate = GLEW_GET_VAR(__GLEW_NV_conservative_raster_dilate);
pub const GL_NV_conservative_raster_pre_snap = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9550, .hexadecimal);
pub const GLEW_NV_conservative_raster_pre_snap = GLEW_GET_VAR(__GLEW_NV_conservative_raster_pre_snap);
pub const GL_NV_conservative_raster_pre_snap_triangles = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954D, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954E, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954F, .hexadecimal);
pub const glConservativeRasterParameteriNV = GLEW_GET_FUN(__glewConservativeRasterParameteriNV);
pub const GLEW_NV_conservative_raster_pre_snap_triangles = GLEW_GET_VAR(__GLEW_NV_conservative_raster_pre_snap_triangles);
pub const GL_NV_conservative_raster_underestimation = @as(c_int, 1);
pub const GLEW_NV_conservative_raster_underestimation = GLEW_GET_VAR(__GLEW_NV_conservative_raster_underestimation);
pub const GL_NV_copy_buffer = @as(c_int, 1);
pub const GL_COPY_READ_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const glCopyBufferSubDataNV = GLEW_GET_FUN(__glewCopyBufferSubDataNV);
pub const GLEW_NV_copy_buffer = GLEW_GET_VAR(__GLEW_NV_copy_buffer);
pub const GL_NV_copy_depth_to_color = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886E, .hexadecimal);
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886F, .hexadecimal);
pub const GLEW_NV_copy_depth_to_color = GLEW_GET_VAR(__GLEW_NV_copy_depth_to_color);
pub const GL_NV_copy_image = @as(c_int, 1);
pub const glCopyImageSubDataNV = GLEW_GET_FUN(__glewCopyImageSubDataNV);
pub const GLEW_NV_copy_image = GLEW_GET_VAR(__GLEW_NV_copy_image);
pub const GL_NV_deep_texture3D = @as(c_int, 1);
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D0, .hexadecimal);
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D1, .hexadecimal);
pub const GLEW_NV_deep_texture3D = GLEW_GET_VAR(__GLEW_NV_deep_texture3D);
pub const GL_NV_depth_buffer_float = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAB, .hexadecimal);
pub const GL_DEPTH32F_STENCIL8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAC, .hexadecimal);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAF, .hexadecimal);
pub const glClearDepthdNV = GLEW_GET_FUN(__glewClearDepthdNV);
pub const glDepthBoundsdNV = GLEW_GET_FUN(__glewDepthBoundsdNV);
pub const glDepthRangedNV = GLEW_GET_FUN(__glewDepthRangedNV);
pub const GLEW_NV_depth_buffer_float = GLEW_GET_VAR(__GLEW_NV_depth_buffer_float);
pub const GL_NV_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GLEW_NV_depth_clamp = GLEW_GET_VAR(__GLEW_NV_depth_clamp);
pub const GL_NV_depth_nonlinear = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2C, .hexadecimal);
pub const GLEW_NV_depth_nonlinear = GLEW_GET_VAR(__GLEW_NV_depth_nonlinear);
pub const GL_NV_depth_range_unclamped = @as(c_int, 1);
pub const GL_SAMPLE_COUNT_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_SAMPLE_COUNT_QUERY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_QUERY_RESULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_SAMPLE_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const GLEW_NV_depth_range_unclamped = GLEW_GET_VAR(__GLEW_NV_depth_range_unclamped);
pub const GL_NV_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const glDrawBuffersNV = GLEW_GET_FUN(__glewDrawBuffersNV);
pub const GLEW_NV_draw_buffers = GLEW_GET_VAR(__GLEW_NV_draw_buffers);
pub const GL_NV_draw_instanced = @as(c_int, 1);
pub const glDrawArraysInstancedNV = GLEW_GET_FUN(__glewDrawArraysInstancedNV);
pub const glDrawElementsInstancedNV = GLEW_GET_FUN(__glewDrawElementsInstancedNV);
pub const GLEW_NV_draw_instanced = GLEW_GET_VAR(__GLEW_NV_draw_instanced);
pub const GL_NV_draw_texture = @as(c_int, 1);
pub const glDrawTextureNV = GLEW_GET_FUN(__glewDrawTextureNV);
pub const GLEW_NV_draw_texture = GLEW_GET_VAR(__GLEW_NV_draw_texture);
pub const GL_NV_draw_vulkan_image = @as(c_int, 1);
pub const glDrawVkImageNV = GLEW_GET_FUN(__glewDrawVkImageNV);
pub const glGetVkProcAddrNV = GLEW_GET_FUN(__glewGetVkProcAddrNV);
pub const glSignalVkFenceNV = GLEW_GET_FUN(__glewSignalVkFenceNV);
pub const glSignalVkSemaphoreNV = GLEW_GET_FUN(__glewSignalVkSemaphoreNV);
pub const glWaitVkSemaphoreNV = GLEW_GET_FUN(__glewWaitVkSemaphoreNV);
pub const GLEW_NV_draw_vulkan_image = GLEW_GET_VAR(__GLEW_NV_draw_vulkan_image);
pub const GL_NV_evaluators = @as(c_int, 1);
pub const GL_EVAL_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C0, .hexadecimal);
pub const GL_EVAL_TRIANGULAR_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C1, .hexadecimal);
pub const GL_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C2, .hexadecimal);
pub const GL_MAP_ATTRIB_U_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C3, .hexadecimal);
pub const GL_MAP_ATTRIB_V_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C4, .hexadecimal);
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C5, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C6, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C7, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C8, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C9, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CA, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CB, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CC, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CD, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CE, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CF, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D0, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D1, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D2, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D3, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D4, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D5, .hexadecimal);
pub const GL_MAX_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D6, .hexadecimal);
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D7, .hexadecimal);
pub const glEvalMapsNV = GLEW_GET_FUN(__glewEvalMapsNV);
pub const glGetMapAttribParameterfvNV = GLEW_GET_FUN(__glewGetMapAttribParameterfvNV);
pub const glGetMapAttribParameterivNV = GLEW_GET_FUN(__glewGetMapAttribParameterivNV);
pub const glGetMapControlPointsNV = GLEW_GET_FUN(__glewGetMapControlPointsNV);
pub const glGetMapParameterfvNV = GLEW_GET_FUN(__glewGetMapParameterfvNV);
pub const glGetMapParameterivNV = GLEW_GET_FUN(__glewGetMapParameterivNV);
pub const glMapControlPointsNV = GLEW_GET_FUN(__glewMapControlPointsNV);
pub const glMapParameterfvNV = GLEW_GET_FUN(__glewMapParameterfvNV);
pub const glMapParameterivNV = GLEW_GET_FUN(__glewMapParameterivNV);
pub const GLEW_NV_evaluators = GLEW_GET_VAR(__GLEW_NV_evaluators);
pub const GL_NV_explicit_attrib_location = @as(c_int, 1);
pub const GLEW_NV_explicit_attrib_location = GLEW_GET_VAR(__GLEW_NV_explicit_attrib_location);
pub const GL_NV_explicit_multisample = @as(c_int, 1);
pub const GL_SAMPLE_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E53, .hexadecimal);
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E54, .hexadecimal);
pub const GL_TEXTURE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E55, .hexadecimal);
pub const GL_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E56, .hexadecimal);
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E57, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E58, .hexadecimal);
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const glGetMultisamplefvNV = GLEW_GET_FUN(__glewGetMultisamplefvNV);
pub const glSampleMaskIndexedNV = GLEW_GET_FUN(__glewSampleMaskIndexedNV);
pub const glTexRenderbufferNV = GLEW_GET_FUN(__glewTexRenderbufferNV);
pub const GLEW_NV_explicit_multisample = GLEW_GET_VAR(__GLEW_NV_explicit_multisample);
pub const GL_NV_fbo_color_attachments = @as(c_int, 1);
pub const GL_MAX_COLOR_ATTACHMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GLEW_NV_fbo_color_attachments = GLEW_GET_VAR(__GLEW_NV_fbo_color_attachments);
pub const GL_NV_fence = @as(c_int, 1);
pub const GL_ALL_COMPLETED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F2, .hexadecimal);
pub const GL_FENCE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F3, .hexadecimal);
pub const GL_FENCE_CONDITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F4, .hexadecimal);
pub const glDeleteFencesNV = GLEW_GET_FUN(__glewDeleteFencesNV);
pub const glFinishFenceNV = GLEW_GET_FUN(__glewFinishFenceNV);
pub const glGenFencesNV = GLEW_GET_FUN(__glewGenFencesNV);
pub const glGetFenceivNV = GLEW_GET_FUN(__glewGetFenceivNV);
pub const glIsFenceNV = GLEW_GET_FUN(__glewIsFenceNV);
pub const glSetFenceNV = GLEW_GET_FUN(__glewSetFenceNV);
pub const glTestFenceNV = GLEW_GET_FUN(__glewTestFenceNV);
pub const GLEW_NV_fence = GLEW_GET_VAR(__GLEW_NV_fence);
pub const GL_NV_fill_rectangle = @as(c_int, 1);
pub const GL_FILL_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933C, .hexadecimal);
pub const GLEW_NV_fill_rectangle = GLEW_GET_VAR(__GLEW_NV_fill_rectangle);
pub const GL_NV_float_buffer = @as(c_int, 1);
pub const GL_FLOAT_R_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8880, .hexadecimal);
pub const GL_FLOAT_RG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8881, .hexadecimal);
pub const GL_FLOAT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8882, .hexadecimal);
pub const GL_FLOAT_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8883, .hexadecimal);
pub const GL_FLOAT_R16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8884, .hexadecimal);
pub const GL_FLOAT_R32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8885, .hexadecimal);
pub const GL_FLOAT_RG16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8886, .hexadecimal);
pub const GL_FLOAT_RG32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8887, .hexadecimal);
pub const GL_FLOAT_RGB16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8888, .hexadecimal);
pub const GL_FLOAT_RGB32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8889, .hexadecimal);
pub const GL_FLOAT_RGBA16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888A, .hexadecimal);
pub const GL_FLOAT_RGBA32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888B, .hexadecimal);
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888C, .hexadecimal);
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888D, .hexadecimal);
pub const GL_FLOAT_RGBA_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888E, .hexadecimal);
pub const GLEW_NV_float_buffer = GLEW_GET_VAR(__GLEW_NV_float_buffer);
pub const GL_NV_fog_distance = @as(c_int, 1);
pub const GL_FOG_DISTANCE_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855A, .hexadecimal);
pub const GL_EYE_RADIAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855B, .hexadecimal);
pub const GL_EYE_PLANE_ABSOLUTE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855C, .hexadecimal);
pub const GLEW_NV_fog_distance = GLEW_GET_VAR(__GLEW_NV_fog_distance);
pub const GL_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DD, .hexadecimal);
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DE, .hexadecimal);
pub const glFragmentCoverageColorNV = GLEW_GET_FUN(__glewFragmentCoverageColorNV);
pub const GLEW_NV_fragment_coverage_to_color = GLEW_GET_VAR(__GLEW_NV_fragment_coverage_to_color);
pub const GL_NV_fragment_program = @as(c_int, 1);
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8868, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8870, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8873, .hexadecimal);
pub const GL_PROGRAM_ERROR_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hexadecimal);
pub const glGetProgramNamedParameterdvNV = GLEW_GET_FUN(__glewGetProgramNamedParameterdvNV);
pub const glGetProgramNamedParameterfvNV = GLEW_GET_FUN(__glewGetProgramNamedParameterfvNV);
pub const glProgramNamedParameter4dNV = GLEW_GET_FUN(__glewProgramNamedParameter4dNV);
pub const glProgramNamedParameter4dvNV = GLEW_GET_FUN(__glewProgramNamedParameter4dvNV);
pub const glProgramNamedParameter4fNV = GLEW_GET_FUN(__glewProgramNamedParameter4fNV);
pub const glProgramNamedParameter4fvNV = GLEW_GET_FUN(__glewProgramNamedParameter4fvNV);
pub const GLEW_NV_fragment_program = GLEW_GET_VAR(__GLEW_NV_fragment_program);
pub const GL_NV_fragment_program2 = @as(c_int, 1);
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F4, .hexadecimal);
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F5, .hexadecimal);
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F6, .hexadecimal);
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F7, .hexadecimal);
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F8, .hexadecimal);
pub const GLEW_NV_fragment_program2 = GLEW_GET_VAR(__GLEW_NV_fragment_program2);
pub const GL_NV_fragment_program4 = @as(c_int, 1);
pub const GLEW_NV_fragment_program4 = GLEW_GET_VAR(__GLEW_NV_fragment_program4);
pub const GL_NV_fragment_program_option = @as(c_int, 1);
pub const GLEW_NV_fragment_program_option = GLEW_GET_VAR(__GLEW_NV_fragment_program_option);
pub const GL_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const GLEW_NV_fragment_shader_barycentric = GLEW_GET_VAR(__GLEW_NV_fragment_shader_barycentric);
pub const GL_NV_fragment_shader_interlock = @as(c_int, 1);
pub const GLEW_NV_fragment_shader_interlock = GLEW_GET_VAR(__GLEW_NV_fragment_shader_interlock);
pub const GL_NV_framebuffer_blit = @as(c_int, 1);
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const glBlitFramebufferNV = GLEW_GET_FUN(__glewBlitFramebufferNV);
pub const GLEW_NV_framebuffer_blit = GLEW_GET_VAR(__GLEW_NV_framebuffer_blit);
pub const GL_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const GLEW_NV_framebuffer_mixed_samples = GLEW_GET_VAR(__GLEW_NV_framebuffer_mixed_samples);
pub const GL_NV_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_MAX_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const glRenderbufferStorageMultisampleNV = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleNV);
pub const GLEW_NV_framebuffer_multisample = GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample);
pub const GL_NV_framebuffer_multisample_coverage = @as(c_int, 1);
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E10, .hexadecimal);
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E11, .hexadecimal);
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E12, .hexadecimal);
pub const glRenderbufferStorageMultisampleCoverageNV = GLEW_GET_FUN(__glewRenderbufferStorageMultisampleCoverageNV);
pub const GLEW_NV_framebuffer_multisample_coverage = GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample_coverage);
pub const GL_NV_generate_mipmap_sRGB = @as(c_int, 1);
pub const GLEW_NV_generate_mipmap_sRGB = GLEW_GET_VAR(__GLEW_NV_generate_mipmap_sRGB);
pub const GL_NV_geometry_program4 = @as(c_int, 1);
pub const GL_GEOMETRY_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C26, .hexadecimal);
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C27, .hexadecimal);
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C28, .hexadecimal);
pub const glProgramVertexLimitNV = GLEW_GET_FUN(__glewProgramVertexLimitNV);
pub const GLEW_NV_geometry_program4 = GLEW_GET_VAR(__GLEW_NV_geometry_program4);
pub const GL_NV_geometry_shader4 = @as(c_int, 1);
pub const GLEW_NV_geometry_shader4 = GLEW_GET_VAR(__GLEW_NV_geometry_shader4);
pub const GL_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const GLEW_NV_geometry_shader_passthrough = GLEW_GET_VAR(__GLEW_NV_geometry_shader_passthrough);
pub const GL_NV_gpu_multicast = @as(c_int, 1);
pub const GL_PER_GPU_STORAGE_BIT_NV = @as(c_int, 0x0800);
pub const GL_MULTICAST_GPUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hexadecimal);
pub const GL_PER_GPU_STORAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9548, .hexadecimal);
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9549, .hexadecimal);
pub const GL_RENDER_GPU_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9558, .hexadecimal);
pub const glMulticastBarrierNV = GLEW_GET_FUN(__glewMulticastBarrierNV);
pub const glMulticastBlitFramebufferNV = GLEW_GET_FUN(__glewMulticastBlitFramebufferNV);
pub const glMulticastBufferSubDataNV = GLEW_GET_FUN(__glewMulticastBufferSubDataNV);
pub const glMulticastCopyBufferSubDataNV = GLEW_GET_FUN(__glewMulticastCopyBufferSubDataNV);
pub const glMulticastCopyImageSubDataNV = GLEW_GET_FUN(__glewMulticastCopyImageSubDataNV);
pub const glMulticastFramebufferSampleLocationsfvNV = GLEW_GET_FUN(__glewMulticastFramebufferSampleLocationsfvNV);
pub const glMulticastGetQueryObjecti64vNV = GLEW_GET_FUN(__glewMulticastGetQueryObjecti64vNV);
pub const glMulticastGetQueryObjectivNV = GLEW_GET_FUN(__glewMulticastGetQueryObjectivNV);
pub const glMulticastGetQueryObjectui64vNV = GLEW_GET_FUN(__glewMulticastGetQueryObjectui64vNV);
pub const glMulticastGetQueryObjectuivNV = GLEW_GET_FUN(__glewMulticastGetQueryObjectuivNV);
pub const glMulticastWaitSyncNV = GLEW_GET_FUN(__glewMulticastWaitSyncNV);
pub const glRenderGpuMaskNV = GLEW_GET_FUN(__glewRenderGpuMaskNV);
pub const GLEW_NV_gpu_multicast = GLEW_GET_VAR(__GLEW_NV_gpu_multicast);
pub const GL_NV_gpu_program4 = @as(c_int, 1);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8906, .hexadecimal);
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8907, .hexadecimal);
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8908, .hexadecimal);
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8909, .hexadecimal);
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA5, .hexadecimal);
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA6, .hexadecimal);
pub const glProgramEnvParameterI4iNV = GLEW_GET_FUN(__glewProgramEnvParameterI4iNV);
pub const glProgramEnvParameterI4ivNV = GLEW_GET_FUN(__glewProgramEnvParameterI4ivNV);
pub const glProgramEnvParameterI4uiNV = GLEW_GET_FUN(__glewProgramEnvParameterI4uiNV);
pub const glProgramEnvParameterI4uivNV = GLEW_GET_FUN(__glewProgramEnvParameterI4uivNV);
pub const glProgramEnvParametersI4ivNV = GLEW_GET_FUN(__glewProgramEnvParametersI4ivNV);
pub const glProgramEnvParametersI4uivNV = GLEW_GET_FUN(__glewProgramEnvParametersI4uivNV);
pub const glProgramLocalParameterI4iNV = GLEW_GET_FUN(__glewProgramLocalParameterI4iNV);
pub const glProgramLocalParameterI4ivNV = GLEW_GET_FUN(__glewProgramLocalParameterI4ivNV);
pub const glProgramLocalParameterI4uiNV = GLEW_GET_FUN(__glewProgramLocalParameterI4uiNV);
pub const glProgramLocalParameterI4uivNV = GLEW_GET_FUN(__glewProgramLocalParameterI4uivNV);
pub const glProgramLocalParametersI4ivNV = GLEW_GET_FUN(__glewProgramLocalParametersI4ivNV);
pub const glProgramLocalParametersI4uivNV = GLEW_GET_FUN(__glewProgramLocalParametersI4uivNV);
pub const GLEW_NV_gpu_program4 = GLEW_GET_VAR(__GLEW_NV_gpu_program4);
pub const GL_NV_gpu_program5 = @as(c_int, 1);
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GLEW_NV_gpu_program5 = GLEW_GET_VAR(__GLEW_NV_gpu_program5);
pub const GL_NV_gpu_program5_mem_extended = @as(c_int, 1);
pub const GLEW_NV_gpu_program5_mem_extended = GLEW_GET_VAR(__GLEW_NV_gpu_program5_mem_extended);
pub const GL_NV_gpu_program_fp64 = @as(c_int, 1);
pub const GLEW_NV_gpu_program_fp64 = GLEW_GET_VAR(__GLEW_NV_gpu_program_fp64);
pub const GL_NV_gpu_shader5 = @as(c_int, 1);
pub const GL_INT64_NV = @as(c_int, 0x140E);
pub const GL_UNSIGNED_INT64_NV = @as(c_int, 0x140F);
pub const GL_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE0, .hexadecimal);
pub const GL_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE1, .hexadecimal);
pub const GL_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE2, .hexadecimal);
pub const GL_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE3, .hexadecimal);
pub const GL_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE4, .hexadecimal);
pub const GL_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE5, .hexadecimal);
pub const GL_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE6, .hexadecimal);
pub const GL_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE7, .hexadecimal);
pub const GL_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hexadecimal);
pub const GL_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hexadecimal);
pub const GL_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hexadecimal);
pub const GL_UNSIGNED_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEC, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FED, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEE, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEF, .hexadecimal);
pub const GL_UNSIGNED_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF0, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF1, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF2, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF3, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hexadecimal);
pub const glGetUniformi64vNV = GLEW_GET_FUN(__glewGetUniformi64vNV);
pub const glGetUniformui64vNV = GLEW_GET_FUN(__glewGetUniformui64vNV);
pub const glProgramUniform1i64NV = GLEW_GET_FUN(__glewProgramUniform1i64NV);
pub const glProgramUniform1i64vNV = GLEW_GET_FUN(__glewProgramUniform1i64vNV);
pub const glProgramUniform1ui64NV = GLEW_GET_FUN(__glewProgramUniform1ui64NV);
pub const glProgramUniform1ui64vNV = GLEW_GET_FUN(__glewProgramUniform1ui64vNV);
pub const glProgramUniform2i64NV = GLEW_GET_FUN(__glewProgramUniform2i64NV);
pub const glProgramUniform2i64vNV = GLEW_GET_FUN(__glewProgramUniform2i64vNV);
pub const glProgramUniform2ui64NV = GLEW_GET_FUN(__glewProgramUniform2ui64NV);
pub const glProgramUniform2ui64vNV = GLEW_GET_FUN(__glewProgramUniform2ui64vNV);
pub const glProgramUniform3i64NV = GLEW_GET_FUN(__glewProgramUniform3i64NV);
pub const glProgramUniform3i64vNV = GLEW_GET_FUN(__glewProgramUniform3i64vNV);
pub const glProgramUniform3ui64NV = GLEW_GET_FUN(__glewProgramUniform3ui64NV);
pub const glProgramUniform3ui64vNV = GLEW_GET_FUN(__glewProgramUniform3ui64vNV);
pub const glProgramUniform4i64NV = GLEW_GET_FUN(__glewProgramUniform4i64NV);
pub const glProgramUniform4i64vNV = GLEW_GET_FUN(__glewProgramUniform4i64vNV);
pub const glProgramUniform4ui64NV = GLEW_GET_FUN(__glewProgramUniform4ui64NV);
pub const glProgramUniform4ui64vNV = GLEW_GET_FUN(__glewProgramUniform4ui64vNV);
pub const glUniform1i64NV = GLEW_GET_FUN(__glewUniform1i64NV);
pub const glUniform1i64vNV = GLEW_GET_FUN(__glewUniform1i64vNV);
pub const glUniform1ui64NV = GLEW_GET_FUN(__glewUniform1ui64NV);
pub const glUniform1ui64vNV = GLEW_GET_FUN(__glewUniform1ui64vNV);
pub const glUniform2i64NV = GLEW_GET_FUN(__glewUniform2i64NV);
pub const glUniform2i64vNV = GLEW_GET_FUN(__glewUniform2i64vNV);
pub const glUniform2ui64NV = GLEW_GET_FUN(__glewUniform2ui64NV);
pub const glUniform2ui64vNV = GLEW_GET_FUN(__glewUniform2ui64vNV);
pub const glUniform3i64NV = GLEW_GET_FUN(__glewUniform3i64NV);
pub const glUniform3i64vNV = GLEW_GET_FUN(__glewUniform3i64vNV);
pub const glUniform3ui64NV = GLEW_GET_FUN(__glewUniform3ui64NV);
pub const glUniform3ui64vNV = GLEW_GET_FUN(__glewUniform3ui64vNV);
pub const glUniform4i64NV = GLEW_GET_FUN(__glewUniform4i64NV);
pub const glUniform4i64vNV = GLEW_GET_FUN(__glewUniform4i64vNV);
pub const glUniform4ui64NV = GLEW_GET_FUN(__glewUniform4ui64NV);
pub const glUniform4ui64vNV = GLEW_GET_FUN(__glewUniform4ui64vNV);
pub const GLEW_NV_gpu_shader5 = GLEW_GET_VAR(__GLEW_NV_gpu_shader5);
pub const GL_NV_half_float = @as(c_int, 1);
pub const GL_HALF_FLOAT_NV = @as(c_int, 0x140B);
pub const glColor3hNV = GLEW_GET_FUN(__glewColor3hNV);
pub const glColor3hvNV = GLEW_GET_FUN(__glewColor3hvNV);
pub const glColor4hNV = GLEW_GET_FUN(__glewColor4hNV);
pub const glColor4hvNV = GLEW_GET_FUN(__glewColor4hvNV);
pub const glFogCoordhNV = GLEW_GET_FUN(__glewFogCoordhNV);
pub const glFogCoordhvNV = GLEW_GET_FUN(__glewFogCoordhvNV);
pub const glMultiTexCoord1hNV = GLEW_GET_FUN(__glewMultiTexCoord1hNV);
pub const glMultiTexCoord1hvNV = GLEW_GET_FUN(__glewMultiTexCoord1hvNV);
pub const glMultiTexCoord2hNV = GLEW_GET_FUN(__glewMultiTexCoord2hNV);
pub const glMultiTexCoord2hvNV = GLEW_GET_FUN(__glewMultiTexCoord2hvNV);
pub const glMultiTexCoord3hNV = GLEW_GET_FUN(__glewMultiTexCoord3hNV);
pub const glMultiTexCoord3hvNV = GLEW_GET_FUN(__glewMultiTexCoord3hvNV);
pub const glMultiTexCoord4hNV = GLEW_GET_FUN(__glewMultiTexCoord4hNV);
pub const glMultiTexCoord4hvNV = GLEW_GET_FUN(__glewMultiTexCoord4hvNV);
pub const glNormal3hNV = GLEW_GET_FUN(__glewNormal3hNV);
pub const glNormal3hvNV = GLEW_GET_FUN(__glewNormal3hvNV);
pub const glSecondaryColor3hNV = GLEW_GET_FUN(__glewSecondaryColor3hNV);
pub const glSecondaryColor3hvNV = GLEW_GET_FUN(__glewSecondaryColor3hvNV);
pub const glTexCoord1hNV = GLEW_GET_FUN(__glewTexCoord1hNV);
pub const glTexCoord1hvNV = GLEW_GET_FUN(__glewTexCoord1hvNV);
pub const glTexCoord2hNV = GLEW_GET_FUN(__glewTexCoord2hNV);
pub const glTexCoord2hvNV = GLEW_GET_FUN(__glewTexCoord2hvNV);
pub const glTexCoord3hNV = GLEW_GET_FUN(__glewTexCoord3hNV);
pub const glTexCoord3hvNV = GLEW_GET_FUN(__glewTexCoord3hvNV);
pub const glTexCoord4hNV = GLEW_GET_FUN(__glewTexCoord4hNV);
pub const glTexCoord4hvNV = GLEW_GET_FUN(__glewTexCoord4hvNV);
pub const glVertex2hNV = GLEW_GET_FUN(__glewVertex2hNV);
pub const glVertex2hvNV = GLEW_GET_FUN(__glewVertex2hvNV);
pub const glVertex3hNV = GLEW_GET_FUN(__glewVertex3hNV);
pub const glVertex3hvNV = GLEW_GET_FUN(__glewVertex3hvNV);
pub const glVertex4hNV = GLEW_GET_FUN(__glewVertex4hNV);
pub const glVertex4hvNV = GLEW_GET_FUN(__glewVertex4hvNV);
pub const glVertexAttrib1hNV = GLEW_GET_FUN(__glewVertexAttrib1hNV);
pub const glVertexAttrib1hvNV = GLEW_GET_FUN(__glewVertexAttrib1hvNV);
pub const glVertexAttrib2hNV = GLEW_GET_FUN(__glewVertexAttrib2hNV);
pub const glVertexAttrib2hvNV = GLEW_GET_FUN(__glewVertexAttrib2hvNV);
pub const glVertexAttrib3hNV = GLEW_GET_FUN(__glewVertexAttrib3hNV);
pub const glVertexAttrib3hvNV = GLEW_GET_FUN(__glewVertexAttrib3hvNV);
pub const glVertexAttrib4hNV = GLEW_GET_FUN(__glewVertexAttrib4hNV);
pub const glVertexAttrib4hvNV = GLEW_GET_FUN(__glewVertexAttrib4hvNV);
pub const glVertexAttribs1hvNV = GLEW_GET_FUN(__glewVertexAttribs1hvNV);
pub const glVertexAttribs2hvNV = GLEW_GET_FUN(__glewVertexAttribs2hvNV);
pub const glVertexAttribs3hvNV = GLEW_GET_FUN(__glewVertexAttribs3hvNV);
pub const glVertexAttribs4hvNV = GLEW_GET_FUN(__glewVertexAttribs4hvNV);
pub const glVertexWeighthNV = GLEW_GET_FUN(__glewVertexWeighthNV);
pub const glVertexWeighthvNV = GLEW_GET_FUN(__glewVertexWeighthvNV);
pub const GLEW_NV_half_float = GLEW_GET_VAR(__GLEW_NV_half_float);
pub const GL_NV_image_formats = @as(c_int, 1);
pub const GLEW_NV_image_formats = GLEW_GET_VAR(__GLEW_NV_image_formats);
pub const GL_NV_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const glVertexAttribDivisorNV = GLEW_GET_FUN(__glewVertexAttribDivisorNV);
pub const GLEW_NV_instanced_arrays = GLEW_GET_VAR(__GLEW_NV_instanced_arrays);
pub const GL_NV_internalformat_sample_query = @as(c_int, 1);
pub const GL_MULTISAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9371, .hexadecimal);
pub const GL_SUPERSAMPLE_SCALE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9372, .hexadecimal);
pub const GL_SUPERSAMPLE_SCALE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9373, .hexadecimal);
pub const GL_CONFORMANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9374, .hexadecimal);
pub const glGetInternalformatSampleivNV = GLEW_GET_FUN(__glewGetInternalformatSampleivNV);
pub const GLEW_NV_internalformat_sample_query = GLEW_GET_VAR(__GLEW_NV_internalformat_sample_query);
pub const GL_NV_light_max_exponent = @as(c_int, 1);
pub const GL_MAX_SHININESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8504, .hexadecimal);
pub const GL_MAX_SPOT_EXPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8505, .hexadecimal);
pub const GLEW_NV_light_max_exponent = GLEW_GET_VAR(__GLEW_NV_light_max_exponent);
pub const GL_NV_memory_attachment = @as(c_int, 1);
pub const GL_ATTACHED_MEMORY_OBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A4, .hexadecimal);
pub const GL_ATTACHED_MEMORY_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A5, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A6, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A7, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A8, .hexadecimal);
pub const GL_DETACHED_MEMORY_INCARNATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A9, .hexadecimal);
pub const GL_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AA, .hexadecimal);
pub const GL_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AB, .hexadecimal);
pub const GL_MAX_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AC, .hexadecimal);
pub const GL_MAX_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AD, .hexadecimal);
pub const glBufferAttachMemoryNV = GLEW_GET_FUN(__glewBufferAttachMemoryNV);
pub const glGetMemoryObjectDetachedResourcesuivNV = GLEW_GET_FUN(__glewGetMemoryObjectDetachedResourcesuivNV);
pub const glNamedBufferAttachMemoryNV = GLEW_GET_FUN(__glewNamedBufferAttachMemoryNV);
pub const glResetMemoryObjectParameterNV = GLEW_GET_FUN(__glewResetMemoryObjectParameterNV);
pub const glTexAttachMemoryNV = GLEW_GET_FUN(__glewTexAttachMemoryNV);
pub const glTextureAttachMemoryNV = GLEW_GET_FUN(__glewTextureAttachMemoryNV);
pub const GLEW_NV_memory_attachment = GLEW_GET_VAR(__GLEW_NV_memory_attachment);
pub const GL_NV_mesh_shader = @as(c_int, 1);
pub const GL_MESH_SHADER_BIT_NV = @as(c_int, 0x00000040);
pub const GL_TASK_SHADER_BIT_NV = @as(c_int, 0x00000080);
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E60, .hexadecimal);
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E61, .hexadecimal);
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E62, .hexadecimal);
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E63, .hexadecimal);
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E64, .hexadecimal);
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E65, .hexadecimal);
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E66, .hexadecimal);
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E67, .hexadecimal);
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E68, .hexadecimal);
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E69, .hexadecimal);
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6A, .hexadecimal);
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6B, .hexadecimal);
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6C, .hexadecimal);
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6D, .hexadecimal);
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6E, .hexadecimal);
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6F, .hexadecimal);
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DF, .hexadecimal);
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9536, .hexadecimal);
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9537, .hexadecimal);
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9538, .hexadecimal);
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9539, .hexadecimal);
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953A, .hexadecimal);
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953B, .hexadecimal);
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953C, .hexadecimal);
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953D, .hexadecimal);
pub const GL_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953E, .hexadecimal);
pub const GL_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953F, .hexadecimal);
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9543, .hexadecimal);
pub const GL_MAX_MESH_VIEWS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9557, .hexadecimal);
pub const GL_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9559, .hexadecimal);
pub const GL_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955A, .hexadecimal);
pub const GL_MESH_VERTICES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9579, .hexadecimal);
pub const GL_MESH_PRIMITIVES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957A, .hexadecimal);
pub const GL_MESH_OUTPUT_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957B, .hexadecimal);
pub const GL_MESH_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957C, .hexadecimal);
pub const GL_TASK_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957D, .hexadecimal);
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957E, .hexadecimal);
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957F, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959C, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959D, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959E, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959F, .hexadecimal);
pub const GL_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A0, .hexadecimal);
pub const GL_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A1, .hexadecimal);
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A2, .hexadecimal);
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A3, .hexadecimal);
pub const glDrawMeshTasksIndirectNV = GLEW_GET_FUN(__glewDrawMeshTasksIndirectNV);
pub const glDrawMeshTasksNV = GLEW_GET_FUN(__glewDrawMeshTasksNV);
pub const glMultiDrawMeshTasksIndirectCountNV = GLEW_GET_FUN(__glewMultiDrawMeshTasksIndirectCountNV);
pub const glMultiDrawMeshTasksIndirectNV = GLEW_GET_FUN(__glewMultiDrawMeshTasksIndirectNV);
pub const GLEW_NV_mesh_shader = GLEW_GET_VAR(__GLEW_NV_mesh_shader);
pub const GL_NV_multisample_coverage = @as(c_int, 1);
pub const GLEW_NV_multisample_coverage = GLEW_GET_VAR(__GLEW_NV_multisample_coverage);
pub const GL_NV_multisample_filter_hint = @as(c_int, 1);
pub const GL_MULTISAMPLE_FILTER_HINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8534, .hexadecimal);
pub const GLEW_NV_multisample_filter_hint = GLEW_GET_VAR(__GLEW_NV_multisample_filter_hint);
pub const GL_NV_non_square_matrices = @as(c_int, 1);
pub const GL_FLOAT_MAT2x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const GL_FLOAT_MAT2x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const GL_FLOAT_MAT3x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const GL_FLOAT_MAT3x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const GL_FLOAT_MAT4x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const GL_FLOAT_MAT4x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const glUniformMatrix2x3fvNV = GLEW_GET_FUN(__glewUniformMatrix2x3fvNV);
pub const glUniformMatrix2x4fvNV = GLEW_GET_FUN(__glewUniformMatrix2x4fvNV);
pub const glUniformMatrix3x2fvNV = GLEW_GET_FUN(__glewUniformMatrix3x2fvNV);
pub const glUniformMatrix3x4fvNV = GLEW_GET_FUN(__glewUniformMatrix3x4fvNV);
pub const glUniformMatrix4x2fvNV = GLEW_GET_FUN(__glewUniformMatrix4x2fvNV);
pub const glUniformMatrix4x3fvNV = GLEW_GET_FUN(__glewUniformMatrix4x3fvNV);
pub const GLEW_NV_non_square_matrices = GLEW_GET_VAR(__GLEW_NV_non_square_matrices);
pub const GL_NV_occlusion_query = @as(c_int, 1);
pub const GL_PIXEL_COUNTER_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_PIXEL_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_PIXEL_COUNT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const glBeginOcclusionQueryNV = GLEW_GET_FUN(__glewBeginOcclusionQueryNV);
pub const glDeleteOcclusionQueriesNV = GLEW_GET_FUN(__glewDeleteOcclusionQueriesNV);
pub const glEndOcclusionQueryNV = GLEW_GET_FUN(__glewEndOcclusionQueryNV);
pub const glGenOcclusionQueriesNV = GLEW_GET_FUN(__glewGenOcclusionQueriesNV);
pub const glGetOcclusionQueryivNV = GLEW_GET_FUN(__glewGetOcclusionQueryivNV);
pub const glGetOcclusionQueryuivNV = GLEW_GET_FUN(__glewGetOcclusionQueryuivNV);
pub const glIsOcclusionQueryNV = GLEW_GET_FUN(__glewIsOcclusionQueryNV);
pub const GLEW_NV_occlusion_query = GLEW_GET_VAR(__GLEW_NV_occlusion_query);
pub const GL_NV_pack_subimage = @as(c_int, 1);
pub const GL_PACK_ROW_LENGTH_NV = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_ROWS_NV = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_PIXELS_NV = @as(c_int, 0x0D04);
pub const GLEW_NV_pack_subimage = GLEW_GET_VAR(__GLEW_NV_pack_subimage);
pub const GL_NV_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GLEW_NV_packed_depth_stencil = GLEW_GET_VAR(__GLEW_NV_packed_depth_stencil);
pub const GL_NV_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GLEW_NV_packed_float = GLEW_GET_VAR(__GLEW_NV_packed_float);
pub const GL_NV_packed_float_linear = @as(c_int, 1);
pub const GLEW_NV_packed_float_linear = GLEW_GET_VAR(__GLEW_NV_packed_float_linear);
pub const GL_NV_parameter_buffer_object = @as(c_int, 1);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA0, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA1, .hexadecimal);
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA2, .hexadecimal);
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA3, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA4, .hexadecimal);
pub const glProgramBufferParametersIivNV = GLEW_GET_FUN(__glewProgramBufferParametersIivNV);
pub const glProgramBufferParametersIuivNV = GLEW_GET_FUN(__glewProgramBufferParametersIuivNV);
pub const glProgramBufferParametersfvNV = GLEW_GET_FUN(__glewProgramBufferParametersfvNV);
pub const GLEW_NV_parameter_buffer_object = GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object);
pub const GL_NV_parameter_buffer_object2 = @as(c_int, 1);
pub const GLEW_NV_parameter_buffer_object2 = GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object2);
pub const GL_NV_path_rendering = @as(c_int, 1);
pub const GL_CLOSE_PATH_NV = @as(c_int, 0x00);
pub const GL_BOLD_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_WIDTH_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_HEIGHT_BIT_NV = @as(c_int, 0x02);
pub const GL_ITALIC_BIT_NV = @as(c_int, 0x02);
pub const GL_MOVE_TO_NV = @as(c_int, 0x02);
pub const GL_RELATIVE_MOVE_TO_NV = @as(c_int, 0x03);
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = @as(c_int, 0x04);
pub const GL_LINE_TO_NV = @as(c_int, 0x04);
pub const GL_RELATIVE_LINE_TO_NV = @as(c_int, 0x05);
pub const GL_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x06);
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x07);
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = @as(c_int, 0x08);
pub const GL_VERTICAL_LINE_TO_NV = @as(c_int, 0x08);
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = @as(c_int, 0x09);
pub const GL_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0A);
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0B);
pub const GL_CUBIC_CURVE_TO_NV = @as(c_int, 0x0C);
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = @as(c_int, 0x0D);
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0E);
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0F);
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x10);
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x10);
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x11);
pub const GL_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x12);
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x13);
pub const GL_SMALL_CW_ARC_TO_NV = @as(c_int, 0x14);
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = @as(c_int, 0x15);
pub const GL_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x16);
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x17);
pub const GL_LARGE_CW_ARC_TO_NV = @as(c_int, 0x18);
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = @as(c_int, 0x19);
pub const GL_CONIC_CURVE_TO_NV = @as(c_int, 0x1A);
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = @as(c_int, 0x1B);
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = @as(c_int, 0x20);
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = @as(c_int, 0x40);
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x80);
pub const GL_ROUNDED_RECT_NV = @as(c_int, 0xE8);
pub const GL_RELATIVE_ROUNDED_RECT_NV = @as(c_int, 0xE9);
pub const GL_ROUNDED_RECT2_NV = @as(c_int, 0xEA);
pub const GL_RELATIVE_ROUNDED_RECT2_NV = @as(c_int, 0xEB);
pub const GL_ROUNDED_RECT4_NV = @as(c_int, 0xEC);
pub const GL_RELATIVE_ROUNDED_RECT4_NV = @as(c_int, 0xED);
pub const GL_ROUNDED_RECT8_NV = @as(c_int, 0xEE);
pub const GL_RELATIVE_ROUNDED_RECT8_NV = @as(c_int, 0xEF);
pub const GL_RESTART_PATH_NV = @as(c_int, 0xF0);
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF2);
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF4);
pub const GL_RECT_NV = @as(c_int, 0xF6);
pub const GL_RELATIVE_RECT_NV = @as(c_int, 0xF7);
pub const GL_CIRCULAR_CCW_ARC_TO_NV = @as(c_int, 0xF8);
pub const GL_CIRCULAR_CW_ARC_TO_NV = @as(c_int, 0xFA);
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = @as(c_int, 0xFC);
pub const GL_ARC_TO_NV = @as(c_int, 0xFE);
pub const GL_RELATIVE_ARC_TO_NV = @as(c_int, 0xFF);
pub const GL_GLYPH_HAS_KERNING_BIT_NV = @as(c_int, 0x100);
pub const GL_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852C, .hexadecimal);
pub const GL_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852D, .hexadecimal);
pub const GL_PATH_FORMAT_SVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9070, .hexadecimal);
pub const GL_PATH_FORMAT_PS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9071, .hexadecimal);
pub const GL_STANDARD_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9072, .hexadecimal);
pub const GL_SYSTEM_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9073, .hexadecimal);
pub const GL_FILE_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9074, .hexadecimal);
pub const GL_PATH_STROKE_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9075, .hexadecimal);
pub const GL_PATH_END_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9076, .hexadecimal);
pub const GL_PATH_INITIAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9077, .hexadecimal);
pub const GL_PATH_TERMINAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9078, .hexadecimal);
pub const GL_PATH_JOIN_STYLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9079, .hexadecimal);
pub const GL_PATH_MITER_LIMIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907A, .hexadecimal);
pub const GL_PATH_DASH_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907B, .hexadecimal);
pub const GL_PATH_INITIAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907C, .hexadecimal);
pub const GL_PATH_TERMINAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907D, .hexadecimal);
pub const GL_PATH_DASH_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907E, .hexadecimal);
pub const GL_PATH_CLIENT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907F, .hexadecimal);
pub const GL_PATH_FILL_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9080, .hexadecimal);
pub const GL_PATH_FILL_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9081, .hexadecimal);
pub const GL_PATH_FILL_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9082, .hexadecimal);
pub const GL_PATH_STROKE_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9083, .hexadecimal);
pub const GL_PATH_STROKE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9084, .hexadecimal);
pub const GL_PATH_STROKE_BOUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9086, .hexadecimal);
pub const GL_COUNT_UP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9088, .hexadecimal);
pub const GL_COUNT_DOWN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9089, .hexadecimal);
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908A, .hexadecimal);
pub const GL_CONVEX_HULL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908B, .hexadecimal);
pub const GL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908D, .hexadecimal);
pub const GL_TRANSLATE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908E, .hexadecimal);
pub const GL_TRANSLATE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908F, .hexadecimal);
pub const GL_TRANSLATE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9090, .hexadecimal);
pub const GL_TRANSLATE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9091, .hexadecimal);
pub const GL_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9092, .hexadecimal);
pub const GL_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9094, .hexadecimal);
pub const GL_TRANSPOSE_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9096, .hexadecimal);
pub const GL_TRANSPOSE_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9098, .hexadecimal);
pub const GL_UTF8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909A, .hexadecimal);
pub const GL_UTF16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909B, .hexadecimal);
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909C, .hexadecimal);
pub const GL_PATH_COMMAND_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909D, .hexadecimal);
pub const GL_PATH_COORD_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909E, .hexadecimal);
pub const GL_PATH_DASH_ARRAY_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909F, .hexadecimal);
pub const GL_PATH_COMPUTED_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A0, .hexadecimal);
pub const GL_PATH_FILL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A1, .hexadecimal);
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A2, .hexadecimal);
pub const GL_SQUARE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A3, .hexadecimal);
pub const GL_ROUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A4, .hexadecimal);
pub const GL_TRIANGULAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A5, .hexadecimal);
pub const GL_BEVEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A6, .hexadecimal);
pub const GL_MITER_REVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A7, .hexadecimal);
pub const GL_MITER_TRUNCATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A8, .hexadecimal);
pub const GL_SKIP_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A9, .hexadecimal);
pub const GL_USE_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AA, .hexadecimal);
pub const GL_PATH_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AB, .hexadecimal);
pub const GL_PATH_FOG_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AC, .hexadecimal);
pub const GL_ACCUM_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AD, .hexadecimal);
pub const GL_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AE, .hexadecimal);
pub const GL_FIRST_TO_REST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AF, .hexadecimal);
pub const GL_PATH_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B0, .hexadecimal);
pub const GL_PATH_GEN_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B1, .hexadecimal);
pub const GL_PATH_GEN_COLOR_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B2, .hexadecimal);
pub const GL_PATH_GEN_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B3, .hexadecimal);
pub const GL_PATH_DASH_OFFSET_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B4, .hexadecimal);
pub const GL_MOVE_TO_RESETS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B5, .hexadecimal);
pub const GL_MOVE_TO_CONTINUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B6, .hexadecimal);
pub const GL_PATH_STENCIL_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B7, .hexadecimal);
pub const GL_PATH_STENCIL_REF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B8, .hexadecimal);
pub const GL_PATH_STENCIL_VALUE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B9, .hexadecimal);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BD, .hexadecimal);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BE, .hexadecimal);
pub const GL_PATH_COVER_DEPTH_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BF, .hexadecimal);
pub const GL_FONT_GLYPHS_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9368, .hexadecimal);
pub const GL_FONT_TARGET_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9369, .hexadecimal);
pub const GL_FONT_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936A, .hexadecimal);
pub const GL_FONT_UNINTELLIGIBLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936B, .hexadecimal);
pub const GL_STANDARD_FONT_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936C, .hexadecimal);
pub const GL_FRAGMENT_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936D, .hexadecimal);
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_FONT_UNITS_PER_EM_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_FONT_ASCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_FONT_DESCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_FONT_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_FONT_HAS_KERNING_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const glCopyPathNV = GLEW_GET_FUN(__glewCopyPathNV);
pub const glCoverFillPathInstancedNV = GLEW_GET_FUN(__glewCoverFillPathInstancedNV);
pub const glCoverFillPathNV = GLEW_GET_FUN(__glewCoverFillPathNV);
pub const glCoverStrokePathInstancedNV = GLEW_GET_FUN(__glewCoverStrokePathInstancedNV);
pub const glCoverStrokePathNV = GLEW_GET_FUN(__glewCoverStrokePathNV);
pub const glDeletePathsNV = GLEW_GET_FUN(__glewDeletePathsNV);
pub const glGenPathsNV = GLEW_GET_FUN(__glewGenPathsNV);
pub const glGetPathColorGenfvNV = GLEW_GET_FUN(__glewGetPathColorGenfvNV);
pub const glGetPathColorGenivNV = GLEW_GET_FUN(__glewGetPathColorGenivNV);
pub const glGetPathCommandsNV = GLEW_GET_FUN(__glewGetPathCommandsNV);
pub const glGetPathCoordsNV = GLEW_GET_FUN(__glewGetPathCoordsNV);
pub const glGetPathDashArrayNV = GLEW_GET_FUN(__glewGetPathDashArrayNV);
pub const glGetPathLengthNV = GLEW_GET_FUN(__glewGetPathLengthNV);
pub const glGetPathMetricRangeNV = GLEW_GET_FUN(__glewGetPathMetricRangeNV);
pub const glGetPathMetricsNV = GLEW_GET_FUN(__glewGetPathMetricsNV);
pub const glGetPathParameterfvNV = GLEW_GET_FUN(__glewGetPathParameterfvNV);
pub const glGetPathParameterivNV = GLEW_GET_FUN(__glewGetPathParameterivNV);
pub const glGetPathSpacingNV = GLEW_GET_FUN(__glewGetPathSpacingNV);
pub const glGetPathTexGenfvNV = GLEW_GET_FUN(__glewGetPathTexGenfvNV);
pub const glGetPathTexGenivNV = GLEW_GET_FUN(__glewGetPathTexGenivNV);
pub const glGetProgramResourcefvNV = GLEW_GET_FUN(__glewGetProgramResourcefvNV);
pub const glInterpolatePathsNV = GLEW_GET_FUN(__glewInterpolatePathsNV);
pub const glIsPathNV = GLEW_GET_FUN(__glewIsPathNV);
pub const glIsPointInFillPathNV = GLEW_GET_FUN(__glewIsPointInFillPathNV);
pub const glIsPointInStrokePathNV = GLEW_GET_FUN(__glewIsPointInStrokePathNV);
pub const glMatrixLoad3x2fNV = GLEW_GET_FUN(__glewMatrixLoad3x2fNV);
pub const glMatrixLoad3x3fNV = GLEW_GET_FUN(__glewMatrixLoad3x3fNV);
pub const glMatrixLoadTranspose3x3fNV = GLEW_GET_FUN(__glewMatrixLoadTranspose3x3fNV);
pub const glMatrixMult3x2fNV = GLEW_GET_FUN(__glewMatrixMult3x2fNV);
pub const glMatrixMult3x3fNV = GLEW_GET_FUN(__glewMatrixMult3x3fNV);
pub const glMatrixMultTranspose3x3fNV = GLEW_GET_FUN(__glewMatrixMultTranspose3x3fNV);
pub const glPathColorGenNV = GLEW_GET_FUN(__glewPathColorGenNV);
pub const glPathCommandsNV = GLEW_GET_FUN(__glewPathCommandsNV);
pub const glPathCoordsNV = GLEW_GET_FUN(__glewPathCoordsNV);
pub const glPathCoverDepthFuncNV = GLEW_GET_FUN(__glewPathCoverDepthFuncNV);
pub const glPathDashArrayNV = GLEW_GET_FUN(__glewPathDashArrayNV);
pub const glPathFogGenNV = GLEW_GET_FUN(__glewPathFogGenNV);
pub const glPathGlyphIndexArrayNV = GLEW_GET_FUN(__glewPathGlyphIndexArrayNV);
pub const glPathGlyphIndexRangeNV = GLEW_GET_FUN(__glewPathGlyphIndexRangeNV);
pub const glPathGlyphRangeNV = GLEW_GET_FUN(__glewPathGlyphRangeNV);
pub const glPathGlyphsNV = GLEW_GET_FUN(__glewPathGlyphsNV);
pub const glPathMemoryGlyphIndexArrayNV = GLEW_GET_FUN(__glewPathMemoryGlyphIndexArrayNV);
pub const glPathParameterfNV = GLEW_GET_FUN(__glewPathParameterfNV);
pub const glPathParameterfvNV = GLEW_GET_FUN(__glewPathParameterfvNV);
pub const glPathParameteriNV = GLEW_GET_FUN(__glewPathParameteriNV);
pub const glPathParameterivNV = GLEW_GET_FUN(__glewPathParameterivNV);
pub const glPathStencilDepthOffsetNV = GLEW_GET_FUN(__glewPathStencilDepthOffsetNV);
pub const glPathStencilFuncNV = GLEW_GET_FUN(__glewPathStencilFuncNV);
pub const glPathStringNV = GLEW_GET_FUN(__glewPathStringNV);
pub const glPathSubCommandsNV = GLEW_GET_FUN(__glewPathSubCommandsNV);
pub const glPathSubCoordsNV = GLEW_GET_FUN(__glewPathSubCoordsNV);
pub const glPathTexGenNV = GLEW_GET_FUN(__glewPathTexGenNV);
pub const glPointAlongPathNV = GLEW_GET_FUN(__glewPointAlongPathNV);
pub const glProgramPathFragmentInputGenNV = GLEW_GET_FUN(__glewProgramPathFragmentInputGenNV);
pub const glStencilFillPathInstancedNV = GLEW_GET_FUN(__glewStencilFillPathInstancedNV);
pub const glStencilFillPathNV = GLEW_GET_FUN(__glewStencilFillPathNV);
pub const glStencilStrokePathInstancedNV = GLEW_GET_FUN(__glewStencilStrokePathInstancedNV);
pub const glStencilStrokePathNV = GLEW_GET_FUN(__glewStencilStrokePathNV);
pub const glStencilThenCoverFillPathInstancedNV = GLEW_GET_FUN(__glewStencilThenCoverFillPathInstancedNV);
pub const glStencilThenCoverFillPathNV = GLEW_GET_FUN(__glewStencilThenCoverFillPathNV);
pub const glStencilThenCoverStrokePathInstancedNV = GLEW_GET_FUN(__glewStencilThenCoverStrokePathInstancedNV);
pub const glStencilThenCoverStrokePathNV = GLEW_GET_FUN(__glewStencilThenCoverStrokePathNV);
pub const glTransformPathNV = GLEW_GET_FUN(__glewTransformPathNV);
pub const glWeightPathsNV = GLEW_GET_FUN(__glewWeightPathsNV);
pub const GLEW_NV_path_rendering = GLEW_GET_VAR(__GLEW_NV_path_rendering);
pub const GL_NV_path_rendering_shared_edge = @as(c_int, 1);
pub const GL_SHARED_EDGE_NV = @as(c_int, 0xC0);
pub const GLEW_NV_path_rendering_shared_edge = GLEW_GET_VAR(__GLEW_NV_path_rendering_shared_edge);
pub const GL_NV_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GLEW_NV_pixel_buffer_object = GLEW_GET_VAR(__GLEW_NV_pixel_buffer_object);
pub const GL_NV_pixel_data_range = @as(c_int, 1);
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8878, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8879, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887A, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887B, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887C, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887D, .hexadecimal);
pub const glFlushPixelDataRangeNV = GLEW_GET_FUN(__glewFlushPixelDataRangeNV);
pub const glPixelDataRangeNV = GLEW_GET_FUN(__glewPixelDataRangeNV);
pub const GLEW_NV_pixel_data_range = GLEW_GET_VAR(__GLEW_NV_pixel_data_range);
pub const GL_NV_platform_binary = @as(c_int, 1);
pub const GL_NVIDIA_PLATFORM_BINARY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x890B, .hexadecimal);
pub const GLEW_NV_platform_binary = GLEW_GET_VAR(__GLEW_NV_platform_binary);
pub const GL_NV_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_COORD_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_POINT_SPRITE_R_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8863, .hexadecimal);
pub const glPointParameteriNV = GLEW_GET_FUN(__glewPointParameteriNV);
pub const glPointParameterivNV = GLEW_GET_FUN(__glewPointParameterivNV);
pub const GLEW_NV_point_sprite = GLEW_GET_VAR(__GLEW_NV_point_sprite);
pub const GL_NV_polygon_mode = @as(c_int, 1);
pub const GL_POLYGON_MODE_NV = @as(c_int, 0x0B40);
pub const GL_POINT_NV = @as(c_int, 0x1B00);
pub const GL_LINE_NV = @as(c_int, 0x1B01);
pub const GL_FILL_NV = @as(c_int, 0x1B02);
pub const GL_POLYGON_OFFSET_POINT_NV = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE_NV = @as(c_int, 0x2A02);
pub const glPolygonModeNV = GLEW_GET_FUN(__glewPolygonModeNV);
pub const GLEW_NV_polygon_mode = GLEW_GET_VAR(__GLEW_NV_polygon_mode);
pub const GL_NV_present_video = @as(c_int, 1);
pub const GL_FRAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E26, .hexadecimal);
pub const GL_FIELDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E27, .hexadecimal);
pub const GL_CURRENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_NUM_FILL_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E29, .hexadecimal);
pub const GL_PRESENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2A, .hexadecimal);
pub const GL_PRESENT_DURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2B, .hexadecimal);
pub const glGetVideoi64vNV = GLEW_GET_FUN(__glewGetVideoi64vNV);
pub const glGetVideoivNV = GLEW_GET_FUN(__glewGetVideoivNV);
pub const glGetVideoui64vNV = GLEW_GET_FUN(__glewGetVideoui64vNV);
pub const glGetVideouivNV = GLEW_GET_FUN(__glewGetVideouivNV);
pub const glPresentFrameDualFillNV = GLEW_GET_FUN(__glewPresentFrameDualFillNV);
pub const glPresentFrameKeyedNV = GLEW_GET_FUN(__glewPresentFrameKeyedNV);
pub const GLEW_NV_present_video = GLEW_GET_VAR(__GLEW_NV_present_video);
pub const GL_NV_primitive_restart = @as(c_int, 1);
pub const GL_PRIMITIVE_RESTART_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8558, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_INDEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8559, .hexadecimal);
pub const glPrimitiveRestartIndexNV = GLEW_GET_FUN(__glewPrimitiveRestartIndexNV);
pub const glPrimitiveRestartNV = GLEW_GET_FUN(__glewPrimitiveRestartNV);
pub const GLEW_NV_primitive_restart = GLEW_GET_VAR(__GLEW_NV_primitive_restart);
pub const GL_NV_query_resource_tag = @as(c_int, 1);
pub const GLEW_NV_query_resource_tag = GLEW_GET_VAR(__GLEW_NV_query_resource_tag);
pub const GL_NV_read_buffer = @as(c_int, 1);
pub const GL_READ_BUFFER_NV = @as(c_int, 0x0C02);
pub const glReadBufferNV = GLEW_GET_FUN(__glewReadBufferNV);
pub const GLEW_NV_read_buffer = GLEW_GET_VAR(__GLEW_NV_read_buffer);
pub const GL_NV_read_buffer_front = @as(c_int, 1);
pub const GLEW_NV_read_buffer_front = GLEW_GET_VAR(__GLEW_NV_read_buffer_front);
pub const GL_NV_read_depth = @as(c_int, 1);
pub const GLEW_NV_read_depth = GLEW_GET_VAR(__GLEW_NV_read_depth);
pub const GL_NV_read_depth_stencil = @as(c_int, 1);
pub const GLEW_NV_read_depth_stencil = GLEW_GET_VAR(__GLEW_NV_read_depth_stencil);
pub const GL_NV_read_stencil = @as(c_int, 1);
pub const GLEW_NV_read_stencil = GLEW_GET_VAR(__GLEW_NV_read_stencil);
pub const GL_NV_register_combiners = @as(c_int, 1);
pub const GL_REGISTER_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8522, .hexadecimal);
pub const GL_VARIABLE_A_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8523, .hexadecimal);
pub const GL_VARIABLE_B_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8524, .hexadecimal);
pub const GL_VARIABLE_C_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8525, .hexadecimal);
pub const GL_VARIABLE_D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8526, .hexadecimal);
pub const GL_VARIABLE_E_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8527, .hexadecimal);
pub const GL_VARIABLE_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8528, .hexadecimal);
pub const GL_VARIABLE_G_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8529, .hexadecimal);
pub const GL_CONSTANT_COLOR0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852A, .hexadecimal);
pub const GL_CONSTANT_COLOR1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852B, .hexadecimal);
pub const GL_SPARE0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852E, .hexadecimal);
pub const GL_SPARE1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852F, .hexadecimal);
pub const GL_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8530, .hexadecimal);
pub const GL_E_TIMES_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8531, .hexadecimal);
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8532, .hexadecimal);
pub const GL_UNSIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8536, .hexadecimal);
pub const GL_UNSIGNED_INVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8537, .hexadecimal);
pub const GL_EXPAND_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8538, .hexadecimal);
pub const GL_EXPAND_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8539, .hexadecimal);
pub const GL_HALF_BIAS_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853A, .hexadecimal);
pub const GL_HALF_BIAS_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853B, .hexadecimal);
pub const GL_SIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853C, .hexadecimal);
pub const GL_SIGNED_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853D, .hexadecimal);
pub const GL_SCALE_BY_TWO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853E, .hexadecimal);
pub const GL_SCALE_BY_FOUR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853F, .hexadecimal);
pub const GL_SCALE_BY_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8540, .hexadecimal);
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8541, .hexadecimal);
pub const GL_COMBINER_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8542, .hexadecimal);
pub const GL_COMBINER_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8543, .hexadecimal);
pub const GL_COMBINER_COMPONENT_USAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8544, .hexadecimal);
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8545, .hexadecimal);
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8546, .hexadecimal);
pub const GL_COMBINER_MUX_SUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8547, .hexadecimal);
pub const GL_COMBINER_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8548, .hexadecimal);
pub const GL_COMBINER_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8549, .hexadecimal);
pub const GL_COMBINER_AB_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854A, .hexadecimal);
pub const GL_COMBINER_CD_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854B, .hexadecimal);
pub const GL_COMBINER_SUM_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854C, .hexadecimal);
pub const GL_MAX_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854D, .hexadecimal);
pub const GL_NUM_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854E, .hexadecimal);
pub const GL_COLOR_SUM_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854F, .hexadecimal);
pub const GL_COMBINER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8550, .hexadecimal);
pub const GL_COMBINER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8551, .hexadecimal);
pub const GL_COMBINER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8552, .hexadecimal);
pub const GL_COMBINER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8553, .hexadecimal);
pub const GL_COMBINER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8554, .hexadecimal);
pub const GL_COMBINER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8555, .hexadecimal);
pub const GL_COMBINER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8556, .hexadecimal);
pub const GL_COMBINER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8557, .hexadecimal);
pub const glCombinerInputNV = GLEW_GET_FUN(__glewCombinerInputNV);
pub const glCombinerOutputNV = GLEW_GET_FUN(__glewCombinerOutputNV);
pub const glCombinerParameterfNV = GLEW_GET_FUN(__glewCombinerParameterfNV);
pub const glCombinerParameterfvNV = GLEW_GET_FUN(__glewCombinerParameterfvNV);
pub const glCombinerParameteriNV = GLEW_GET_FUN(__glewCombinerParameteriNV);
pub const glCombinerParameterivNV = GLEW_GET_FUN(__glewCombinerParameterivNV);
pub const glFinalCombinerInputNV = GLEW_GET_FUN(__glewFinalCombinerInputNV);
pub const glGetCombinerInputParameterfvNV = GLEW_GET_FUN(__glewGetCombinerInputParameterfvNV);
pub const glGetCombinerInputParameterivNV = GLEW_GET_FUN(__glewGetCombinerInputParameterivNV);
pub const glGetCombinerOutputParameterfvNV = GLEW_GET_FUN(__glewGetCombinerOutputParameterfvNV);
pub const glGetCombinerOutputParameterivNV = GLEW_GET_FUN(__glewGetCombinerOutputParameterivNV);
pub const glGetFinalCombinerInputParameterfvNV = GLEW_GET_FUN(__glewGetFinalCombinerInputParameterfvNV);
pub const glGetFinalCombinerInputParameterivNV = GLEW_GET_FUN(__glewGetFinalCombinerInputParameterivNV);
pub const GLEW_NV_register_combiners = GLEW_GET_VAR(__GLEW_NV_register_combiners);
pub const GL_NV_register_combiners2 = @as(c_int, 1);
pub const GL_PER_STAGE_CONSTANTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8535, .hexadecimal);
pub const glCombinerStageParameterfvNV = GLEW_GET_FUN(__glewCombinerStageParameterfvNV);
pub const glGetCombinerStageParameterfvNV = GLEW_GET_FUN(__glewGetCombinerStageParameterfvNV);
pub const GLEW_NV_register_combiners2 = GLEW_GET_VAR(__GLEW_NV_register_combiners2);
pub const GL_NV_representative_fragment_test = @as(c_int, 1);
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937F, .hexadecimal);
pub const GLEW_NV_representative_fragment_test = GLEW_GET_VAR(__GLEW_NV_representative_fragment_test);
pub const GL_NV_robustness_video_memory_purge = @as(c_int, 1);
pub const GL_PURGED_CONTEXT_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BB, .hexadecimal);
pub const GLEW_NV_robustness_video_memory_purge = GLEW_GET_VAR(__GLEW_NV_robustness_video_memory_purge);
pub const GL_NV_sRGB_formats = @as(c_int, 1);
pub const GL_ETC1_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EE, .hexadecimal);
pub const GL_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hexadecimal);
pub const GLEW_NV_sRGB_formats = GLEW_GET_VAR(__GLEW_NV_sRGB_formats);
pub const GL_NV_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hexadecimal);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hexadecimal);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hexadecimal);
pub const glFramebufferSampleLocationsfvNV = GLEW_GET_FUN(__glewFramebufferSampleLocationsfvNV);
pub const glNamedFramebufferSampleLocationsfvNV = GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvNV);
pub const glResolveDepthValuesNV = GLEW_GET_FUN(__glewResolveDepthValuesNV);
pub const GLEW_NV_sample_locations = GLEW_GET_VAR(__GLEW_NV_sample_locations);
pub const GL_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const GLEW_NV_sample_mask_override_coverage = GLEW_GET_VAR(__GLEW_NV_sample_mask_override_coverage);
pub const GL_NV_scissor_exclusive = @as(c_int, 1);
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9555, .hexadecimal);
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9556, .hexadecimal);
pub const glScissorExclusiveArrayvNV = GLEW_GET_FUN(__glewScissorExclusiveArrayvNV);
pub const glScissorExclusiveNV = GLEW_GET_FUN(__glewScissorExclusiveNV);
pub const GLEW_NV_scissor_exclusive = GLEW_GET_VAR(__GLEW_NV_scissor_exclusive);
pub const GL_NV_shader_atomic_counters = @as(c_int, 1);
pub const GLEW_NV_shader_atomic_counters = GLEW_GET_VAR(__GLEW_NV_shader_atomic_counters);
pub const GL_NV_shader_atomic_float = @as(c_int, 1);
pub const GLEW_NV_shader_atomic_float = GLEW_GET_VAR(__GLEW_NV_shader_atomic_float);
pub const GL_NV_shader_atomic_float64 = @as(c_int, 1);
pub const GLEW_NV_shader_atomic_float64 = GLEW_GET_VAR(__GLEW_NV_shader_atomic_float64);
pub const GL_NV_shader_atomic_fp16_vector = @as(c_int, 1);
pub const GLEW_NV_shader_atomic_fp16_vector = GLEW_GET_VAR(__GLEW_NV_shader_atomic_fp16_vector);
pub const GL_NV_shader_atomic_int64 = @as(c_int, 1);
pub const GLEW_NV_shader_atomic_int64 = GLEW_GET_VAR(__GLEW_NV_shader_atomic_int64);
pub const GL_NV_shader_buffer_load = @as(c_int, 1);
pub const GL_BUFFER_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1D, .hexadecimal);
pub const GL_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F34, .hexadecimal);
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F35, .hexadecimal);
pub const glGetBufferParameterui64vNV = GLEW_GET_FUN(__glewGetBufferParameterui64vNV);
pub const glGetIntegerui64vNV = GLEW_GET_FUN(__glewGetIntegerui64vNV);
pub const glGetNamedBufferParameterui64vNV = GLEW_GET_FUN(__glewGetNamedBufferParameterui64vNV);
pub const glIsBufferResidentNV = GLEW_GET_FUN(__glewIsBufferResidentNV);
pub const glIsNamedBufferResidentNV = GLEW_GET_FUN(__glewIsNamedBufferResidentNV);
pub const glMakeBufferNonResidentNV = GLEW_GET_FUN(__glewMakeBufferNonResidentNV);
pub const glMakeBufferResidentNV = GLEW_GET_FUN(__glewMakeBufferResidentNV);
pub const glMakeNamedBufferNonResidentNV = GLEW_GET_FUN(__glewMakeNamedBufferNonResidentNV);
pub const glMakeNamedBufferResidentNV = GLEW_GET_FUN(__glewMakeNamedBufferResidentNV);
pub const glProgramUniformui64NV = GLEW_GET_FUN(__glewProgramUniformui64NV);
pub const glProgramUniformui64vNV = GLEW_GET_FUN(__glewProgramUniformui64vNV);
pub const glUniformui64NV = GLEW_GET_FUN(__glewUniformui64NV);
pub const glUniformui64vNV = GLEW_GET_FUN(__glewUniformui64vNV);
pub const GLEW_NV_shader_buffer_load = GLEW_GET_VAR(__GLEW_NV_shader_buffer_load);
pub const GL_NV_shader_noperspective_interpolation = @as(c_int, 1);
pub const GLEW_NV_shader_noperspective_interpolation = GLEW_GET_VAR(__GLEW_NV_shader_noperspective_interpolation);
pub const GL_NV_shader_storage_buffer_object = @as(c_int, 1);
pub const GLEW_NV_shader_storage_buffer_object = GLEW_GET_VAR(__GLEW_NV_shader_storage_buffer_object);
pub const GL_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @as(c_int, 0x00000100);
pub const GLEW_NV_shader_subgroup_partitioned = GLEW_GET_VAR(__GLEW_NV_shader_subgroup_partitioned);
pub const GL_NV_shader_texture_footprint = @as(c_int, 1);
pub const GLEW_NV_shader_texture_footprint = GLEW_GET_VAR(__GLEW_NV_shader_texture_footprint);
pub const GL_NV_shader_thread_group = @as(c_int, 1);
pub const GL_WARP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9339, .hexadecimal);
pub const GL_WARPS_PER_SM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933A, .hexadecimal);
pub const GL_SM_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933B, .hexadecimal);
pub const GLEW_NV_shader_thread_group = GLEW_GET_VAR(__GLEW_NV_shader_thread_group);
pub const GL_NV_shader_thread_shuffle = @as(c_int, 1);
pub const GLEW_NV_shader_thread_shuffle = GLEW_GET_VAR(__GLEW_NV_shader_thread_shuffle);
pub const GL_NV_shading_rate_image = @as(c_int, 1);
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955B, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955C, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955D, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955E, .hexadecimal);
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955F, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9563, .hexadecimal);
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9564, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9565, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9566, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9567, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9568, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9569, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956A, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956B, .hexadecimal);
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956C, .hexadecimal);
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956D, .hexadecimal);
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956E, .hexadecimal);
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956F, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AE, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AF, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B0, .hexadecimal);
pub const glBindShadingRateImageNV = GLEW_GET_FUN(__glewBindShadingRateImageNV);
pub const glGetShadingRateImagePaletteNV = GLEW_GET_FUN(__glewGetShadingRateImagePaletteNV);
pub const glGetShadingRateSampleLocationivNV = GLEW_GET_FUN(__glewGetShadingRateSampleLocationivNV);
pub const glShadingRateImageBarrierNV = GLEW_GET_FUN(__glewShadingRateImageBarrierNV);
pub const glShadingRateImagePaletteNV = GLEW_GET_FUN(__glewShadingRateImagePaletteNV);
pub const glShadingRateSampleOrderCustomNV = GLEW_GET_FUN(__glewShadingRateSampleOrderCustomNV);
pub const GLEW_NV_shading_rate_image = GLEW_GET_VAR(__GLEW_NV_shading_rate_image);
pub const GL_NV_shadow_samplers_array = @as(c_int, 1);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GLEW_NV_shadow_samplers_array = GLEW_GET_VAR(__GLEW_NV_shadow_samplers_array);
pub const GL_NV_shadow_samplers_cube = @as(c_int, 1);
pub const GL_SAMPLER_CUBE_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GLEW_NV_shadow_samplers_cube = GLEW_GET_VAR(__GLEW_NV_shadow_samplers_cube);
pub const GL_NV_stereo_view_rendering = @as(c_int, 1);
pub const GLEW_NV_stereo_view_rendering = GLEW_GET_VAR(__GLEW_NV_stereo_view_rendering);
pub const GL_NV_tessellation_program5 = @as(c_int, 1);
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D8, .hexadecimal);
pub const GL_TESS_CONTROL_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891E, .hexadecimal);
pub const GL_TESS_EVALUATION_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891F, .hexadecimal);
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C74, .hexadecimal);
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C75, .hexadecimal);
pub const GLEW_NV_tessellation_program5 = GLEW_GET_VAR(__GLEW_NV_tessellation_program5);
pub const GL_NV_texgen_emboss = @as(c_int, 1);
pub const GL_EMBOSS_LIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855D, .hexadecimal);
pub const GL_EMBOSS_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855E, .hexadecimal);
pub const GL_EMBOSS_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855F, .hexadecimal);
pub const GLEW_NV_texgen_emboss = GLEW_GET_VAR(__GLEW_NV_texgen_emboss);
pub const GL_NV_texgen_reflection = @as(c_int, 1);
pub const GL_NORMAL_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GLEW_NV_texgen_reflection = GLEW_GET_VAR(__GLEW_NV_texgen_reflection);
pub const GL_NV_texture_array = @as(c_int, 1);
pub const GL_UNPACK_SKIP_IMAGES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_TEXTURE_2D_ARRAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const glCompressedTexImage3DNV = GLEW_GET_FUN(__glewCompressedTexImage3DNV);
pub const glCompressedTexSubImage3DNV = GLEW_GET_FUN(__glewCompressedTexSubImage3DNV);
pub const glCopyTexSubImage3DNV = GLEW_GET_FUN(__glewCopyTexSubImage3DNV);
pub const glFramebufferTextureLayerNV = GLEW_GET_FUN(__glewFramebufferTextureLayerNV);
pub const glTexImage3DNV = GLEW_GET_FUN(__glewTexImage3DNV);
pub const glTexSubImage3DNV = GLEW_GET_FUN(__glewTexSubImage3DNV);
pub const GLEW_NV_texture_array = GLEW_GET_VAR(__GLEW_NV_texture_array);
pub const GL_NV_texture_barrier = @as(c_int, 1);
pub const glTextureBarrierNV = GLEW_GET_FUN(__glewTextureBarrierNV);
pub const GLEW_NV_texture_barrier = GLEW_GET_VAR(__GLEW_NV_texture_barrier);
pub const GL_NV_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_NV = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GLEW_NV_texture_border_clamp = GLEW_GET_VAR(__GLEW_NV_texture_border_clamp);
pub const GL_NV_texture_compression_latc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_LATC1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hexadecimal);
pub const GLEW_NV_texture_compression_latc = GLEW_GET_VAR(__GLEW_NV_texture_compression_latc);
pub const GL_NV_texture_compression_s3tc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hexadecimal);
pub const GLEW_NV_texture_compression_s3tc = GLEW_GET_VAR(__GLEW_NV_texture_compression_s3tc);
pub const GL_NV_texture_compression_s3tc_update = @as(c_int, 1);
pub const GLEW_NV_texture_compression_s3tc_update = GLEW_GET_VAR(__GLEW_NV_texture_compression_s3tc_update);
pub const GL_NV_texture_compression_vtc = @as(c_int, 1);
pub const GLEW_NV_texture_compression_vtc = GLEW_GET_VAR(__GLEW_NV_texture_compression_vtc);
pub const GL_NV_texture_env_combine4 = @as(c_int, 1);
pub const GL_COMBINE4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8503, .hexadecimal);
pub const GL_SOURCE3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8583, .hexadecimal);
pub const GL_SOURCE3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858B, .hexadecimal);
pub const GL_OPERAND3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8593, .hexadecimal);
pub const GL_OPERAND3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859B, .hexadecimal);
pub const GLEW_NV_texture_env_combine4 = GLEW_GET_VAR(__GLEW_NV_texture_env_combine4);
pub const GL_NV_texture_expand_normal = @as(c_int, 1);
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888F, .hexadecimal);
pub const GLEW_NV_texture_expand_normal = GLEW_GET_VAR(__GLEW_NV_texture_expand_normal);
pub const GL_NV_texture_multisample = @as(c_int, 1);
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9045, .hexadecimal);
pub const GL_TEXTURE_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9046, .hexadecimal);
pub const glTexImage2DMultisampleCoverageNV = GLEW_GET_FUN(__glewTexImage2DMultisampleCoverageNV);
pub const glTexImage3DMultisampleCoverageNV = GLEW_GET_FUN(__glewTexImage3DMultisampleCoverageNV);
pub const glTextureImage2DMultisampleCoverageNV = GLEW_GET_FUN(__glewTextureImage2DMultisampleCoverageNV);
pub const glTextureImage2DMultisampleNV = GLEW_GET_FUN(__glewTextureImage2DMultisampleNV);
pub const glTextureImage3DMultisampleCoverageNV = GLEW_GET_FUN(__glewTextureImage3DMultisampleCoverageNV);
pub const glTextureImage3DMultisampleNV = GLEW_GET_FUN(__glewTextureImage3DMultisampleNV);
pub const GLEW_NV_texture_multisample = GLEW_GET_VAR(__GLEW_NV_texture_multisample);
pub const GL_NV_texture_npot_2D_mipmap = @as(c_int, 1);
pub const GLEW_NV_texture_npot_2D_mipmap = GLEW_GET_VAR(__GLEW_NV_texture_npot_2D_mipmap);
pub const GL_NV_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GLEW_NV_texture_rectangle = GLEW_GET_VAR(__GLEW_NV_texture_rectangle);
pub const GL_NV_texture_rectangle_compressed = @as(c_int, 1);
pub const GLEW_NV_texture_rectangle_compressed = GLEW_GET_VAR(__GLEW_NV_texture_rectangle_compressed);
pub const GL_NV_texture_shader = @as(c_int, 1);
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864C, .hexadecimal);
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864D, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864E, .hexadecimal);
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D9, .hexadecimal);
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DA, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DB, .hexadecimal);
pub const GL_DSDT_MAG_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DC, .hexadecimal);
pub const GL_SHADER_CONSISTENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DD, .hexadecimal);
pub const GL_TEXTURE_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DE, .hexadecimal);
pub const GL_SHADER_OPERATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DF, .hexadecimal);
pub const GL_CULL_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E0, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hexadecimal);
pub const GL_OFFSET_TEXTURE_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hexadecimal);
pub const GL_OFFSET_TEXTURE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hexadecimal);
pub const GL_OFFSET_TEXTURE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hexadecimal);
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E4, .hexadecimal);
pub const GL_CONST_EYE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E5, .hexadecimal);
pub const GL_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E6, .hexadecimal);
pub const GL_CULL_FRAGMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E7, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E8, .hexadecimal);
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E9, .hexadecimal);
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EA, .hexadecimal);
pub const GL_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EC, .hexadecimal);
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86ED, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EE, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F0, .hexadecimal);
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F1, .hexadecimal);
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F2, .hexadecimal);
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F3, .hexadecimal);
pub const GL_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F4, .hexadecimal);
pub const GL_DSDT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F5, .hexadecimal);
pub const GL_DSDT_MAG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F6, .hexadecimal);
pub const GL_DSDT_MAG_VIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F7, .hexadecimal);
pub const GL_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F8, .hexadecimal);
pub const GL_SIGNED_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F9, .hexadecimal);
pub const GL_SIGNED_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FA, .hexadecimal);
pub const GL_SIGNED_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FB, .hexadecimal);
pub const GL_SIGNED_RGBA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FC, .hexadecimal);
pub const GL_SIGNED_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FE, .hexadecimal);
pub const GL_SIGNED_RGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FF, .hexadecimal);
pub const GL_SIGNED_LUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8701, .hexadecimal);
pub const GL_SIGNED_LUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8702, .hexadecimal);
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8703, .hexadecimal);
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8704, .hexadecimal);
pub const GL_SIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8705, .hexadecimal);
pub const GL_SIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8706, .hexadecimal);
pub const GL_SIGNED_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8707, .hexadecimal);
pub const GL_SIGNED_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8708, .hexadecimal);
pub const GL_DSDT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8709, .hexadecimal);
pub const GL_DSDT8_MAG8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870A, .hexadecimal);
pub const GL_DSDT8_MAG8_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870B, .hexadecimal);
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870C, .hexadecimal);
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870D, .hexadecimal);
pub const GL_HI_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870E, .hexadecimal);
pub const GL_LO_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870F, .hexadecimal);
pub const GL_DS_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8710, .hexadecimal);
pub const GL_DT_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8711, .hexadecimal);
pub const GL_MAGNITUDE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8712, .hexadecimal);
pub const GL_VIBRANCE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8713, .hexadecimal);
pub const GL_HI_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8714, .hexadecimal);
pub const GL_LO_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8715, .hexadecimal);
pub const GL_DS_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8716, .hexadecimal);
pub const GL_DT_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8717, .hexadecimal);
pub const GL_MAGNITUDE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8718, .hexadecimal);
pub const GL_VIBRANCE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8719, .hexadecimal);
pub const GL_TEXTURE_BORDER_VALUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871A, .hexadecimal);
pub const GL_TEXTURE_HI_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871B, .hexadecimal);
pub const GL_TEXTURE_LO_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871C, .hexadecimal);
pub const GL_TEXTURE_DS_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871D, .hexadecimal);
pub const GL_TEXTURE_DT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871E, .hexadecimal);
pub const GL_TEXTURE_MAG_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871F, .hexadecimal);
pub const GLEW_NV_texture_shader = GLEW_GET_VAR(__GLEW_NV_texture_shader);
pub const GL_NV_texture_shader2 = @as(c_int, 1);
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EF, .hexadecimal);
pub const GLEW_NV_texture_shader2 = GLEW_GET_VAR(__GLEW_NV_texture_shader2);
pub const GL_NV_texture_shader3 = @as(c_int, 1);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8850, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8851, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8852, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8853, .hexadecimal);
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8854, .hexadecimal);
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8855, .hexadecimal);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8856, .hexadecimal);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8857, .hexadecimal);
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8858, .hexadecimal);
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8859, .hexadecimal);
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885A, .hexadecimal);
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885B, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885C, .hexadecimal);
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885D, .hexadecimal);
pub const GL_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885E, .hexadecimal);
pub const GL_SIGNED_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885F, .hexadecimal);
pub const GL_FORCE_BLUE_TO_ONE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8860, .hexadecimal);
pub const GLEW_NV_texture_shader3 = GLEW_GET_VAR(__GLEW_NV_texture_shader3);
pub const GL_NV_transform_feedback = @as(c_int, 1);
pub const GL_BACK_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C77, .hexadecimal);
pub const GL_BACK_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C78, .hexadecimal);
pub const GL_TEXTURE_COORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C79, .hexadecimal);
pub const GL_CLIP_DISTANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7A, .hexadecimal);
pub const GL_VERTEX_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7B, .hexadecimal);
pub const GL_PRIMITIVE_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7C, .hexadecimal);
pub const GL_GENERIC_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7D, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_ACTIVE_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C81, .hexadecimal);
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C82, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C86, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_RASTERIZER_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const glActiveVaryingNV = GLEW_GET_FUN(__glewActiveVaryingNV);
pub const glBeginTransformFeedbackNV = GLEW_GET_FUN(__glewBeginTransformFeedbackNV);
pub const glBindBufferBaseNV = GLEW_GET_FUN(__glewBindBufferBaseNV);
pub const glBindBufferOffsetNV = GLEW_GET_FUN(__glewBindBufferOffsetNV);
pub const glBindBufferRangeNV = GLEW_GET_FUN(__glewBindBufferRangeNV);
pub const glEndTransformFeedbackNV = GLEW_GET_FUN(__glewEndTransformFeedbackNV);
pub const glGetActiveVaryingNV = GLEW_GET_FUN(__glewGetActiveVaryingNV);
pub const glGetTransformFeedbackVaryingNV = GLEW_GET_FUN(__glewGetTransformFeedbackVaryingNV);
pub const glGetVaryingLocationNV = GLEW_GET_FUN(__glewGetVaryingLocationNV);
pub const glTransformFeedbackAttribsNV = GLEW_GET_FUN(__glewTransformFeedbackAttribsNV);
pub const glTransformFeedbackVaryingsNV = GLEW_GET_FUN(__glewTransformFeedbackVaryingsNV);
pub const GLEW_NV_transform_feedback = GLEW_GET_VAR(__GLEW_NV_transform_feedback);
pub const GL_NV_transform_feedback2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const glBindTransformFeedbackNV = GLEW_GET_FUN(__glewBindTransformFeedbackNV);
pub const glDeleteTransformFeedbacksNV = GLEW_GET_FUN(__glewDeleteTransformFeedbacksNV);
pub const glDrawTransformFeedbackNV = GLEW_GET_FUN(__glewDrawTransformFeedbackNV);
pub const glGenTransformFeedbacksNV = GLEW_GET_FUN(__glewGenTransformFeedbacksNV);
pub const glIsTransformFeedbackNV = GLEW_GET_FUN(__glewIsTransformFeedbackNV);
pub const glPauseTransformFeedbackNV = GLEW_GET_FUN(__glewPauseTransformFeedbackNV);
pub const glResumeTransformFeedbackNV = GLEW_GET_FUN(__glewResumeTransformFeedbackNV);
pub const GLEW_NV_transform_feedback2 = GLEW_GET_VAR(__GLEW_NV_transform_feedback2);
pub const GL_NV_uniform_buffer_unified_memory = @as(c_int, 1);
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936E, .hexadecimal);
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936F, .hexadecimal);
pub const GL_UNIFORM_BUFFER_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9370, .hexadecimal);
pub const GLEW_NV_uniform_buffer_unified_memory = GLEW_GET_VAR(__GLEW_NV_uniform_buffer_unified_memory);
pub const GL_NV_vdpau_interop = @as(c_int, 1);
pub const GL_SURFACE_STATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EB, .hexadecimal);
pub const GL_SURFACE_REGISTERED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FD, .hexadecimal);
pub const GL_SURFACE_MAPPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8700, .hexadecimal);
pub const GL_WRITE_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BE, .hexadecimal);
pub const glVDPAUFiniNV = GLEW_GET_FUN(__glewVDPAUFiniNV);
pub const glVDPAUGetSurfaceivNV = GLEW_GET_FUN(__glewVDPAUGetSurfaceivNV);
pub const glVDPAUInitNV = GLEW_GET_FUN(__glewVDPAUInitNV);
pub const glVDPAUIsSurfaceNV = GLEW_GET_FUN(__glewVDPAUIsSurfaceNV);
pub const glVDPAUMapSurfacesNV = GLEW_GET_FUN(__glewVDPAUMapSurfacesNV);
pub const glVDPAURegisterOutputSurfaceNV = GLEW_GET_FUN(__glewVDPAURegisterOutputSurfaceNV);
pub const glVDPAURegisterVideoSurfaceNV = GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceNV);
pub const glVDPAUSurfaceAccessNV = GLEW_GET_FUN(__glewVDPAUSurfaceAccessNV);
pub const glVDPAUUnmapSurfacesNV = GLEW_GET_FUN(__glewVDPAUUnmapSurfacesNV);
pub const glVDPAUUnregisterSurfaceNV = GLEW_GET_FUN(__glewVDPAUUnregisterSurfaceNV);
pub const GLEW_NV_vdpau_interop = GLEW_GET_VAR(__GLEW_NV_vdpau_interop);
pub const GL_NV_vdpau_interop2 = @as(c_int, 1);
pub const glVDPAURegisterVideoSurfaceWithPictureStructureNV = GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceWithPictureStructureNV);
pub const GLEW_NV_vdpau_interop2 = GLEW_GET_VAR(__GLEW_NV_vdpau_interop2);
pub const GL_NV_vertex_array_range = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hexadecimal);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hexadecimal);
pub const glFlushVertexArrayRangeNV = GLEW_GET_FUN(__glewFlushVertexArrayRangeNV);
pub const glVertexArrayRangeNV = GLEW_GET_FUN(__glewVertexArrayRangeNV);
pub const GLEW_NV_vertex_array_range = GLEW_GET_VAR(__GLEW_NV_vertex_array_range);
pub const GL_NV_vertex_array_range2 = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8533, .hexadecimal);
pub const GLEW_NV_vertex_array_range2 = GLEW_GET_VAR(__GLEW_NV_vertex_array_range2);
pub const GL_NV_vertex_attrib_integer_64bit = @as(c_int, 1);
pub const glGetVertexAttribLi64vNV = GLEW_GET_FUN(__glewGetVertexAttribLi64vNV);
pub const glGetVertexAttribLui64vNV = GLEW_GET_FUN(__glewGetVertexAttribLui64vNV);
pub const glVertexAttribL1i64NV = GLEW_GET_FUN(__glewVertexAttribL1i64NV);
pub const glVertexAttribL1i64vNV = GLEW_GET_FUN(__glewVertexAttribL1i64vNV);
pub const glVertexAttribL1ui64NV = GLEW_GET_FUN(__glewVertexAttribL1ui64NV);
pub const glVertexAttribL1ui64vNV = GLEW_GET_FUN(__glewVertexAttribL1ui64vNV);
pub const glVertexAttribL2i64NV = GLEW_GET_FUN(__glewVertexAttribL2i64NV);
pub const glVertexAttribL2i64vNV = GLEW_GET_FUN(__glewVertexAttribL2i64vNV);
pub const glVertexAttribL2ui64NV = GLEW_GET_FUN(__glewVertexAttribL2ui64NV);
pub const glVertexAttribL2ui64vNV = GLEW_GET_FUN(__glewVertexAttribL2ui64vNV);
pub const glVertexAttribL3i64NV = GLEW_GET_FUN(__glewVertexAttribL3i64NV);
pub const glVertexAttribL3i64vNV = GLEW_GET_FUN(__glewVertexAttribL3i64vNV);
pub const glVertexAttribL3ui64NV = GLEW_GET_FUN(__glewVertexAttribL3ui64NV);
pub const glVertexAttribL3ui64vNV = GLEW_GET_FUN(__glewVertexAttribL3ui64vNV);
pub const glVertexAttribL4i64NV = GLEW_GET_FUN(__glewVertexAttribL4i64NV);
pub const glVertexAttribL4i64vNV = GLEW_GET_FUN(__glewVertexAttribL4i64vNV);
pub const glVertexAttribL4ui64NV = GLEW_GET_FUN(__glewVertexAttribL4ui64NV);
pub const glVertexAttribL4ui64vNV = GLEW_GET_FUN(__glewVertexAttribL4ui64vNV);
pub const glVertexAttribLFormatNV = GLEW_GET_FUN(__glewVertexAttribLFormatNV);
pub const GLEW_NV_vertex_attrib_integer_64bit = GLEW_GET_VAR(__GLEW_NV_vertex_attrib_integer_64bit);
pub const GL_NV_vertex_buffer_unified_memory = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1E, .hexadecimal);
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F20, .hexadecimal);
pub const GL_VERTEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F21, .hexadecimal);
pub const GL_NORMAL_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F22, .hexadecimal);
pub const GL_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F23, .hexadecimal);
pub const GL_INDEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F24, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F25, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F26, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F27, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F28, .hexadecimal);
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F29, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2A, .hexadecimal);
pub const GL_VERTEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2B, .hexadecimal);
pub const GL_NORMAL_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2C, .hexadecimal);
pub const GL_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2D, .hexadecimal);
pub const GL_INDEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2E, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2F, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F30, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F31, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F32, .hexadecimal);
pub const GL_ELEMENT_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F33, .hexadecimal);
pub const GL_DRAW_INDIRECT_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F40, .hexadecimal);
pub const GL_DRAW_INDIRECT_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F41, .hexadecimal);
pub const GL_DRAW_INDIRECT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F42, .hexadecimal);
pub const glBufferAddressRangeNV = GLEW_GET_FUN(__glewBufferAddressRangeNV);
pub const glColorFormatNV = GLEW_GET_FUN(__glewColorFormatNV);
pub const glEdgeFlagFormatNV = GLEW_GET_FUN(__glewEdgeFlagFormatNV);
pub const glFogCoordFormatNV = GLEW_GET_FUN(__glewFogCoordFormatNV);
pub const glGetIntegerui64i_vNV = GLEW_GET_FUN(__glewGetIntegerui64i_vNV);
pub const glIndexFormatNV = GLEW_GET_FUN(__glewIndexFormatNV);
pub const glNormalFormatNV = GLEW_GET_FUN(__glewNormalFormatNV);
pub const glSecondaryColorFormatNV = GLEW_GET_FUN(__glewSecondaryColorFormatNV);
pub const glTexCoordFormatNV = GLEW_GET_FUN(__glewTexCoordFormatNV);
pub const glVertexAttribFormatNV = GLEW_GET_FUN(__glewVertexAttribFormatNV);
pub const glVertexAttribIFormatNV = GLEW_GET_FUN(__glewVertexAttribIFormatNV);
pub const glVertexFormatNV = GLEW_GET_FUN(__glewVertexFormatNV);
pub const GLEW_NV_vertex_buffer_unified_memory = GLEW_GET_VAR(__GLEW_NV_vertex_buffer_unified_memory);
pub const GL_NV_vertex_program = @as(c_int, 1);
pub const GL_VERTEX_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hexadecimal);
pub const GL_VERTEX_STATE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8621, .hexadecimal);
pub const GL_ATTRIB_ARRAY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_ATTRIB_ARRAY_STRIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_ATTRIB_ARRAY_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_CURRENT_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_PROGRAM_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hexadecimal);
pub const GL_PROGRAM_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hexadecimal);
pub const GL_MODELVIEW_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8629, .hexadecimal);
pub const GL_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862A, .hexadecimal);
pub const GL_INVERSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862B, .hexadecimal);
pub const GL_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862C, .hexadecimal);
pub const GL_INVERSE_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862D, .hexadecimal);
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hexadecimal);
pub const GL_MAX_TRACK_MATRICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hexadecimal);
pub const GL_MATRIX0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8630, .hexadecimal);
pub const GL_MATRIX1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8631, .hexadecimal);
pub const GL_MATRIX2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8632, .hexadecimal);
pub const GL_MATRIX3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8633, .hexadecimal);
pub const GL_MATRIX4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8634, .hexadecimal);
pub const GL_MATRIX5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8635, .hexadecimal);
pub const GL_MATRIX6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8636, .hexadecimal);
pub const GL_MATRIX7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8637, .hexadecimal);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hexadecimal);
pub const GL_CURRENT_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_PROGRAM_PARAMETER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8644, .hexadecimal);
pub const GL_ATTRIB_ARRAY_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_PROGRAM_TARGET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8646, .hexadecimal);
pub const GL_PROGRAM_RESIDENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8647, .hexadecimal);
pub const GL_TRACK_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8648, .hexadecimal);
pub const GL_TRACK_MATRIX_TRANSFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8649, .hexadecimal);
pub const GL_VERTEX_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864A, .hexadecimal);
pub const GL_PROGRAM_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8650, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8651, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8652, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8653, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8654, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8655, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8656, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8657, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8658, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8659, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865B, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865C, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865D, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865F, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8660, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8661, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8662, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8663, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8664, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8665, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8666, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8667, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8668, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8669, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866A, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866B, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866C, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866D, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866E, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866F, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8670, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8671, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8672, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8673, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8674, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8675, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8676, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8678, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8679, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867A, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867B, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867C, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867D, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867E, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867F, .hexadecimal);
pub const glAreProgramsResidentNV = GLEW_GET_FUN(__glewAreProgramsResidentNV);
pub const glBindProgramNV = GLEW_GET_FUN(__glewBindProgramNV);
pub const glDeleteProgramsNV = GLEW_GET_FUN(__glewDeleteProgramsNV);
pub const glExecuteProgramNV = GLEW_GET_FUN(__glewExecuteProgramNV);
pub const glGenProgramsNV = GLEW_GET_FUN(__glewGenProgramsNV);
pub const glGetProgramParameterdvNV = GLEW_GET_FUN(__glewGetProgramParameterdvNV);
pub const glGetProgramParameterfvNV = GLEW_GET_FUN(__glewGetProgramParameterfvNV);
pub const glGetProgramStringNV = GLEW_GET_FUN(__glewGetProgramStringNV);
pub const glGetProgramivNV = GLEW_GET_FUN(__glewGetProgramivNV);
pub const glGetTrackMatrixivNV = GLEW_GET_FUN(__glewGetTrackMatrixivNV);
pub const glGetVertexAttribPointervNV = GLEW_GET_FUN(__glewGetVertexAttribPointervNV);
pub const glGetVertexAttribdvNV = GLEW_GET_FUN(__glewGetVertexAttribdvNV);
pub const glGetVertexAttribfvNV = GLEW_GET_FUN(__glewGetVertexAttribfvNV);
pub const glGetVertexAttribivNV = GLEW_GET_FUN(__glewGetVertexAttribivNV);
pub const glIsProgramNV = GLEW_GET_FUN(__glewIsProgramNV);
pub const glLoadProgramNV = GLEW_GET_FUN(__glewLoadProgramNV);
pub const glProgramParameter4dNV = GLEW_GET_FUN(__glewProgramParameter4dNV);
pub const glProgramParameter4dvNV = GLEW_GET_FUN(__glewProgramParameter4dvNV);
pub const glProgramParameter4fNV = GLEW_GET_FUN(__glewProgramParameter4fNV);
pub const glProgramParameter4fvNV = GLEW_GET_FUN(__glewProgramParameter4fvNV);
pub const glProgramParameters4dvNV = GLEW_GET_FUN(__glewProgramParameters4dvNV);
pub const glProgramParameters4fvNV = GLEW_GET_FUN(__glewProgramParameters4fvNV);
pub const glRequestResidentProgramsNV = GLEW_GET_FUN(__glewRequestResidentProgramsNV);
pub const glTrackMatrixNV = GLEW_GET_FUN(__glewTrackMatrixNV);
pub const glVertexAttrib1dNV = GLEW_GET_FUN(__glewVertexAttrib1dNV);
pub const glVertexAttrib1dvNV = GLEW_GET_FUN(__glewVertexAttrib1dvNV);
pub const glVertexAttrib1fNV = GLEW_GET_FUN(__glewVertexAttrib1fNV);
pub const glVertexAttrib1fvNV = GLEW_GET_FUN(__glewVertexAttrib1fvNV);
pub const glVertexAttrib1sNV = GLEW_GET_FUN(__glewVertexAttrib1sNV);
pub const glVertexAttrib1svNV = GLEW_GET_FUN(__glewVertexAttrib1svNV);
pub const glVertexAttrib2dNV = GLEW_GET_FUN(__glewVertexAttrib2dNV);
pub const glVertexAttrib2dvNV = GLEW_GET_FUN(__glewVertexAttrib2dvNV);
pub const glVertexAttrib2fNV = GLEW_GET_FUN(__glewVertexAttrib2fNV);
pub const glVertexAttrib2fvNV = GLEW_GET_FUN(__glewVertexAttrib2fvNV);
pub const glVertexAttrib2sNV = GLEW_GET_FUN(__glewVertexAttrib2sNV);
pub const glVertexAttrib2svNV = GLEW_GET_FUN(__glewVertexAttrib2svNV);
pub const glVertexAttrib3dNV = GLEW_GET_FUN(__glewVertexAttrib3dNV);
pub const glVertexAttrib3dvNV = GLEW_GET_FUN(__glewVertexAttrib3dvNV);
pub const glVertexAttrib3fNV = GLEW_GET_FUN(__glewVertexAttrib3fNV);
pub const glVertexAttrib3fvNV = GLEW_GET_FUN(__glewVertexAttrib3fvNV);
pub const glVertexAttrib3sNV = GLEW_GET_FUN(__glewVertexAttrib3sNV);
pub const glVertexAttrib3svNV = GLEW_GET_FUN(__glewVertexAttrib3svNV);
pub const glVertexAttrib4dNV = GLEW_GET_FUN(__glewVertexAttrib4dNV);
pub const glVertexAttrib4dvNV = GLEW_GET_FUN(__glewVertexAttrib4dvNV);
pub const glVertexAttrib4fNV = GLEW_GET_FUN(__glewVertexAttrib4fNV);
pub const glVertexAttrib4fvNV = GLEW_GET_FUN(__glewVertexAttrib4fvNV);
pub const glVertexAttrib4sNV = GLEW_GET_FUN(__glewVertexAttrib4sNV);
pub const glVertexAttrib4svNV = GLEW_GET_FUN(__glewVertexAttrib4svNV);
pub const glVertexAttrib4ubNV = GLEW_GET_FUN(__glewVertexAttrib4ubNV);
pub const glVertexAttrib4ubvNV = GLEW_GET_FUN(__glewVertexAttrib4ubvNV);
pub const glVertexAttribPointerNV = GLEW_GET_FUN(__glewVertexAttribPointerNV);
pub const glVertexAttribs1dvNV = GLEW_GET_FUN(__glewVertexAttribs1dvNV);
pub const glVertexAttribs1fvNV = GLEW_GET_FUN(__glewVertexAttribs1fvNV);
pub const glVertexAttribs1svNV = GLEW_GET_FUN(__glewVertexAttribs1svNV);
pub const glVertexAttribs2dvNV = GLEW_GET_FUN(__glewVertexAttribs2dvNV);
pub const glVertexAttribs2fvNV = GLEW_GET_FUN(__glewVertexAttribs2fvNV);
pub const glVertexAttribs2svNV = GLEW_GET_FUN(__glewVertexAttribs2svNV);
pub const glVertexAttribs3dvNV = GLEW_GET_FUN(__glewVertexAttribs3dvNV);
pub const glVertexAttribs3fvNV = GLEW_GET_FUN(__glewVertexAttribs3fvNV);
pub const glVertexAttribs3svNV = GLEW_GET_FUN(__glewVertexAttribs3svNV);
pub const glVertexAttribs4dvNV = GLEW_GET_FUN(__glewVertexAttribs4dvNV);
pub const glVertexAttribs4fvNV = GLEW_GET_FUN(__glewVertexAttribs4fvNV);
pub const glVertexAttribs4svNV = GLEW_GET_FUN(__glewVertexAttribs4svNV);
pub const glVertexAttribs4ubvNV = GLEW_GET_FUN(__glewVertexAttribs4ubvNV);
pub const GLEW_NV_vertex_program = GLEW_GET_VAR(__GLEW_NV_vertex_program);
pub const GL_NV_vertex_program1_1 = @as(c_int, 1);
pub const GLEW_NV_vertex_program1_1 = GLEW_GET_VAR(__GLEW_NV_vertex_program1_1);
pub const GL_NV_vertex_program2 = @as(c_int, 1);
pub const GLEW_NV_vertex_program2 = GLEW_GET_VAR(__GLEW_NV_vertex_program2);
pub const GL_NV_vertex_program2_option = @as(c_int, 1);
pub const GLEW_NV_vertex_program2_option = GLEW_GET_VAR(__GLEW_NV_vertex_program2_option);
pub const GL_NV_vertex_program3 = @as(c_int, 1);
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GLEW_NV_vertex_program3 = GLEW_GET_VAR(__GLEW_NV_vertex_program3);
pub const GL_NV_vertex_program4 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GLEW_NV_vertex_program4 = GLEW_GET_VAR(__GLEW_NV_vertex_program4);
pub const GL_NV_video_capture = @as(c_int, 1);
pub const GL_VIDEO_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9020, .hexadecimal);
pub const GL_VIDEO_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9021, .hexadecimal);
pub const GL_FIELD_UPPER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9022, .hexadecimal);
pub const GL_FIELD_LOWER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9023, .hexadecimal);
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9024, .hexadecimal);
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9025, .hexadecimal);
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9026, .hexadecimal);
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9027, .hexadecimal);
pub const GL_VIDEO_BUFFER_PITCH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9028, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9029, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902A, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902B, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902C, .hexadecimal);
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902D, .hexadecimal);
pub const GL_PARTIAL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902E, .hexadecimal);
pub const GL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902F, .hexadecimal);
pub const GL_FAILURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9030, .hexadecimal);
pub const GL_YCBYCR8_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9031, .hexadecimal);
pub const GL_YCBAYCR8A_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9032, .hexadecimal);
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9033, .hexadecimal);
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9034, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9035, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9036, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9037, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9038, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9039, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903A, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903B, .hexadecimal);
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903C, .hexadecimal);
pub const glBeginVideoCaptureNV = GLEW_GET_FUN(__glewBeginVideoCaptureNV);
pub const glBindVideoCaptureStreamBufferNV = GLEW_GET_FUN(__glewBindVideoCaptureStreamBufferNV);
pub const glBindVideoCaptureStreamTextureNV = GLEW_GET_FUN(__glewBindVideoCaptureStreamTextureNV);
pub const glEndVideoCaptureNV = GLEW_GET_FUN(__glewEndVideoCaptureNV);
pub const glGetVideoCaptureStreamdvNV = GLEW_GET_FUN(__glewGetVideoCaptureStreamdvNV);
pub const glGetVideoCaptureStreamfvNV = GLEW_GET_FUN(__glewGetVideoCaptureStreamfvNV);
pub const glGetVideoCaptureStreamivNV = GLEW_GET_FUN(__glewGetVideoCaptureStreamivNV);
pub const glGetVideoCaptureivNV = GLEW_GET_FUN(__glewGetVideoCaptureivNV);
pub const glVideoCaptureNV = GLEW_GET_FUN(__glewVideoCaptureNV);
pub const glVideoCaptureStreamParameterdvNV = GLEW_GET_FUN(__glewVideoCaptureStreamParameterdvNV);
pub const glVideoCaptureStreamParameterfvNV = GLEW_GET_FUN(__glewVideoCaptureStreamParameterfvNV);
pub const glVideoCaptureStreamParameterivNV = GLEW_GET_FUN(__glewVideoCaptureStreamParameterivNV);
pub const GLEW_NV_video_capture = GLEW_GET_VAR(__GLEW_NV_video_capture);
pub const GL_NV_viewport_array = @as(c_int, 1);
pub const GL_MAX_VIEWPORTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_BOUNDS_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const glDepthRangeArrayfvNV = GLEW_GET_FUN(__glewDepthRangeArrayfvNV);
pub const glDepthRangeIndexedfNV = GLEW_GET_FUN(__glewDepthRangeIndexedfNV);
pub const glDisableiNV = GLEW_GET_FUN(__glewDisableiNV);
pub const glEnableiNV = GLEW_GET_FUN(__glewEnableiNV);
pub const glGetFloati_vNV = GLEW_GET_FUN(__glewGetFloati_vNV);
pub const glIsEnablediNV = GLEW_GET_FUN(__glewIsEnablediNV);
pub const glScissorArrayvNV = GLEW_GET_FUN(__glewScissorArrayvNV);
pub const glScissorIndexedNV = GLEW_GET_FUN(__glewScissorIndexedNV);
pub const glScissorIndexedvNV = GLEW_GET_FUN(__glewScissorIndexedvNV);
pub const glViewportArrayvNV = GLEW_GET_FUN(__glewViewportArrayvNV);
pub const glViewportIndexedfNV = GLEW_GET_FUN(__glewViewportIndexedfNV);
pub const glViewportIndexedfvNV = GLEW_GET_FUN(__glewViewportIndexedfvNV);
pub const GLEW_NV_viewport_array = GLEW_GET_VAR(__GLEW_NV_viewport_array);
pub const GL_NV_viewport_array2 = @as(c_int, 1);
pub const GLEW_NV_viewport_array2 = GLEW_GET_VAR(__GLEW_NV_viewport_array2);
pub const GL_NV_viewport_swizzle = @as(c_int, 1);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9350, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9351, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9352, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9353, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9354, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9355, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9356, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9357, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9358, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9359, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935A, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935B, .hexadecimal);
pub const glViewportSwizzleNV = GLEW_GET_FUN(__glewViewportSwizzleNV);
pub const GLEW_NV_viewport_swizzle = GLEW_GET_VAR(__GLEW_NV_viewport_swizzle);
pub const GL_OES_EGL_image = @as(c_int, 1);
pub const glEGLImageTargetRenderbufferStorageOES = GLEW_GET_FUN(__glewEGLImageTargetRenderbufferStorageOES);
pub const glEGLImageTargetTexture2DOES = GLEW_GET_FUN(__glewEGLImageTargetTexture2DOES);
pub const GLEW_OES_EGL_image = GLEW_GET_VAR(__GLEW_OES_EGL_image);
pub const GL_OES_EGL_image_external = @as(c_int, 1);
pub const GLEW_OES_EGL_image_external = GLEW_GET_VAR(__GLEW_OES_EGL_image_external);
pub const GL_OES_EGL_image_external_essl3 = @as(c_int, 1);
pub const GLEW_OES_EGL_image_external_essl3 = GLEW_GET_VAR(__GLEW_OES_EGL_image_external_essl3);
pub const GL_OES_blend_equation_separate = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const glBlendEquationSeparateOES = GLEW_GET_FUN(__glewBlendEquationSeparateOES);
pub const GLEW_OES_blend_equation_separate = GLEW_GET_VAR(__GLEW_OES_blend_equation_separate);
pub const GL_OES_blend_func_separate = @as(c_int, 1);
pub const GL_BLEND_DST_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_SRC_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_DST_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const glBlendFuncSeparateOES = GLEW_GET_FUN(__glewBlendFuncSeparateOES);
pub const GLEW_OES_blend_func_separate = GLEW_GET_VAR(__GLEW_OES_blend_func_separate);
pub const GL_OES_blend_subtract = @as(c_int, 1);
pub const GL_FUNC_ADD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_BLEND_EQUATION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_FUNC_SUBTRACT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const glBlendEquationOES = GLEW_GET_FUN(__glewBlendEquationOES);
pub const GLEW_OES_blend_subtract = GLEW_GET_VAR(__GLEW_OES_blend_subtract);
pub const GL_OES_byte_coordinates = @as(c_int, 1);
pub const GLEW_OES_byte_coordinates = GLEW_GET_VAR(__GLEW_OES_byte_coordinates);
pub const GL_OES_compressed_ETC1_RGB8_texture = @as(c_int, 1);
pub const GL_ETC1_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D64, .hexadecimal);
pub const GLEW_OES_compressed_ETC1_RGB8_texture = GLEW_GET_VAR(__GLEW_OES_compressed_ETC1_RGB8_texture);
pub const GL_OES_compressed_paletted_texture = @as(c_int, 1);
pub const GL_PALETTE4_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B90, .hexadecimal);
pub const GL_PALETTE4_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B91, .hexadecimal);
pub const GL_PALETTE4_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B92, .hexadecimal);
pub const GL_PALETTE4_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B93, .hexadecimal);
pub const GL_PALETTE4_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B94, .hexadecimal);
pub const GL_PALETTE8_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B95, .hexadecimal);
pub const GL_PALETTE8_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B96, .hexadecimal);
pub const GL_PALETTE8_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B97, .hexadecimal);
pub const GL_PALETTE8_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B98, .hexadecimal);
pub const GL_PALETTE8_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B99, .hexadecimal);
pub const GLEW_OES_compressed_paletted_texture = GLEW_GET_VAR(__GLEW_OES_compressed_paletted_texture);
pub const GL_OES_copy_image = @as(c_int, 1);
pub const glCopyImageSubDataOES = GLEW_GET_FUN(__glewCopyImageSubDataOES);
pub const GLEW_OES_copy_image = GLEW_GET_VAR(__GLEW_OES_copy_image);
pub const GL_OES_depth24 = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT24_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GLEW_OES_depth24 = GLEW_GET_VAR(__GLEW_OES_depth24);
pub const GL_OES_depth32 = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GLEW_OES_depth32 = GLEW_GET_VAR(__GLEW_OES_depth32);
pub const GL_OES_depth_texture = @as(c_int, 1);
pub const GLEW_OES_depth_texture = GLEW_GET_VAR(__GLEW_OES_depth_texture);
pub const GL_OES_depth_texture_cube_map = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH24_STENCIL8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GLEW_OES_depth_texture_cube_map = GLEW_GET_VAR(__GLEW_OES_depth_texture_cube_map);
pub const GL_OES_draw_buffers_indexed = @as(c_int, 1);
pub const glBlendEquationSeparateiOES = GLEW_GET_FUN(__glewBlendEquationSeparateiOES);
pub const glBlendEquationiOES = GLEW_GET_FUN(__glewBlendEquationiOES);
pub const glBlendFuncSeparateiOES = GLEW_GET_FUN(__glewBlendFuncSeparateiOES);
pub const glBlendFunciOES = GLEW_GET_FUN(__glewBlendFunciOES);
pub const glColorMaskiOES = GLEW_GET_FUN(__glewColorMaskiOES);
pub const glDisableiOES = GLEW_GET_FUN(__glewDisableiOES);
pub const glEnableiOES = GLEW_GET_FUN(__glewEnableiOES);
pub const glIsEnablediOES = GLEW_GET_FUN(__glewIsEnablediOES);
pub const GLEW_OES_draw_buffers_indexed = GLEW_GET_VAR(__GLEW_OES_draw_buffers_indexed);
pub const GL_OES_draw_texture = @as(c_int, 1);
pub const GL_TEXTURE_CROP_RECT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9D, .hexadecimal);
pub const GLEW_OES_draw_texture = GLEW_GET_VAR(__GLEW_OES_draw_texture);
pub const GL_OES_element_index_uint = @as(c_int, 1);
pub const GLEW_OES_element_index_uint = GLEW_GET_VAR(__GLEW_OES_element_index_uint);
pub const GL_OES_extended_matrix_palette = @as(c_int, 1);
pub const GLEW_OES_extended_matrix_palette = GLEW_GET_VAR(__GLEW_OES_extended_matrix_palette);
pub const GL_OES_fbo_render_mipmap = @as(c_int, 1);
pub const GLEW_OES_fbo_render_mipmap = GLEW_GET_VAR(__GLEW_OES_fbo_render_mipmap);
pub const GL_OES_fragment_precision_high = @as(c_int, 1);
pub const GLEW_OES_fragment_precision_high = GLEW_GET_VAR(__GLEW_OES_fragment_precision_high);
pub const GL_OES_framebuffer_object = @as(c_int, 1);
pub const GL_NONE_OES = @as(c_int, 0);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_OES = @as(c_int, 0x0506);
pub const GL_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_FRAMEBUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_RENDERBUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_STENCIL_INDEX1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_RGB565_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hexadecimal);
pub const glBindFramebufferOES = GLEW_GET_FUN(__glewBindFramebufferOES);
pub const glBindRenderbufferOES = GLEW_GET_FUN(__glewBindRenderbufferOES);
pub const glCheckFramebufferStatusOES = GLEW_GET_FUN(__glewCheckFramebufferStatusOES);
pub const glDeleteFramebuffersOES = GLEW_GET_FUN(__glewDeleteFramebuffersOES);
pub const glDeleteRenderbuffersOES = GLEW_GET_FUN(__glewDeleteRenderbuffersOES);
pub const glFramebufferRenderbufferOES = GLEW_GET_FUN(__glewFramebufferRenderbufferOES);
pub const glFramebufferTexture2DOES = GLEW_GET_FUN(__glewFramebufferTexture2DOES);
pub const glGenFramebuffersOES = GLEW_GET_FUN(__glewGenFramebuffersOES);
pub const glGenRenderbuffersOES = GLEW_GET_FUN(__glewGenRenderbuffersOES);
pub const glGenerateMipmapOES = GLEW_GET_FUN(__glewGenerateMipmapOES);
pub const glGetFramebufferAttachmentParameterivOES = GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivOES);
pub const glGetRenderbufferParameterivOES = GLEW_GET_FUN(__glewGetRenderbufferParameterivOES);
pub const glIsFramebufferOES = GLEW_GET_FUN(__glewIsFramebufferOES);
pub const glIsRenderbufferOES = GLEW_GET_FUN(__glewIsRenderbufferOES);
pub const glRenderbufferStorageOES = GLEW_GET_FUN(__glewRenderbufferStorageOES);
pub const GLEW_OES_framebuffer_object = GLEW_GET_VAR(__GLEW_OES_framebuffer_object);
pub const GL_OES_geometry_point_size = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_BIT_OES = @as(c_int, 0x00000004);
pub const GL_LINES_ADJACENCY_OES = @as(c_int, 0xA);
pub const GL_LINE_STRIP_ADJACENCY_OES = @as(c_int, 0xB);
pub const GL_TRIANGLES_ADJACENCY_OES = @as(c_int, 0xC);
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES = @as(c_int, 0xD);
pub const GL_LAYER_PROVOKING_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_UNDEFINED_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GLEW_OES_geometry_point_size = GLEW_GET_VAR(__GLEW_OES_geometry_point_size);
pub const GL_OES_geometry_shader = @as(c_int, 1);
pub const GLEW_OES_geometry_shader = GLEW_GET_VAR(__GLEW_OES_geometry_shader);
pub const GL_OES_get_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_LENGTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hexadecimal);
pub const glGetProgramBinaryOES = GLEW_GET_FUN(__glewGetProgramBinaryOES);
pub const glProgramBinaryOES = GLEW_GET_FUN(__glewProgramBinaryOES);
pub const GLEW_OES_get_program_binary = GLEW_GET_VAR(__GLEW_OES_get_program_binary);
pub const GL_OES_gpu_shader5 = @as(c_int, 1);
pub const GLEW_OES_gpu_shader5 = GLEW_GET_VAR(__GLEW_OES_gpu_shader5);
pub const GL_OES_mapbuffer = @as(c_int, 1);
pub const GL_WRITE_ONLY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_BUFFER_ACCESS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_MAPPED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const glGetBufferPointervOES = GLEW_GET_FUN(__glewGetBufferPointervOES);
pub const glMapBufferOES = GLEW_GET_FUN(__glewMapBufferOES);
pub const glUnmapBufferOES = GLEW_GET_FUN(__glewUnmapBufferOES);
pub const GLEW_OES_mapbuffer = GLEW_GET_VAR(__GLEW_OES_mapbuffer);
pub const GL_OES_matrix_get = @as(c_int, 1);
pub const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898d, .hexadecimal);
pub const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898e, .hexadecimal);
pub const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898f, .hexadecimal);
pub const GLEW_OES_matrix_get = GLEW_GET_VAR(__GLEW_OES_matrix_get);
pub const GL_OES_matrix_palette = @as(c_int, 1);
pub const GL_MAX_VERTEX_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hexadecimal);
pub const GL_WEIGHT_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hexadecimal);
pub const GL_WEIGHT_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hexadecimal);
pub const GL_WEIGHT_ARRAY_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hexadecimal);
pub const GL_WEIGHT_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hexadecimal);
pub const GL_WEIGHT_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hexadecimal);
pub const GL_MATRIX_PALETTE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hexadecimal);
pub const GL_MAX_PALETTE_MATRICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hexadecimal);
pub const GL_CURRENT_PALETTE_MATRIX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9E, .hexadecimal);
pub const glCurrentPaletteMatrixOES = GLEW_GET_FUN(__glewCurrentPaletteMatrixOES);
pub const glMatrixIndexPointerOES = GLEW_GET_FUN(__glewMatrixIndexPointerOES);
pub const glWeightPointerOES = GLEW_GET_FUN(__glewWeightPointerOES);
pub const GLEW_OES_matrix_palette = GLEW_GET_VAR(__GLEW_OES_matrix_palette);
pub const GL_OES_packed_depth_stencil = @as(c_int, 1);
pub const GL_UNSIGNED_INT_24_8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GLEW_OES_packed_depth_stencil = GLEW_GET_VAR(__GLEW_OES_packed_depth_stencil);
pub const GL_OES_point_size_array = @as(c_int, 1);
pub const GL_POINT_SIZE_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898A, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898B, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898C, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9C, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9F, .hexadecimal);
pub const GLEW_OES_point_size_array = GLEW_GET_VAR(__GLEW_OES_point_size_array);
pub const GL_OES_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_COORD_REPLACE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GLEW_OES_point_sprite = GLEW_GET_VAR(__GLEW_OES_point_sprite);
pub const GL_OES_read_format = @as(c_int, 1);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const GLEW_OES_read_format = GLEW_GET_VAR(__GLEW_OES_read_format);
pub const GL_OES_required_internalformat = @as(c_int, 1);
pub const GL_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_LUMINANCE8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GLEW_OES_required_internalformat = GLEW_GET_VAR(__GLEW_OES_required_internalformat);
pub const GL_OES_rgb8_rgba8 = @as(c_int, 1);
pub const GLEW_OES_rgb8_rgba8 = GLEW_GET_VAR(__GLEW_OES_rgb8_rgba8);
pub const GL_OES_sample_shading = @as(c_int, 1);
pub const GL_SAMPLE_SHADING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const glMinSampleShadingOES = GLEW_GET_FUN(__glewMinSampleShadingOES);
pub const GLEW_OES_sample_shading = GLEW_GET_VAR(__GLEW_OES_sample_shading);
pub const GL_OES_sample_variables = @as(c_int, 1);
pub const GLEW_OES_sample_variables = GLEW_GET_VAR(__GLEW_OES_sample_variables);
pub const GL_OES_shader_image_atomic = @as(c_int, 1);
pub const GLEW_OES_shader_image_atomic = GLEW_GET_VAR(__GLEW_OES_shader_image_atomic);
pub const GL_OES_shader_io_blocks = @as(c_int, 1);
pub const GLEW_OES_shader_io_blocks = GLEW_GET_VAR(__GLEW_OES_shader_io_blocks);
pub const GL_OES_shader_multisample_interpolation = @as(c_int, 1);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GLEW_OES_shader_multisample_interpolation = GLEW_GET_VAR(__GLEW_OES_shader_multisample_interpolation);
pub const GL_OES_single_precision = @as(c_int, 1);
pub const glClearDepthfOES = GLEW_GET_FUN(__glewClearDepthfOES);
pub const glClipPlanefOES = GLEW_GET_FUN(__glewClipPlanefOES);
pub const glDepthRangefOES = GLEW_GET_FUN(__glewDepthRangefOES);
pub const glFrustumfOES = GLEW_GET_FUN(__glewFrustumfOES);
pub const glGetClipPlanefOES = GLEW_GET_FUN(__glewGetClipPlanefOES);
pub const glOrthofOES = GLEW_GET_FUN(__glewOrthofOES);
pub const GLEW_OES_single_precision = GLEW_GET_VAR(__GLEW_OES_single_precision);
pub const GL_OES_standard_derivatives = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GLEW_OES_standard_derivatives = GLEW_GET_VAR(__GLEW_OES_standard_derivatives);
pub const GL_OES_stencil1 = @as(c_int, 1);
pub const GLEW_OES_stencil1 = GLEW_GET_VAR(__GLEW_OES_stencil1);
pub const GL_OES_stencil4 = @as(c_int, 1);
pub const GLEW_OES_stencil4 = GLEW_GET_VAR(__GLEW_OES_stencil4);
pub const GL_OES_stencil8 = @as(c_int, 1);
pub const GLEW_OES_stencil8 = GLEW_GET_VAR(__GLEW_OES_stencil8);
pub const GL_OES_surfaceless_context = @as(c_int, 1);
pub const GL_FRAMEBUFFER_UNDEFINED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hexadecimal);
pub const GLEW_OES_surfaceless_context = GLEW_GET_VAR(__GLEW_OES_surfaceless_context);
pub const GL_OES_tessellation_point_size = @as(c_int, 1);
pub const GL_QUADS_OES = @as(c_int, 0x0007);
pub const GL_TESS_CONTROL_SHADER_BIT_OES = @as(c_int, 0x00000008);
pub const GL_PATCHES_OES = @as(c_int, 0xE);
pub const GL_TESS_EVALUATION_SHADER_BIT_OES = @as(c_int, 0x00000010);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_GEN_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_SPACING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_ISOLINES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_FRACTIONAL_ODD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRACTIONAL_EVEN_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_IS_PER_PATCH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const GLEW_OES_tessellation_point_size = GLEW_GET_VAR(__GLEW_OES_tessellation_point_size);
pub const GL_OES_tessellation_shader = @as(c_int, 1);
pub const GLEW_OES_tessellation_shader = GLEW_GET_VAR(__GLEW_OES_tessellation_shader);
pub const GL_OES_texture_3D = @as(c_int, 1);
pub const GL_TEXTURE_BINDING_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_TEXTURE_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_TEXTURE_WRAP_R_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const glCompressedTexImage3DOES = GLEW_GET_FUN(__glewCompressedTexImage3DOES);
pub const glCompressedTexSubImage3DOES = GLEW_GET_FUN(__glewCompressedTexSubImage3DOES);
pub const glCopyTexSubImage3DOES = GLEW_GET_FUN(__glewCopyTexSubImage3DOES);
pub const glFramebufferTexture3DOES = GLEW_GET_FUN(__glewFramebufferTexture3DOES);
pub const glTexImage3DOES = GLEW_GET_FUN(__glewTexImage3DOES);
pub const glTexSubImage3DOES = GLEW_GET_FUN(__glewTexSubImage3DOES);
pub const GLEW_OES_texture_3D = GLEW_GET_VAR(__GLEW_OES_texture_3D);
pub const GL_OES_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_OES = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const glGetSamplerParameterIivOES = GLEW_GET_FUN(__glewGetSamplerParameterIivOES);
pub const glGetSamplerParameterIuivOES = GLEW_GET_FUN(__glewGetSamplerParameterIuivOES);
pub const glGetTexParameterIivOES = GLEW_GET_FUN(__glewGetTexParameterIivOES);
pub const glGetTexParameterIuivOES = GLEW_GET_FUN(__glewGetTexParameterIuivOES);
pub const glSamplerParameterIivOES = GLEW_GET_FUN(__glewSamplerParameterIivOES);
pub const glSamplerParameterIuivOES = GLEW_GET_FUN(__glewSamplerParameterIuivOES);
pub const glTexParameterIivOES = GLEW_GET_FUN(__glewTexParameterIivOES);
pub const glTexParameterIuivOES = GLEW_GET_FUN(__glewTexParameterIuivOES);
pub const GLEW_OES_texture_border_clamp = GLEW_GET_VAR(__GLEW_OES_texture_border_clamp);
pub const GL_OES_texture_buffer = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const glTexBufferOES = GLEW_GET_FUN(__glewTexBufferOES);
pub const glTexBufferRangeOES = GLEW_GET_FUN(__glewTexBufferRangeOES);
pub const GLEW_OES_texture_buffer = GLEW_GET_VAR(__GLEW_OES_texture_buffer);
pub const GL_OES_texture_compression_astc = @as(c_int, 1);
pub const GLEW_OES_texture_compression_astc = GLEW_GET_VAR(__GLEW_OES_texture_compression_astc);
pub const GL_OES_texture_cube_map = @as(c_int, 1);
pub const GL_TEXTURE_GEN_MODE_OES = @as(c_int, 0x2500);
pub const GL_NORMAL_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_TEXTURE_GEN_STR_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D60, .hexadecimal);
pub const glGetTexGenfvOES = GLEW_GET_FUN(__glewGetTexGenfvOES);
pub const glGetTexGenivOES = GLEW_GET_FUN(__glewGetTexGenivOES);
pub const glGetTexGenxvOES = GLEW_GET_FUN(__glewGetTexGenxvOES);
pub const glTexGenfOES = GLEW_GET_FUN(__glewTexGenfOES);
pub const glTexGenfvOES = GLEW_GET_FUN(__glewTexGenfvOES);
pub const glTexGeniOES = GLEW_GET_FUN(__glewTexGeniOES);
pub const glTexGenivOES = GLEW_GET_FUN(__glewTexGenivOES);
pub const glTexGenxOES = GLEW_GET_FUN(__glewTexGenxOES);
pub const glTexGenxvOES = GLEW_GET_FUN(__glewTexGenxvOES);
pub const GLEW_OES_texture_cube_map = GLEW_GET_VAR(__GLEW_OES_texture_cube_map);
pub const GL_OES_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GLEW_OES_texture_cube_map_array = GLEW_GET_VAR(__GLEW_OES_texture_cube_map_array);
pub const GL_OES_texture_env_crossbar = @as(c_int, 1);
pub const GLEW_OES_texture_env_crossbar = GLEW_GET_VAR(__GLEW_OES_texture_env_crossbar);
pub const GL_OES_texture_mirrored_repeat = @as(c_int, 1);
pub const GLEW_OES_texture_mirrored_repeat = GLEW_GET_VAR(__GLEW_OES_texture_mirrored_repeat);
pub const GL_OES_texture_npot = @as(c_int, 1);
pub const GLEW_OES_texture_npot = GLEW_GET_VAR(__GLEW_OES_texture_npot);
pub const GL_OES_texture_stencil8 = @as(c_int, 1);
pub const GLEW_OES_texture_stencil8 = GLEW_GET_VAR(__GLEW_OES_texture_stencil8);
pub const GL_OES_texture_storage_multisample_2d_array = @as(c_int, 1);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hexadecimal);
pub const glTexStorage3DMultisampleOES = GLEW_GET_FUN(__glewTexStorage3DMultisampleOES);
pub const GLEW_OES_texture_storage_multisample_2d_array = GLEW_GET_VAR(__GLEW_OES_texture_storage_multisample_2d_array);
pub const GL_OES_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const glTextureViewOES = GLEW_GET_FUN(__glewTextureViewOES);
pub const GLEW_OES_texture_view = GLEW_GET_VAR(__GLEW_OES_texture_view);
pub const GL_OES_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const glBindVertexArrayOES = GLEW_GET_FUN(__glewBindVertexArrayOES);
pub const glDeleteVertexArraysOES = GLEW_GET_FUN(__glewDeleteVertexArraysOES);
pub const glGenVertexArraysOES = GLEW_GET_FUN(__glewGenVertexArraysOES);
pub const glIsVertexArrayOES = GLEW_GET_FUN(__glewIsVertexArrayOES);
pub const GLEW_OES_vertex_array_object = GLEW_GET_VAR(__GLEW_OES_vertex_array_object);
pub const GL_OES_vertex_half_float = @as(c_int, 1);
pub const GL_HALF_FLOAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D61, .hexadecimal);
pub const GLEW_OES_vertex_half_float = GLEW_GET_VAR(__GLEW_OES_vertex_half_float);
pub const GL_OES_vertex_type_10_10_10_2 = @as(c_int, 1);
pub const GL_UNSIGNED_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF6, .hexadecimal);
pub const GL_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF7, .hexadecimal);
pub const GLEW_OES_vertex_type_10_10_10_2 = GLEW_GET_VAR(__GLEW_OES_vertex_type_10_10_10_2);
pub const GL_OML_interlace = @as(c_int, 1);
pub const GL_INTERLACE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8980, .hexadecimal);
pub const GL_INTERLACE_READ_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8981, .hexadecimal);
pub const GLEW_OML_interlace = GLEW_GET_VAR(__GLEW_OML_interlace);
pub const GL_OML_resample = @as(c_int, 1);
pub const GL_PACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8984, .hexadecimal);
pub const GL_UNPACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8985, .hexadecimal);
pub const GL_RESAMPLE_REPLICATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8986, .hexadecimal);
pub const GL_RESAMPLE_ZERO_FILL_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8987, .hexadecimal);
pub const GL_RESAMPLE_AVERAGE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8988, .hexadecimal);
pub const GL_RESAMPLE_DECIMATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8989, .hexadecimal);
pub const GLEW_OML_resample = GLEW_GET_VAR(__GLEW_OML_resample);
pub const GL_OML_subsample = @as(c_int, 1);
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8982, .hexadecimal);
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8983, .hexadecimal);
pub const GLEW_OML_subsample = GLEW_GET_VAR(__GLEW_OML_subsample);
pub const GL_OVR_multiview = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9630, .hexadecimal);
pub const GL_MAX_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9631, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9632, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9633, .hexadecimal);
pub const glFramebufferTextureMultiviewOVR = GLEW_GET_FUN(__glewFramebufferTextureMultiviewOVR);
pub const glNamedFramebufferTextureMultiviewOVR = GLEW_GET_FUN(__glewNamedFramebufferTextureMultiviewOVR);
pub const GLEW_OVR_multiview = GLEW_GET_VAR(__GLEW_OVR_multiview);
pub const GL_OVR_multiview2 = @as(c_int, 1);
pub const GLEW_OVR_multiview2 = GLEW_GET_VAR(__GLEW_OVR_multiview2);
pub const GL_OVR_multiview_multisampled_render_to_texture = @as(c_int, 1);
pub const glFramebufferTextureMultisampleMultiviewOVR = GLEW_GET_FUN(__glewFramebufferTextureMultisampleMultiviewOVR);
pub const GLEW_OVR_multiview_multisampled_render_to_texture = GLEW_GET_VAR(__GLEW_OVR_multiview_multisampled_render_to_texture);
pub const GL_PGI_misc_hints = @as(c_int, 1);
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107000, .decimal);
pub const GL_CONSERVE_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107005, .decimal);
pub const GL_RECLAIM_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107006, .decimal);
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107010, .decimal);
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107011, .decimal);
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107012, .decimal);
pub const GL_ALWAYS_FAST_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107020, .decimal);
pub const GL_ALWAYS_SOFT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107021, .decimal);
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107022, .decimal);
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107023, .decimal);
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107024, .decimal);
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107025, .decimal);
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107030, .decimal);
pub const GL_STRICT_LIGHTING_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107031, .decimal);
pub const GL_STRICT_SCISSOR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107032, .decimal);
pub const GL_FULL_STIPPLE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107033, .decimal);
pub const GL_CLIP_NEAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107040, .decimal);
pub const GL_CLIP_FAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107041, .decimal);
pub const GL_WIDE_LINE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107042, .decimal);
pub const GL_BACK_NORMALS_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107043, .decimal);
pub const GLEW_PGI_misc_hints = GLEW_GET_VAR(__GLEW_PGI_misc_hints);
pub const GL_PGI_vertex_hints = @as(c_int, 1);
pub const GL_VERTEX23_BIT_PGI = @as(c_int, 0x00000004);
pub const GL_VERTEX4_BIT_PGI = @as(c_int, 0x00000008);
pub const GL_COLOR3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_COLOR4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_EDGEFLAG_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_INDEX_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_MAT_AMBIENT_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_VERTEX_DATA_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107050, .decimal);
pub const GL_VERTEX_CONSISTENT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107051, .decimal);
pub const GL_MATERIAL_SIDE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107052, .decimal);
pub const GL_MAX_VERTEX_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 107053, .decimal);
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_MAT_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_MAT_EMISSION_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_MAT_SHININESS_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_MAT_SPECULAR_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_NORMAL_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_TEXCOORD1_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_TEXCOORD2_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_TEXCOORD3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const GL_TEXCOORD4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const GLEW_PGI_vertex_hints = GLEW_GET_VAR(__GLEW_PGI_vertex_hints);
pub const GL_QCOM_YUV_texture_gather = @as(c_int, 1);
pub const GLEW_QCOM_YUV_texture_gather = GLEW_GET_VAR(__GLEW_QCOM_YUV_texture_gather);
pub const GL_QCOM_alpha_test = @as(c_int, 1);
pub const GL_ALPHA_TEST_QCOM = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC_QCOM = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF_QCOM = @as(c_int, 0x0BC2);
pub const glAlphaFuncQCOM = GLEW_GET_FUN(__glewAlphaFuncQCOM);
pub const GLEW_QCOM_alpha_test = GLEW_GET_VAR(__GLEW_QCOM_alpha_test);
pub const GL_QCOM_binning_control = @as(c_int, 1);
pub const GL_BINNING_CONTROL_HINT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB0, .hexadecimal);
pub const GL_CPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB1, .hexadecimal);
pub const GL_GPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB2, .hexadecimal);
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB3, .hexadecimal);
pub const GLEW_QCOM_binning_control = GLEW_GET_VAR(__GLEW_QCOM_binning_control);
pub const GL_QCOM_driver_control = @as(c_int, 1);
pub const glDisableDriverControlQCOM = GLEW_GET_FUN(__glewDisableDriverControlQCOM);
pub const glEnableDriverControlQCOM = GLEW_GET_FUN(__glewEnableDriverControlQCOM);
pub const glGetDriverControlStringQCOM = GLEW_GET_FUN(__glewGetDriverControlStringQCOM);
pub const glGetDriverControlsQCOM = GLEW_GET_FUN(__glewGetDriverControlsQCOM);
pub const GLEW_QCOM_driver_control = GLEW_GET_VAR(__GLEW_QCOM_driver_control);
pub const GL_QCOM_extended_get = @as(c_int, 1);
pub const GL_TEXTURE_WIDTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD2, .hexadecimal);
pub const GL_TEXTURE_HEIGHT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD3, .hexadecimal);
pub const GL_TEXTURE_DEPTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD4, .hexadecimal);
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD5, .hexadecimal);
pub const GL_TEXTURE_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD6, .hexadecimal);
pub const GL_TEXTURE_TYPE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD7, .hexadecimal);
pub const GL_TEXTURE_IMAGE_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD8, .hexadecimal);
pub const GL_TEXTURE_NUM_LEVELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD9, .hexadecimal);
pub const GL_TEXTURE_TARGET_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDA, .hexadecimal);
pub const GL_TEXTURE_OBJECT_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDB, .hexadecimal);
pub const GL_STATE_RESTORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDC, .hexadecimal);
pub const glExtGetBufferPointervQCOM = GLEW_GET_FUN(__glewExtGetBufferPointervQCOM);
pub const glExtGetBuffersQCOM = GLEW_GET_FUN(__glewExtGetBuffersQCOM);
pub const glExtGetFramebuffersQCOM = GLEW_GET_FUN(__glewExtGetFramebuffersQCOM);
pub const glExtGetRenderbuffersQCOM = GLEW_GET_FUN(__glewExtGetRenderbuffersQCOM);
pub const glExtGetTexLevelParameterivQCOM = GLEW_GET_FUN(__glewExtGetTexLevelParameterivQCOM);
pub const glExtGetTexSubImageQCOM = GLEW_GET_FUN(__glewExtGetTexSubImageQCOM);
pub const glExtGetTexturesQCOM = GLEW_GET_FUN(__glewExtGetTexturesQCOM);
pub const glExtTexObjectStateOverrideiQCOM = GLEW_GET_FUN(__glewExtTexObjectStateOverrideiQCOM);
pub const GLEW_QCOM_extended_get = GLEW_GET_VAR(__GLEW_QCOM_extended_get);
pub const GL_QCOM_extended_get2 = @as(c_int, 1);
pub const glExtGetProgramBinarySourceQCOM = GLEW_GET_FUN(__glewExtGetProgramBinarySourceQCOM);
pub const glExtGetProgramsQCOM = GLEW_GET_FUN(__glewExtGetProgramsQCOM);
pub const glExtGetShadersQCOM = GLEW_GET_FUN(__glewExtGetShadersQCOM);
pub const glExtIsProgramBinaryQCOM = GLEW_GET_FUN(__glewExtIsProgramBinaryQCOM);
pub const GLEW_QCOM_extended_get2 = GLEW_GET_VAR(__GLEW_QCOM_extended_get2);
pub const GL_QCOM_framebuffer_foveated = @as(c_int, 1);
pub const GL_FOVEATION_ENABLE_BIT_QCOM = @as(c_int, 0x1);
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = @as(c_int, 0x2);
pub const glFramebufferFoveationConfigQCOM = GLEW_GET_FUN(__glewFramebufferFoveationConfigQCOM);
pub const glFramebufferFoveationParametersQCOM = GLEW_GET_FUN(__glewFramebufferFoveationParametersQCOM);
pub const GLEW_QCOM_framebuffer_foveated = GLEW_GET_VAR(__GLEW_QCOM_framebuffer_foveated);
pub const GL_QCOM_perfmon_global_mode = @as(c_int, 1);
pub const GL_PERFMON_GLOBAL_MODE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA0, .hexadecimal);
pub const GLEW_QCOM_perfmon_global_mode = GLEW_GET_VAR(__GLEW_QCOM_perfmon_global_mode);
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A2, .hexadecimal);
pub const glFramebufferFetchBarrierQCOM = GLEW_GET_FUN(__glewFramebufferFetchBarrierQCOM);
pub const GLEW_QCOM_shader_framebuffer_fetch_noncoherent = GLEW_GET_VAR(__GLEW_QCOM_shader_framebuffer_fetch_noncoherent);
pub const GL_QCOM_shader_framebuffer_fetch_rate = @as(c_int, 1);
pub const GLEW_QCOM_shader_framebuffer_fetch_rate = GLEW_GET_VAR(__GLEW_QCOM_shader_framebuffer_fetch_rate);
pub const GL_QCOM_texture_foveated = @as(c_int, 1);
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFB, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFC, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFD, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFE, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFF, .hexadecimal);
pub const glTextureFoveationParametersQCOM = GLEW_GET_FUN(__glewTextureFoveationParametersQCOM);
pub const GLEW_QCOM_texture_foveated = GLEW_GET_VAR(__GLEW_QCOM_texture_foveated);
pub const GL_QCOM_texture_foveated_subsampled_layout = @as(c_int, 1);
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = @as(c_int, 0x4);
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA1, .hexadecimal);
pub const GLEW_QCOM_texture_foveated_subsampled_layout = GLEW_GET_VAR(__GLEW_QCOM_texture_foveated_subsampled_layout);
pub const GL_QCOM_tiled_rendering = @as(c_int, 1);
pub const GL_COLOR_BUFFER_BIT0_QCOM = @as(c_int, 0x00000001);
pub const GL_COLOR_BUFFER_BIT1_QCOM = @as(c_int, 0x00000002);
pub const GL_COLOR_BUFFER_BIT2_QCOM = @as(c_int, 0x00000004);
pub const GL_COLOR_BUFFER_BIT3_QCOM = @as(c_int, 0x00000008);
pub const GL_COLOR_BUFFER_BIT4_QCOM = @as(c_int, 0x00000010);
pub const GL_COLOR_BUFFER_BIT5_QCOM = @as(c_int, 0x00000020);
pub const GL_COLOR_BUFFER_BIT6_QCOM = @as(c_int, 0x00000040);
pub const GL_COLOR_BUFFER_BIT7_QCOM = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT0_QCOM = @as(c_int, 0x00000100);
pub const GL_DEPTH_BUFFER_BIT1_QCOM = @as(c_int, 0x00000200);
pub const GL_DEPTH_BUFFER_BIT2_QCOM = @as(c_int, 0x00000400);
pub const GL_DEPTH_BUFFER_BIT3_QCOM = @as(c_int, 0x00000800);
pub const GL_DEPTH_BUFFER_BIT4_QCOM = @as(c_int, 0x00001000);
pub const GL_DEPTH_BUFFER_BIT5_QCOM = @as(c_int, 0x00002000);
pub const GL_DEPTH_BUFFER_BIT6_QCOM = @as(c_int, 0x00004000);
pub const GL_DEPTH_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const glEndTilingQCOM = GLEW_GET_FUN(__glewEndTilingQCOM);
pub const glStartTilingQCOM = GLEW_GET_FUN(__glewStartTilingQCOM);
pub const GLEW_QCOM_tiled_rendering = GLEW_GET_VAR(__GLEW_QCOM_tiled_rendering);
pub const GL_QCOM_writeonly_rendering = @as(c_int, 1);
pub const GL_WRITEONLY_RENDERING_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8823, .hexadecimal);
pub const GLEW_QCOM_writeonly_rendering = GLEW_GET_VAR(__GLEW_QCOM_writeonly_rendering);
pub const GL_REGAL_ES1_0_compatibility = @as(c_int, 1);
pub const glAlphaFuncx = GLEW_GET_FUN(__glewAlphaFuncx);
pub const glClearColorx = GLEW_GET_FUN(__glewClearColorx);
pub const glClearDepthx = GLEW_GET_FUN(__glewClearDepthx);
pub const glColor4x = GLEW_GET_FUN(__glewColor4x);
pub const glDepthRangex = GLEW_GET_FUN(__glewDepthRangex);
pub const glFogx = GLEW_GET_FUN(__glewFogx);
pub const glFogxv = GLEW_GET_FUN(__glewFogxv);
pub const glFrustumf = GLEW_GET_FUN(__glewFrustumf);
pub const glFrustumx = GLEW_GET_FUN(__glewFrustumx);
pub const glLightModelx = GLEW_GET_FUN(__glewLightModelx);
pub const glLightModelxv = GLEW_GET_FUN(__glewLightModelxv);
pub const glLightx = GLEW_GET_FUN(__glewLightx);
pub const glLightxv = GLEW_GET_FUN(__glewLightxv);
pub const glLineWidthx = GLEW_GET_FUN(__glewLineWidthx);
pub const glLoadMatrixx = GLEW_GET_FUN(__glewLoadMatrixx);
pub const glMaterialx = GLEW_GET_FUN(__glewMaterialx);
pub const glMaterialxv = GLEW_GET_FUN(__glewMaterialxv);
pub const glMultMatrixx = GLEW_GET_FUN(__glewMultMatrixx);
pub const glMultiTexCoord4x = GLEW_GET_FUN(__glewMultiTexCoord4x);
pub const glNormal3x = GLEW_GET_FUN(__glewNormal3x);
pub const glOrthof = GLEW_GET_FUN(__glewOrthof);
pub const glOrthox = GLEW_GET_FUN(__glewOrthox);
pub const glPointSizex = GLEW_GET_FUN(__glewPointSizex);
pub const glPolygonOffsetx = GLEW_GET_FUN(__glewPolygonOffsetx);
pub const glRotatex = GLEW_GET_FUN(__glewRotatex);
pub const glSampleCoveragex = GLEW_GET_FUN(__glewSampleCoveragex);
pub const glScalex = GLEW_GET_FUN(__glewScalex);
pub const glTexEnvx = GLEW_GET_FUN(__glewTexEnvx);
pub const glTexEnvxv = GLEW_GET_FUN(__glewTexEnvxv);
pub const glTexParameterx = GLEW_GET_FUN(__glewTexParameterx);
pub const glTranslatex = GLEW_GET_FUN(__glewTranslatex);
pub const GLEW_REGAL_ES1_0_compatibility = GLEW_GET_VAR(__GLEW_REGAL_ES1_0_compatibility);
pub const GL_REGAL_ES1_1_compatibility = @as(c_int, 1);
pub const glClipPlanef = GLEW_GET_FUN(__glewClipPlanef);
pub const glClipPlanex = GLEW_GET_FUN(__glewClipPlanex);
pub const glGetClipPlanef = GLEW_GET_FUN(__glewGetClipPlanef);
pub const glGetClipPlanex = GLEW_GET_FUN(__glewGetClipPlanex);
pub const glGetFixedv = GLEW_GET_FUN(__glewGetFixedv);
pub const glGetLightxv = GLEW_GET_FUN(__glewGetLightxv);
pub const glGetMaterialxv = GLEW_GET_FUN(__glewGetMaterialxv);
pub const glGetTexEnvxv = GLEW_GET_FUN(__glewGetTexEnvxv);
pub const glGetTexParameterxv = GLEW_GET_FUN(__glewGetTexParameterxv);
pub const glPointParameterx = GLEW_GET_FUN(__glewPointParameterx);
pub const glPointParameterxv = GLEW_GET_FUN(__glewPointParameterxv);
pub const glPointSizePointerOES = GLEW_GET_FUN(__glewPointSizePointerOES);
pub const glTexParameterxv = GLEW_GET_FUN(__glewTexParameterxv);
pub const GLEW_REGAL_ES1_1_compatibility = GLEW_GET_VAR(__GLEW_REGAL_ES1_1_compatibility);
pub const GL_REGAL_enable = @as(c_int, 1);
pub const GL_ERROR_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9322, .hexadecimal);
pub const GL_DEBUG_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9323, .hexadecimal);
pub const GL_LOG_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9324, .hexadecimal);
pub const GL_EMULATION_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9325, .hexadecimal);
pub const GL_DRIVER_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9326, .hexadecimal);
pub const GL_MISSING_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9360, .hexadecimal);
pub const GL_TRACE_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9361, .hexadecimal);
pub const GL_CACHE_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9362, .hexadecimal);
pub const GL_CODE_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9363, .hexadecimal);
pub const GL_STATISTICS_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9364, .hexadecimal);
pub const GLEW_REGAL_enable = GLEW_GET_VAR(__GLEW_REGAL_enable);
pub const GL_REGAL_error_string = @as(c_int, 1);
pub const glErrorStringREGAL = GLEW_GET_FUN(__glewErrorStringREGAL);
pub const GLEW_REGAL_error_string = GLEW_GET_VAR(__GLEW_REGAL_error_string);
pub const GL_REGAL_extension_query = @as(c_int, 1);
pub const glGetExtensionREGAL = GLEW_GET_FUN(__glewGetExtensionREGAL);
pub const glIsSupportedREGAL = GLEW_GET_FUN(__glewIsSupportedREGAL);
pub const GLEW_REGAL_extension_query = GLEW_GET_VAR(__GLEW_REGAL_extension_query);
pub const GL_REGAL_log = @as(c_int, 1);
pub const GL_LOG_ERROR_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9319, .hexadecimal);
pub const GL_LOG_WARNING_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931A, .hexadecimal);
pub const GL_LOG_INFO_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931B, .hexadecimal);
pub const GL_LOG_APP_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931C, .hexadecimal);
pub const GL_LOG_DRIVER_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931D, .hexadecimal);
pub const GL_LOG_INTERNAL_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931E, .hexadecimal);
pub const GL_LOG_DEBUG_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x931F, .hexadecimal);
pub const GL_LOG_STATUS_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9320, .hexadecimal);
pub const GL_LOG_HTTP_REGAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9321, .hexadecimal);
pub const glLogMessageCallbackREGAL = GLEW_GET_FUN(__glewLogMessageCallbackREGAL);
pub const GLEW_REGAL_log = GLEW_GET_VAR(__GLEW_REGAL_log);
pub const GL_REGAL_proc_address = @as(c_int, 1);
pub const glGetProcAddressREGAL = GLEW_GET_FUN(__glewGetProcAddressREGAL);
pub const GLEW_REGAL_proc_address = GLEW_GET_VAR(__GLEW_REGAL_proc_address);
pub const GL_REND_screen_coordinates = @as(c_int, 1);
pub const GL_SCREEN_COORDINATES_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8490, .hexadecimal);
pub const GL_INVERTED_SCREEN_W_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8491, .hexadecimal);
pub const GLEW_REND_screen_coordinates = GLEW_GET_VAR(__GLEW_REND_screen_coordinates);
pub const GL_S3_s3tc = @as(c_int, 1);
pub const GL_RGB_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A0, .hexadecimal);
pub const GL_RGB4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A1, .hexadecimal);
pub const GL_RGBA_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A2, .hexadecimal);
pub const GL_RGBA4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A3, .hexadecimal);
pub const GL_RGBA_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A4, .hexadecimal);
pub const GL_RGBA4_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A5, .hexadecimal);
pub const GLEW_S3_s3tc = GLEW_GET_VAR(__GLEW_S3_s3tc);
pub const GL_SGIS_clip_band_hint = @as(c_int, 1);
pub const GLEW_SGIS_clip_band_hint = GLEW_GET_VAR(__GLEW_SGIS_clip_band_hint);
pub const GL_SGIS_color_range = @as(c_int, 1);
pub const GL_EXTENDED_RANGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A5, .hexadecimal);
pub const GL_MIN_RED_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A6, .hexadecimal);
pub const GL_MAX_RED_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A7, .hexadecimal);
pub const GL_MIN_GREEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A8, .hexadecimal);
pub const GL_MAX_GREEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A9, .hexadecimal);
pub const GL_MIN_BLUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AA, .hexadecimal);
pub const GL_MAX_BLUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AB, .hexadecimal);
pub const GL_MIN_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AC, .hexadecimal);
pub const GL_MAX_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AD, .hexadecimal);
pub const GLEW_SGIS_color_range = GLEW_GET_VAR(__GLEW_SGIS_color_range);
pub const GL_SGIS_detail_texture = @as(c_int, 1);
pub const glDetailTexFuncSGIS = GLEW_GET_FUN(__glewDetailTexFuncSGIS);
pub const glGetDetailTexFuncSGIS = GLEW_GET_FUN(__glewGetDetailTexFuncSGIS);
pub const GLEW_SGIS_detail_texture = GLEW_GET_VAR(__GLEW_SGIS_detail_texture);
pub const GL_SGIS_fog_function = @as(c_int, 1);
pub const glFogFuncSGIS = GLEW_GET_FUN(__glewFogFuncSGIS);
pub const glGetFogFuncSGIS = GLEW_GET_FUN(__glewGetFogFuncSGIS);
pub const GLEW_SGIS_fog_function = GLEW_GET_VAR(__GLEW_SGIS_fog_function);
pub const GL_SGIS_generate_mipmap = @as(c_int, 1);
pub const GL_GENERATE_MIPMAP_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GL_GENERATE_MIPMAP_HINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const GLEW_SGIS_generate_mipmap = GLEW_GET_VAR(__GLEW_SGIS_generate_mipmap);
pub const GL_SGIS_line_texgen = @as(c_int, 1);
pub const GLEW_SGIS_line_texgen = GLEW_GET_VAR(__GLEW_SGIS_line_texgen);
pub const GL_SGIS_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_1PASS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hexadecimal);
pub const GL_2PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hexadecimal);
pub const GL_2PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hexadecimal);
pub const GL_4PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hexadecimal);
pub const GL_4PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hexadecimal);
pub const GL_4PASS_2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hexadecimal);
pub const GL_4PASS_3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_MASK_INVERT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_PATTERN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hexadecimal);
pub const glSampleMaskSGIS = GLEW_GET_FUN(__glewSampleMaskSGIS);
pub const glSamplePatternSGIS = GLEW_GET_FUN(__glewSamplePatternSGIS);
pub const GLEW_SGIS_multisample = GLEW_GET_VAR(__GLEW_SGIS_multisample);
pub const GL_SGIS_multitexture = @as(c_int, 1);
pub const GL_SELECTED_TEXTURE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C0, .hexadecimal);
pub const GL_SELECTED_TEXTURE_COORD_SET_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C1, .hexadecimal);
pub const GL_SELECTED_TEXTURE_TRANSFORM_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C2, .hexadecimal);
pub const GL_MAX_TEXTURES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C3, .hexadecimal);
pub const GL_MAX_TEXTURE_COORD_SETS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C4, .hexadecimal);
pub const GL_TEXTURE_COORD_SET_INTERLEAVE_FACTOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C5, .hexadecimal);
pub const GL_TEXTURE_ENV_COORD_SET_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C6, .hexadecimal);
pub const GL_TEXTURE0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C7, .hexadecimal);
pub const GL_TEXTURE1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C8, .hexadecimal);
pub const GL_TEXTURE2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83C9, .hexadecimal);
pub const GL_TEXTURE3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83CA, .hexadecimal);
pub const glInterleavedTextureCoordSetsSGIS = GLEW_GET_FUN(__glewInterleavedTextureCoordSetsSGIS);
pub const glSelectTextureCoordSetSGIS = GLEW_GET_FUN(__glewSelectTextureCoordSetSGIS);
pub const glSelectTextureSGIS = GLEW_GET_FUN(__glewSelectTextureSGIS);
pub const glSelectTextureTransformSGIS = GLEW_GET_FUN(__glewSelectTextureTransformSGIS);
pub const GLEW_SGIS_multitexture = GLEW_GET_VAR(__GLEW_SGIS_multitexture);
pub const GL_SGIS_pixel_texture = @as(c_int, 1);
pub const GLEW_SGIS_pixel_texture = GLEW_GET_VAR(__GLEW_SGIS_pixel_texture);
pub const GL_SGIS_point_line_texgen = @as(c_int, 1);
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F0, .hexadecimal);
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F1, .hexadecimal);
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F2, .hexadecimal);
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F3, .hexadecimal);
pub const GL_EYE_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F4, .hexadecimal);
pub const GL_OBJECT_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F5, .hexadecimal);
pub const GL_EYE_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F6, .hexadecimal);
pub const GL_OBJECT_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F7, .hexadecimal);
pub const GLEW_SGIS_point_line_texgen = GLEW_GET_VAR(__GLEW_SGIS_point_line_texgen);
pub const GL_SGIS_shared_multisample = @as(c_int, 1);
pub const glMultisampleSubRectPosSGIS = GLEW_GET_FUN(__glewMultisampleSubRectPosSGIS);
pub const GLEW_SGIS_shared_multisample = GLEW_GET_VAR(__GLEW_SGIS_shared_multisample);
pub const GL_SGIS_sharpen_texture = @as(c_int, 1);
pub const glGetSharpenTexFuncSGIS = GLEW_GET_FUN(__glewGetSharpenTexFuncSGIS);
pub const glSharpenTexFuncSGIS = GLEW_GET_FUN(__glewSharpenTexFuncSGIS);
pub const GLEW_SGIS_sharpen_texture = GLEW_GET_VAR(__GLEW_SGIS_sharpen_texture);
pub const GL_SGIS_texture4D = @as(c_int, 1);
pub const glTexImage4DSGIS = GLEW_GET_FUN(__glewTexImage4DSGIS);
pub const glTexSubImage4DSGIS = GLEW_GET_FUN(__glewTexSubImage4DSGIS);
pub const GLEW_SGIS_texture4D = GLEW_GET_VAR(__GLEW_SGIS_texture4D);
pub const GL_SGIS_texture_border_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_BORDER_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GLEW_SGIS_texture_border_clamp = GLEW_GET_VAR(__GLEW_SGIS_texture_border_clamp);
pub const GL_SGIS_texture_edge_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_EDGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GLEW_SGIS_texture_edge_clamp = GLEW_GET_VAR(__GLEW_SGIS_texture_edge_clamp);
pub const GL_SGIS_texture_filter4 = @as(c_int, 1);
pub const glGetTexFilterFuncSGIS = GLEW_GET_FUN(__glewGetTexFilterFuncSGIS);
pub const glTexFilterFuncSGIS = GLEW_GET_FUN(__glewTexFilterFuncSGIS);
pub const GLEW_SGIS_texture_filter4 = GLEW_GET_VAR(__GLEW_SGIS_texture_filter4);
pub const GL_SGIS_texture_lod = @as(c_int, 1);
pub const GL_TEXTURE_MIN_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GLEW_SGIS_texture_lod = GLEW_GET_VAR(__GLEW_SGIS_texture_lod);
pub const GL_SGIS_texture_select = @as(c_int, 1);
pub const GLEW_SGIS_texture_select = GLEW_GET_VAR(__GLEW_SGIS_texture_select);
pub const GL_SGIX_async = @as(c_int, 1);
pub const GL_ASYNC_MARKER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8329, .hexadecimal);
pub const glAsyncMarkerSGIX = GLEW_GET_FUN(__glewAsyncMarkerSGIX);
pub const glDeleteAsyncMarkersSGIX = GLEW_GET_FUN(__glewDeleteAsyncMarkersSGIX);
pub const glFinishAsyncSGIX = GLEW_GET_FUN(__glewFinishAsyncSGIX);
pub const glGenAsyncMarkersSGIX = GLEW_GET_FUN(__glewGenAsyncMarkersSGIX);
pub const glIsAsyncMarkerSGIX = GLEW_GET_FUN(__glewIsAsyncMarkerSGIX);
pub const glPollAsyncSGIX = GLEW_GET_FUN(__glewPollAsyncSGIX);
pub const GLEW_SGIX_async = GLEW_GET_VAR(__GLEW_SGIX_async);
pub const GL_SGIX_async_histogram = @as(c_int, 1);
pub const GL_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832C, .hexadecimal);
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832D, .hexadecimal);
pub const GLEW_SGIX_async_histogram = GLEW_GET_VAR(__GLEW_SGIX_async_histogram);
pub const GL_SGIX_async_pixel = @as(c_int, 1);
pub const GL_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835C, .hexadecimal);
pub const GL_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835D, .hexadecimal);
pub const GL_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835E, .hexadecimal);
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835F, .hexadecimal);
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8360, .hexadecimal);
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8361, .hexadecimal);
pub const GLEW_SGIX_async_pixel = GLEW_GET_VAR(__GLEW_SGIX_async_pixel);
pub const GL_SGIX_bali_g_instruments = @as(c_int, 1);
pub const GL_BALI_NUM_TRIS_CULLED_INSTRUMENT = @as(c_int, 0x6080);
pub const GL_BALI_NUM_PRIMS_CLIPPED_INSTRUMENT = @as(c_int, 0x6081);
pub const GL_BALI_NUM_PRIMS_REJECT_INSTRUMENT = @as(c_int, 0x6082);
pub const GL_BALI_NUM_PRIMS_CLIP_RESULT_INSTRUMENT = @as(c_int, 0x6083);
pub const GLEW_SGIX_bali_g_instruments = GLEW_GET_VAR(__GLEW_SGIX_bali_g_instruments);
pub const GL_SGIX_bali_r_instruments = @as(c_int, 1);
pub const GL_BALI_FRAGMENTS_GENERATED_INSTRUMENT = @as(c_int, 0x6090);
pub const GL_BALI_DEPTH_PASS_INSTRUMENT = @as(c_int, 0x6091);
pub const GL_BALI_R_CHIP_COUNT = @as(c_int, 0x6092);
pub const GLEW_SGIX_bali_r_instruments = GLEW_GET_VAR(__GLEW_SGIX_bali_r_instruments);
pub const GL_SGIX_bali_timer_instruments = @as(c_int, 1);
pub const GLEW_SGIX_bali_timer_instruments = GLEW_GET_VAR(__GLEW_SGIX_bali_timer_instruments);
pub const GL_SGIX_blend_alpha_minmax = @as(c_int, 1);
pub const GL_ALPHA_MIN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8320, .hexadecimal);
pub const GL_ALPHA_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8321, .hexadecimal);
pub const GLEW_SGIX_blend_alpha_minmax = GLEW_GET_VAR(__GLEW_SGIX_blend_alpha_minmax);
pub const GL_SGIX_blend_cadd = @as(c_int, 1);
pub const GL_FUNC_COMPLEX_ADD_EXT = @as(c_int, 0x601C);
pub const GLEW_SGIX_blend_cadd = GLEW_GET_VAR(__GLEW_SGIX_blend_cadd);
pub const GL_SGIX_blend_cmultiply = @as(c_int, 1);
pub const GL_FUNC_COMPLEX_MULTIPLY_EXT = @as(c_int, 0x601B);
pub const GLEW_SGIX_blend_cmultiply = GLEW_GET_VAR(__GLEW_SGIX_blend_cmultiply);
pub const GL_SGIX_calligraphic_fragment = @as(c_int, 1);
pub const GLEW_SGIX_calligraphic_fragment = GLEW_GET_VAR(__GLEW_SGIX_calligraphic_fragment);
pub const GL_SGIX_clipmap = @as(c_int, 1);
pub const GLEW_SGIX_clipmap = GLEW_GET_VAR(__GLEW_SGIX_clipmap);
pub const GL_SGIX_color_matrix_accuracy = @as(c_int, 1);
pub const GL_COLOR_MATRIX_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8317, .hexadecimal);
pub const GLEW_SGIX_color_matrix_accuracy = GLEW_GET_VAR(__GLEW_SGIX_color_matrix_accuracy);
pub const GL_SGIX_color_table_index_mode = @as(c_int, 1);
pub const GLEW_SGIX_color_table_index_mode = GLEW_GET_VAR(__GLEW_SGIX_color_table_index_mode);
pub const GL_SGIX_complex_polar = @as(c_int, 1);
pub const GLEW_SGIX_complex_polar = GLEW_GET_VAR(__GLEW_SGIX_complex_polar);
pub const GL_SGIX_convolution_accuracy = @as(c_int, 1);
pub const GL_CONVOLUTION_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8316, .hexadecimal);
pub const GLEW_SGIX_convolution_accuracy = GLEW_GET_VAR(__GLEW_SGIX_convolution_accuracy);
pub const GL_SGIX_cube_map = @as(c_int, 1);
pub const GL_ENV_MAP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8340, .hexadecimal);
pub const GL_CUBE_MAP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8341, .hexadecimal);
pub const GL_CUBE_MAP_ZP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8342, .hexadecimal);
pub const GL_CUBE_MAP_ZN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8343, .hexadecimal);
pub const GL_CUBE_MAP_XN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8344, .hexadecimal);
pub const GL_CUBE_MAP_XP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8345, .hexadecimal);
pub const GL_CUBE_MAP_YN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8346, .hexadecimal);
pub const GL_CUBE_MAP_YP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8347, .hexadecimal);
pub const GL_CUBE_MAP_BINDING_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8348, .hexadecimal);
pub const GLEW_SGIX_cube_map = GLEW_GET_VAR(__GLEW_SGIX_cube_map);
pub const GL_SGIX_cylinder_texgen = @as(c_int, 1);
pub const GLEW_SGIX_cylinder_texgen = GLEW_GET_VAR(__GLEW_SGIX_cylinder_texgen);
pub const GL_SGIX_datapipe = @as(c_int, 1);
pub const GL_GEOMETRY_BIT = @as(c_int, 0x1);
pub const GL_IMAGE_BIT = @as(c_int, 0x2);
pub const glAddressSpace = GLEW_GET_FUN(__glewAddressSpace);
pub const glDataPipe = GLEW_GET_FUN(__glewDataPipe);
pub const GLEW_SGIX_datapipe = GLEW_GET_VAR(__GLEW_SGIX_datapipe);
pub const GL_SGIX_decimation = @as(c_int, 1);
pub const GLEW_SGIX_decimation = GLEW_GET_VAR(__GLEW_SGIX_decimation);
pub const GL_SGIX_depth_pass_instrument = @as(c_int, 1);
pub const GL_DEPTH_PASS_INSTRUMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8310, .hexadecimal);
pub const GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8311, .hexadecimal);
pub const GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8312, .hexadecimal);
pub const GLEW_SGIX_depth_pass_instrument = GLEW_GET_VAR(__GLEW_SGIX_depth_pass_instrument);
pub const GL_SGIX_depth_texture = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GLEW_SGIX_depth_texture = GLEW_GET_VAR(__GLEW_SGIX_depth_texture);
pub const GL_SGIX_dvc = @as(c_int, 1);
pub const GLEW_SGIX_dvc = GLEW_GET_VAR(__GLEW_SGIX_dvc);
pub const GL_SGIX_flush_raster = @as(c_int, 1);
pub const glFlushRasterSGIX = GLEW_GET_FUN(__glewFlushRasterSGIX);
pub const GLEW_SGIX_flush_raster = GLEW_GET_VAR(__GLEW_SGIX_flush_raster);
pub const GL_SGIX_fog_blend = @as(c_int, 1);
pub const GL_FOG_BLEND_ALPHA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FE, .hexadecimal);
pub const GL_FOG_BLEND_COLOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FF, .hexadecimal);
pub const GLEW_SGIX_fog_blend = GLEW_GET_VAR(__GLEW_SGIX_fog_blend);
pub const GL_SGIX_fog_factor_to_alpha = @as(c_int, 1);
pub const GLEW_SGIX_fog_factor_to_alpha = GLEW_GET_VAR(__GLEW_SGIX_fog_factor_to_alpha);
pub const GL_SGIX_fog_layers = @as(c_int, 1);
pub const GL_FOG_TYPE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8323, .hexadecimal);
pub const GL_UNIFORM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8324, .hexadecimal);
pub const GL_LAYERED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8325, .hexadecimal);
pub const GL_FOG_GROUND_PLANE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8326, .hexadecimal);
pub const GL_FOG_LAYERS_POINTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8327, .hexadecimal);
pub const GL_MAX_FOG_LAYERS_POINTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8328, .hexadecimal);
pub const glFogLayersSGIX = GLEW_GET_FUN(__glewFogLayersSGIX);
pub const glGetFogLayersSGIX = GLEW_GET_FUN(__glewGetFogLayersSGIX);
pub const GLEW_SGIX_fog_layers = GLEW_GET_VAR(__GLEW_SGIX_fog_layers);
pub const GL_SGIX_fog_offset = @as(c_int, 1);
pub const GL_FOG_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8198, .hexadecimal);
pub const GL_FOG_OFFSET_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8199, .hexadecimal);
pub const GLEW_SGIX_fog_offset = GLEW_GET_VAR(__GLEW_SGIX_fog_offset);
pub const GL_SGIX_fog_patchy = @as(c_int, 1);
pub const GLEW_SGIX_fog_patchy = GLEW_GET_VAR(__GLEW_SGIX_fog_patchy);
pub const GL_SGIX_fog_scale = @as(c_int, 1);
pub const GL_FOG_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FC, .hexadecimal);
pub const GL_FOG_SCALE_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FD, .hexadecimal);
pub const GLEW_SGIX_fog_scale = GLEW_GET_VAR(__GLEW_SGIX_fog_scale);
pub const GL_SGIX_fog_texture = @as(c_int, 1);
pub const glTextureFogSGIX = GLEW_GET_FUN(__glewTextureFogSGIX);
pub const GLEW_SGIX_fog_texture = GLEW_GET_VAR(__GLEW_SGIX_fog_texture);
pub const GL_SGIX_fragment_lighting_space = @as(c_int, 1);
pub const GL_EYE_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8436, .hexadecimal);
pub const GL_TANGENT_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8437, .hexadecimal);
pub const GL_OBJECT_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8438, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_SPACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843D, .hexadecimal);
pub const GLEW_SGIX_fragment_lighting_space = GLEW_GET_VAR(__GLEW_SGIX_fragment_lighting_space);
pub const GL_SGIX_fragment_specular_lighting = @as(c_int, 1);
pub const glFragmentColorMaterialSGIX = GLEW_GET_FUN(__glewFragmentColorMaterialSGIX);
pub const glFragmentLightModelfSGIX = GLEW_GET_FUN(__glewFragmentLightModelfSGIX);
pub const glFragmentLightModelfvSGIX = GLEW_GET_FUN(__glewFragmentLightModelfvSGIX);
pub const glFragmentLightModeliSGIX = GLEW_GET_FUN(__glewFragmentLightModeliSGIX);
pub const glFragmentLightModelivSGIX = GLEW_GET_FUN(__glewFragmentLightModelivSGIX);
pub const glFragmentLightfSGIX = GLEW_GET_FUN(__glewFragmentLightfSGIX);
pub const glFragmentLightfvSGIX = GLEW_GET_FUN(__glewFragmentLightfvSGIX);
pub const glFragmentLightiSGIX = GLEW_GET_FUN(__glewFragmentLightiSGIX);
pub const glFragmentLightivSGIX = GLEW_GET_FUN(__glewFragmentLightivSGIX);
pub const glFragmentMaterialfSGIX = GLEW_GET_FUN(__glewFragmentMaterialfSGIX);
pub const glFragmentMaterialfvSGIX = GLEW_GET_FUN(__glewFragmentMaterialfvSGIX);
pub const glFragmentMaterialiSGIX = GLEW_GET_FUN(__glewFragmentMaterialiSGIX);
pub const glFragmentMaterialivSGIX = GLEW_GET_FUN(__glewFragmentMaterialivSGIX);
pub const glGetFragmentLightfvSGIX = GLEW_GET_FUN(__glewGetFragmentLightfvSGIX);
pub const glGetFragmentLightivSGIX = GLEW_GET_FUN(__glewGetFragmentLightivSGIX);
pub const glGetFragmentMaterialfvSGIX = GLEW_GET_FUN(__glewGetFragmentMaterialfvSGIX);
pub const glGetFragmentMaterialivSGIX = GLEW_GET_FUN(__glewGetFragmentMaterialivSGIX);
pub const GLEW_SGIX_fragment_specular_lighting = GLEW_GET_VAR(__GLEW_SGIX_fragment_specular_lighting);
pub const GL_SGIX_fragments_instrument = @as(c_int, 1);
pub const GL_FRAGMENTS_INSTRUMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8313, .hexadecimal);
pub const GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8314, .hexadecimal);
pub const GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8315, .hexadecimal);
pub const GLEW_SGIX_fragments_instrument = GLEW_GET_VAR(__GLEW_SGIX_fragments_instrument);
pub const GL_SGIX_framezoom = @as(c_int, 1);
pub const glFrameZoomSGIX = GLEW_GET_FUN(__glewFrameZoomSGIX);
pub const GLEW_SGIX_framezoom = GLEW_GET_VAR(__GLEW_SGIX_framezoom);
pub const GL_SGIX_icc_texture = @as(c_int, 1);
pub const GL_RGB_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8460, .hexadecimal);
pub const GL_RGBA_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8461, .hexadecimal);
pub const GL_ALPHA_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8462, .hexadecimal);
pub const GL_LUMINANCE_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8463, .hexadecimal);
pub const GL_INTENSITY_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8464, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8465, .hexadecimal);
pub const GL_R5_G6_B5_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8466, .hexadecimal);
pub const GL_R5_G6_B5_A8_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8467, .hexadecimal);
pub const GL_ALPHA16_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8468, .hexadecimal);
pub const GL_LUMINANCE16_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8469, .hexadecimal);
pub const GL_INTENSITY16_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846A, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA8_ICC_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846B, .hexadecimal);
pub const GLEW_SGIX_icc_texture = GLEW_GET_VAR(__GLEW_SGIX_icc_texture);
pub const GL_SGIX_igloo_interface = @as(c_int, 1);
pub const GL_IGLOO_FULLSCREEN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819E, .hexadecimal);
pub const GL_IGLOO_VIEWPORT_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819F, .hexadecimal);
pub const GL_IGLOO_SWAPTMESH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A0, .hexadecimal);
pub const GL_IGLOO_COLORNORMAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A1, .hexadecimal);
pub const GL_IGLOO_IRISGL_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A2, .hexadecimal);
pub const GL_IGLOO_LMC_COLOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A3, .hexadecimal);
pub const GL_IGLOO_TMESHMODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A4, .hexadecimal);
pub const GL_LIGHT31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xBEAD, .hexadecimal);
pub const glIglooInterfaceSGIX = GLEW_GET_FUN(__glewIglooInterfaceSGIX);
pub const GLEW_SGIX_igloo_interface = GLEW_GET_VAR(__GLEW_SGIX_igloo_interface);
pub const GL_SGIX_image_compression = @as(c_int, 1);
pub const GLEW_SGIX_image_compression = GLEW_GET_VAR(__GLEW_SGIX_image_compression);
pub const GL_SGIX_impact_pixel_texture = @as(c_int, 1);
pub const GLEW_SGIX_impact_pixel_texture = GLEW_GET_VAR(__GLEW_SGIX_impact_pixel_texture);
pub const GL_SGIX_instrument_error = @as(c_int, 1);
pub const GLEW_SGIX_instrument_error = GLEW_GET_VAR(__GLEW_SGIX_instrument_error);
pub const GL_SGIX_interlace = @as(c_int, 1);
pub const GL_INTERLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8094, .hexadecimal);
pub const GLEW_SGIX_interlace = GLEW_GET_VAR(__GLEW_SGIX_interlace);
pub const GL_SGIX_ir_instrument1 = @as(c_int, 1);
pub const GLEW_SGIX_ir_instrument1 = GLEW_GET_VAR(__GLEW_SGIX_ir_instrument1);
pub const GL_SGIX_line_quality_hint = @as(c_int, 1);
pub const GL_LINE_QUALITY_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835B, .hexadecimal);
pub const GLEW_SGIX_line_quality_hint = GLEW_GET_VAR(__GLEW_SGIX_line_quality_hint);
pub const GL_SGIX_list_priority = @as(c_int, 1);
pub const GLEW_SGIX_list_priority = GLEW_GET_VAR(__GLEW_SGIX_list_priority);
pub const GL_SGIX_mpeg1 = @as(c_int, 1);
pub const glAllocMPEGPredictorsSGIX = GLEW_GET_FUN(__glewAllocMPEGPredictorsSGIX);
pub const glDeleteMPEGPredictorsSGIX = GLEW_GET_FUN(__glewDeleteMPEGPredictorsSGIX);
pub const glGenMPEGPredictorsSGIX = GLEW_GET_FUN(__glewGenMPEGPredictorsSGIX);
pub const glGetMPEGParameterfvSGIX = GLEW_GET_FUN(__glewGetMPEGParameterfvSGIX);
pub const glGetMPEGParameterivSGIX = GLEW_GET_FUN(__glewGetMPEGParameterivSGIX);
pub const glGetMPEGPredictorSGIX = GLEW_GET_FUN(__glewGetMPEGPredictorSGIX);
pub const glGetMPEGQuantTableubv = GLEW_GET_FUN(__glewGetMPEGQuantTableubv);
pub const glIsMPEGPredictorSGIX = GLEW_GET_FUN(__glewIsMPEGPredictorSGIX);
pub const glMPEGPredictorSGIX = GLEW_GET_FUN(__glewMPEGPredictorSGIX);
pub const glMPEGQuantTableubv = GLEW_GET_FUN(__glewMPEGQuantTableubv);
pub const glSwapMPEGPredictorsSGIX = GLEW_GET_FUN(__glewSwapMPEGPredictorsSGIX);
pub const GLEW_SGIX_mpeg1 = GLEW_GET_VAR(__GLEW_SGIX_mpeg1);
pub const GL_SGIX_mpeg2 = @as(c_int, 1);
pub const GLEW_SGIX_mpeg2 = GLEW_GET_VAR(__GLEW_SGIX_mpeg2);
pub const GL_SGIX_nonlinear_lighting_pervertex = @as(c_int, 1);
pub const glGetNonlinLightfvSGIX = GLEW_GET_FUN(__glewGetNonlinLightfvSGIX);
pub const glGetNonlinMaterialfvSGIX = GLEW_GET_FUN(__glewGetNonlinMaterialfvSGIX);
pub const glNonlinLightfvSGIX = GLEW_GET_FUN(__glewNonlinLightfvSGIX);
pub const glNonlinMaterialfvSGIX = GLEW_GET_FUN(__glewNonlinMaterialfvSGIX);
pub const GLEW_SGIX_nonlinear_lighting_pervertex = GLEW_GET_VAR(__GLEW_SGIX_nonlinear_lighting_pervertex);
pub const GL_SGIX_nurbs_eval = @as(c_int, 1);
pub const GL_MAP1_VERTEX_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CB, .hexadecimal);
pub const GL_MAP1_VERTEX_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CC, .hexadecimal);
pub const GL_MAP1_INDEX_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CD, .hexadecimal);
pub const GL_MAP1_COLOR_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CE, .hexadecimal);
pub const GL_MAP1_NORMAL_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81CF, .hexadecimal);
pub const GL_MAP1_TEXTURE_COORD_1_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E0, .hexadecimal);
pub const GL_MAP1_TEXTURE_COORD_2_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E1, .hexadecimal);
pub const GL_MAP1_TEXTURE_COORD_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E2, .hexadecimal);
pub const GL_MAP1_TEXTURE_COORD_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E3, .hexadecimal);
pub const GL_MAP2_VERTEX_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E4, .hexadecimal);
pub const GL_MAP2_VERTEX_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E5, .hexadecimal);
pub const GL_MAP2_INDEX_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E6, .hexadecimal);
pub const GL_MAP2_COLOR_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E7, .hexadecimal);
pub const GL_MAP2_NORMAL_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E8, .hexadecimal);
pub const GL_MAP2_TEXTURE_COORD_1_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81E9, .hexadecimal);
pub const GL_MAP2_TEXTURE_COORD_2_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EA, .hexadecimal);
pub const GL_MAP2_TEXTURE_COORD_3_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EB, .hexadecimal);
pub const GL_MAP2_TEXTURE_COORD_4_NURBS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EC, .hexadecimal);
pub const GL_NURBS_KNOT_COUNT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81ED, .hexadecimal);
pub const GL_NURBS_KNOT_VECTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EE, .hexadecimal);
pub const GLEW_SGIX_nurbs_eval = GLEW_GET_VAR(__GLEW_SGIX_nurbs_eval);
pub const GL_SGIX_occlusion_instrument = @as(c_int, 1);
pub const GL_OCCLUSION_INSTRUMENT_SGIX = @as(c_int, 0x6060);
pub const GLEW_SGIX_occlusion_instrument = GLEW_GET_VAR(__GLEW_SGIX_occlusion_instrument);
pub const GL_SGIX_packed_6bytes = @as(c_int, 1);
pub const GLEW_SGIX_packed_6bytes = GLEW_GET_VAR(__GLEW_SGIX_packed_6bytes);
pub const GL_SGIX_pixel_texture = @as(c_int, 1);
pub const glPixelTexGenSGIX = GLEW_GET_FUN(__glewPixelTexGenSGIX);
pub const GLEW_SGIX_pixel_texture = GLEW_GET_VAR(__GLEW_SGIX_pixel_texture);
pub const GL_SGIX_pixel_texture_bits = @as(c_int, 1);
pub const GLEW_SGIX_pixel_texture_bits = GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_bits);
pub const GL_SGIX_pixel_texture_lod = @as(c_int, 1);
pub const GLEW_SGIX_pixel_texture_lod = GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_lod);
pub const GL_SGIX_pixel_tiles = @as(c_int, 1);
pub const GLEW_SGIX_pixel_tiles = GLEW_GET_VAR(__GLEW_SGIX_pixel_tiles);
pub const GL_SGIX_polynomial_ffd = @as(c_int, 1);
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = @as(c_int, 0x1);
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = @as(c_int, 0x2);
pub const glDeformSGIX = GLEW_GET_FUN(__glewDeformSGIX);
pub const glLoadIdentityDeformationMapSGIX = GLEW_GET_FUN(__glewLoadIdentityDeformationMapSGIX);
pub const GLEW_SGIX_polynomial_ffd = GLEW_GET_VAR(__GLEW_SGIX_polynomial_ffd);
pub const GL_SGIX_quad_mesh = @as(c_int, 1);
pub const glMeshBreadthSGIX = GLEW_GET_FUN(__glewMeshBreadthSGIX);
pub const glMeshStrideSGIX = GLEW_GET_FUN(__glewMeshStrideSGIX);
pub const GLEW_SGIX_quad_mesh = GLEW_GET_VAR(__GLEW_SGIX_quad_mesh);
pub const GL_SGIX_reference_plane = @as(c_int, 1);
pub const glReferencePlaneSGIX = GLEW_GET_FUN(__glewReferencePlaneSGIX);
pub const GLEW_SGIX_reference_plane = GLEW_GET_VAR(__GLEW_SGIX_reference_plane);
pub const GL_SGIX_resample = @as(c_int, 1);
pub const GL_PACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842E, .hexadecimal);
pub const GL_UNPACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842F, .hexadecimal);
pub const GL_RESAMPLE_DECIMATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8430, .hexadecimal);
pub const GL_RESAMPLE_REPLICATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8433, .hexadecimal);
pub const GL_RESAMPLE_ZERO_FILL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8434, .hexadecimal);
pub const GLEW_SGIX_resample = GLEW_GET_VAR(__GLEW_SGIX_resample);
pub const GL_SGIX_scalebias_hint = @as(c_int, 1);
pub const GL_SCALEBIAS_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8322, .hexadecimal);
pub const GLEW_SGIX_scalebias_hint = GLEW_GET_VAR(__GLEW_SGIX_scalebias_hint);
pub const GL_SGIX_shadow = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819A, .hexadecimal);
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819B, .hexadecimal);
pub const GL_TEXTURE_LEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819C, .hexadecimal);
pub const GL_TEXTURE_GEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819D, .hexadecimal);
pub const GLEW_SGIX_shadow = GLEW_GET_VAR(__GLEW_SGIX_shadow);
pub const GL_SGIX_shadow_ambient = @as(c_int, 1);
pub const GL_SHADOW_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hexadecimal);
pub const GLEW_SGIX_shadow_ambient = GLEW_GET_VAR(__GLEW_SGIX_shadow_ambient);
pub const GL_SGIX_slim = @as(c_int, 1);
pub const GL_PACK_MAX_COMPRESSED_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831B, .hexadecimal);
pub const GL_SLIM8U_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831D, .hexadecimal);
pub const GL_SLIM10U_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831E, .hexadecimal);
pub const GL_SLIM12S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831F, .hexadecimal);
pub const GLEW_SGIX_slim = GLEW_GET_VAR(__GLEW_SGIX_slim);
pub const GL_SGIX_spotlight_cutoff = @as(c_int, 1);
pub const GL_SPOT_CUTOFF_DELTA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8193, .hexadecimal);
pub const GLEW_SGIX_spotlight_cutoff = GLEW_GET_VAR(__GLEW_SGIX_spotlight_cutoff);
pub const GL_SGIX_sprite = @as(c_int, 1);
pub const glSpriteParameterfSGIX = GLEW_GET_FUN(__glewSpriteParameterfSGIX);
pub const glSpriteParameterfvSGIX = GLEW_GET_FUN(__glewSpriteParameterfvSGIX);
pub const glSpriteParameteriSGIX = GLEW_GET_FUN(__glewSpriteParameteriSGIX);
pub const glSpriteParameterivSGIX = GLEW_GET_FUN(__glewSpriteParameterivSGIX);
pub const GLEW_SGIX_sprite = GLEW_GET_VAR(__GLEW_SGIX_sprite);
pub const GL_SGIX_subdiv_patch = @as(c_int, 1);
pub const GLEW_SGIX_subdiv_patch = GLEW_GET_VAR(__GLEW_SGIX_subdiv_patch);
pub const GL_SGIX_subsample = @as(c_int, 1);
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A0, .hexadecimal);
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A1, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A2, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A3, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A4, .hexadecimal);
pub const GLEW_SGIX_subsample = GLEW_GET_VAR(__GLEW_SGIX_subsample);
pub const GL_SGIX_tag_sample_buffer = @as(c_int, 1);
pub const glTagSampleBufferSGIX = GLEW_GET_FUN(__glewTagSampleBufferSGIX);
pub const GLEW_SGIX_tag_sample_buffer = GLEW_GET_VAR(__GLEW_SGIX_tag_sample_buffer);
pub const GL_SGIX_texture_add_env = @as(c_int, 1);
pub const GLEW_SGIX_texture_add_env = GLEW_GET_VAR(__GLEW_SGIX_texture_add_env);
pub const GL_SGIX_texture_coordinate_clamp = @as(c_int, 1);
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8369, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836A, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836B, .hexadecimal);
pub const GLEW_SGIX_texture_coordinate_clamp = GLEW_GET_VAR(__GLEW_SGIX_texture_coordinate_clamp);
pub const GL_SGIX_texture_lod_bias = @as(c_int, 1);
pub const GLEW_SGIX_texture_lod_bias = GLEW_GET_VAR(__GLEW_SGIX_texture_lod_bias);
pub const GL_SGIX_texture_mipmap_anisotropic = @as(c_int, 1);
pub const GL_TEXTURE_MIPMAP_ANISOTROPY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832E, .hexadecimal);
pub const GL_MAX_MIPMAP_ANISOTROPY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832F, .hexadecimal);
pub const GLEW_SGIX_texture_mipmap_anisotropic = GLEW_GET_VAR(__GLEW_SGIX_texture_mipmap_anisotropic);
pub const GL_SGIX_texture_multi_buffer = @as(c_int, 1);
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812E, .hexadecimal);
pub const GLEW_SGIX_texture_multi_buffer = GLEW_GET_VAR(__GLEW_SGIX_texture_multi_buffer);
pub const GL_SGIX_texture_phase = @as(c_int, 1);
pub const GL_PHASE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832A, .hexadecimal);
pub const GLEW_SGIX_texture_phase = GLEW_GET_VAR(__GLEW_SGIX_texture_phase);
pub const GL_SGIX_texture_range = @as(c_int, 1);
pub const GL_RGB_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E0, .hexadecimal);
pub const GL_RGBA_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E1, .hexadecimal);
pub const GL_ALPHA_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E2, .hexadecimal);
pub const GL_LUMINANCE_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E3, .hexadecimal);
pub const GL_INTENSITY_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E4, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E5, .hexadecimal);
pub const GL_RGB16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E6, .hexadecimal);
pub const GL_RGBA16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E7, .hexadecimal);
pub const GL_ALPHA16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E8, .hexadecimal);
pub const GL_LUMINANCE16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85E9, .hexadecimal);
pub const GL_INTENSITY16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EA, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EB, .hexadecimal);
pub const GL_RGB_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EC, .hexadecimal);
pub const GL_RGBA_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85ED, .hexadecimal);
pub const GL_ALPHA_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EE, .hexadecimal);
pub const GL_LUMINANCE_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85EF, .hexadecimal);
pub const GL_INTENSITY_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F0, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F1, .hexadecimal);
pub const GL_RGB16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F2, .hexadecimal);
pub const GL_RGBA16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F3, .hexadecimal);
pub const GL_ALPHA16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F4, .hexadecimal);
pub const GL_LUMINANCE16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F5, .hexadecimal);
pub const GL_INTENSITY16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F6, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F7, .hexadecimal);
pub const GL_MIN_LUMINANCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F8, .hexadecimal);
pub const GL_MAX_LUMINANCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85F9, .hexadecimal);
pub const GL_MIN_INTENSITY_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85FA, .hexadecimal);
pub const GL_MAX_INTENSITY_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85FB, .hexadecimal);
pub const GLEW_SGIX_texture_range = GLEW_GET_VAR(__GLEW_SGIX_texture_range);
pub const GL_SGIX_texture_scale_bias = @as(c_int, 1);
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8179, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817A, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817B, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817C, .hexadecimal);
pub const GLEW_SGIX_texture_scale_bias = GLEW_GET_VAR(__GLEW_SGIX_texture_scale_bias);
pub const GL_SGIX_texture_supersample = @as(c_int, 1);
pub const GLEW_SGIX_texture_supersample = GLEW_GET_VAR(__GLEW_SGIX_texture_supersample);
pub const GL_SGIX_vector_ops = @as(c_int, 1);
pub const glGetVectorOperationSGIX = GLEW_GET_FUN(__glewGetVectorOperationSGIX);
pub const glVectorOperationSGIX = GLEW_GET_FUN(__glewVectorOperationSGIX);
pub const GLEW_SGIX_vector_ops = GLEW_GET_VAR(__GLEW_SGIX_vector_ops);
pub const GL_SGIX_vertex_array_object = @as(c_int, 1);
pub const glAreVertexArraysResidentSGIX = GLEW_GET_FUN(__glewAreVertexArraysResidentSGIX);
pub const glBindVertexArraySGIX = GLEW_GET_FUN(__glewBindVertexArraySGIX);
pub const glDeleteVertexArraysSGIX = GLEW_GET_FUN(__glewDeleteVertexArraysSGIX);
pub const glGenVertexArraysSGIX = GLEW_GET_FUN(__glewGenVertexArraysSGIX);
pub const glIsVertexArraySGIX = GLEW_GET_FUN(__glewIsVertexArraySGIX);
pub const glPrioritizeVertexArraysSGIX = GLEW_GET_FUN(__glewPrioritizeVertexArraysSGIX);
pub const GLEW_SGIX_vertex_array_object = GLEW_GET_VAR(__GLEW_SGIX_vertex_array_object);
pub const GL_SGIX_vertex_preclip = @as(c_int, 1);
pub const GL_VERTEX_PRECLIP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EE, .hexadecimal);
pub const GL_VERTEX_PRECLIP_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EF, .hexadecimal);
pub const GLEW_SGIX_vertex_preclip = GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip);
pub const GL_SGIX_vertex_preclip_hint = @as(c_int, 1);
pub const GLEW_SGIX_vertex_preclip_hint = GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip_hint);
pub const GL_SGIX_ycrcb = @as(c_int, 1);
pub const GLEW_SGIX_ycrcb = GLEW_GET_VAR(__GLEW_SGIX_ycrcb);
pub const GL_SGIX_ycrcb_subsample = @as(c_int, 1);
pub const GLEW_SGIX_ycrcb_subsample = GLEW_GET_VAR(__GLEW_SGIX_ycrcb_subsample);
pub const GL_SGIX_ycrcba = @as(c_int, 1);
pub const GL_YCRCB_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8318, .hexadecimal);
pub const GL_YCRCBA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8319, .hexadecimal);
pub const GLEW_SGIX_ycrcba = GLEW_GET_VAR(__GLEW_SGIX_ycrcba);
pub const GL_SGI_color_matrix = @as(c_int, 1);
pub const GL_COLOR_MATRIX_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hexadecimal);
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hexadecimal);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hexadecimal);
pub const GLEW_SGI_color_matrix = GLEW_GET_VAR(__GLEW_SGI_color_matrix);
pub const GL_SGI_color_table = @as(c_int, 1);
pub const GL_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const GL_PROXY_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const GL_COLOR_TABLE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hexadecimal);
pub const GL_COLOR_TABLE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hexadecimal);
pub const GL_COLOR_TABLE_FORMAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const glColorTableParameterfvSGI = GLEW_GET_FUN(__glewColorTableParameterfvSGI);
pub const glColorTableParameterivSGI = GLEW_GET_FUN(__glewColorTableParameterivSGI);
pub const glColorTableSGI = GLEW_GET_FUN(__glewColorTableSGI);
pub const glCopyColorTableSGI = GLEW_GET_FUN(__glewCopyColorTableSGI);
pub const glGetColorTableParameterfvSGI = GLEW_GET_FUN(__glewGetColorTableParameterfvSGI);
pub const glGetColorTableParameterivSGI = GLEW_GET_FUN(__glewGetColorTableParameterivSGI);
pub const glGetColorTableSGI = GLEW_GET_FUN(__glewGetColorTableSGI);
pub const GLEW_SGI_color_table = GLEW_GET_VAR(__GLEW_SGI_color_table);
pub const GL_SGI_complex = @as(c_int, 1);
pub const GLEW_SGI_complex = GLEW_GET_VAR(__GLEW_SGI_complex);
pub const GL_SGI_complex_type = @as(c_int, 1);
pub const GL_COMPLEX_UNSIGNED_BYTE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BD, .hexadecimal);
pub const GL_COMPLEX_BYTE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BE, .hexadecimal);
pub const GL_COMPLEX_UNSIGNED_SHORT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BF, .hexadecimal);
pub const GL_COMPLEX_SHORT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C0, .hexadecimal);
pub const GL_COMPLEX_UNSIGNED_INT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C1, .hexadecimal);
pub const GL_COMPLEX_INT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C2, .hexadecimal);
pub const GL_COMPLEX_FLOAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C3, .hexadecimal);
pub const GLEW_SGI_complex_type = GLEW_GET_VAR(__GLEW_SGI_complex_type);
pub const GL_SGI_fft = @as(c_int, 1);
pub const GL_PIXEL_TRANSFORM_OPERATOR_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C4, .hexadecimal);
pub const GL_CONVOLUTION_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C5, .hexadecimal);
pub const GL_FFT_1D_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C6, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C7, .hexadecimal);
pub const GL_MAX_FFT_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81C8, .hexadecimal);
pub const glGetPixelTransformParameterfvSGI = GLEW_GET_FUN(__glewGetPixelTransformParameterfvSGI);
pub const glGetPixelTransformParameterivSGI = GLEW_GET_FUN(__glewGetPixelTransformParameterivSGI);
pub const glPixelTransformParameterfSGI = GLEW_GET_FUN(__glewPixelTransformParameterfSGI);
pub const glPixelTransformParameterfvSGI = GLEW_GET_FUN(__glewPixelTransformParameterfvSGI);
pub const glPixelTransformParameteriSGI = GLEW_GET_FUN(__glewPixelTransformParameteriSGI);
pub const glPixelTransformParameterivSGI = GLEW_GET_FUN(__glewPixelTransformParameterivSGI);
pub const glPixelTransformSGI = GLEW_GET_FUN(__glewPixelTransformSGI);
pub const GLEW_SGI_fft = GLEW_GET_VAR(__GLEW_SGI_fft);
pub const GL_SGI_texture_color_table = @as(c_int, 1);
pub const GL_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BC, .hexadecimal);
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BD, .hexadecimal);
pub const GLEW_SGI_texture_color_table = GLEW_GET_VAR(__GLEW_SGI_texture_color_table);
pub const GL_SUNX_constant_data = @as(c_int, 1);
pub const GL_UNPACK_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D5, .hexadecimal);
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D6, .hexadecimal);
pub const glFinishTextureSUNX = GLEW_GET_FUN(__glewFinishTextureSUNX);
pub const GLEW_SUNX_constant_data = GLEW_GET_VAR(__GLEW_SUNX_constant_data);
pub const GL_SUN_convolution_border_modes = @as(c_int, 1);
pub const GL_WRAP_BORDER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D4, .hexadecimal);
pub const GLEW_SUN_convolution_border_modes = GLEW_GET_VAR(__GLEW_SUN_convolution_border_modes);
pub const GL_SUN_global_alpha = @as(c_int, 1);
pub const GL_GLOBAL_ALPHA_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D9, .hexadecimal);
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81DA, .hexadecimal);
pub const glGlobalAlphaFactorbSUN = GLEW_GET_FUN(__glewGlobalAlphaFactorbSUN);
pub const glGlobalAlphaFactordSUN = GLEW_GET_FUN(__glewGlobalAlphaFactordSUN);
pub const glGlobalAlphaFactorfSUN = GLEW_GET_FUN(__glewGlobalAlphaFactorfSUN);
pub const glGlobalAlphaFactoriSUN = GLEW_GET_FUN(__glewGlobalAlphaFactoriSUN);
pub const glGlobalAlphaFactorsSUN = GLEW_GET_FUN(__glewGlobalAlphaFactorsSUN);
pub const glGlobalAlphaFactorubSUN = GLEW_GET_FUN(__glewGlobalAlphaFactorubSUN);
pub const glGlobalAlphaFactoruiSUN = GLEW_GET_FUN(__glewGlobalAlphaFactoruiSUN);
pub const glGlobalAlphaFactorusSUN = GLEW_GET_FUN(__glewGlobalAlphaFactorusSUN);
pub const GLEW_SUN_global_alpha = GLEW_GET_VAR(__GLEW_SUN_global_alpha);
pub const GL_SUN_mesh_array = @as(c_int, 1);
pub const GL_QUAD_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8614, .hexadecimal);
pub const GL_TRIANGLE_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8615, .hexadecimal);
pub const GLEW_SUN_mesh_array = GLEW_GET_VAR(__GLEW_SUN_mesh_array);
pub const GL_SUN_read_video_pixels = @as(c_int, 1);
pub const glReadVideoPixelsSUN = GLEW_GET_FUN(__glewReadVideoPixelsSUN);
pub const GLEW_SUN_read_video_pixels = GLEW_GET_VAR(__GLEW_SUN_read_video_pixels);
pub const GL_SUN_slice_accum = @as(c_int, 1);
pub const GL_SLICE_ACCUM_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CC, .hexadecimal);
pub const GLEW_SUN_slice_accum = GLEW_GET_VAR(__GLEW_SUN_slice_accum);
pub const GL_SUN_triangle_list = @as(c_int, 1);
pub const GL_RESTART_SUN = @as(c_int, 0x01);
pub const GL_REPLACE_MIDDLE_SUN = @as(c_int, 0x02);
pub const GL_REPLACE_OLDEST_SUN = @as(c_int, 0x03);
pub const GL_TRIANGLE_LIST_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D7, .hexadecimal);
pub const GL_REPLACEMENT_CODE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D8, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C0, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C1, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C2, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C3, .hexadecimal);
pub const GL_R1UI_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C4, .hexadecimal);
pub const GL_R1UI_C4UB_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C5, .hexadecimal);
pub const GL_R1UI_C3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C6, .hexadecimal);
pub const GL_R1UI_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C7, .hexadecimal);
pub const GL_R1UI_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C8, .hexadecimal);
pub const GL_R1UI_T2F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C9, .hexadecimal);
pub const GL_R1UI_T2F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CA, .hexadecimal);
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CB, .hexadecimal);
pub const glReplacementCodePointerSUN = GLEW_GET_FUN(__glewReplacementCodePointerSUN);
pub const glReplacementCodeubSUN = GLEW_GET_FUN(__glewReplacementCodeubSUN);
pub const glReplacementCodeubvSUN = GLEW_GET_FUN(__glewReplacementCodeubvSUN);
pub const glReplacementCodeuiSUN = GLEW_GET_FUN(__glewReplacementCodeuiSUN);
pub const glReplacementCodeuivSUN = GLEW_GET_FUN(__glewReplacementCodeuivSUN);
pub const glReplacementCodeusSUN = GLEW_GET_FUN(__glewReplacementCodeusSUN);
pub const glReplacementCodeusvSUN = GLEW_GET_FUN(__glewReplacementCodeusvSUN);
pub const GLEW_SUN_triangle_list = GLEW_GET_VAR(__GLEW_SUN_triangle_list);
pub const GL_SUN_vertex = @as(c_int, 1);
pub const glColor3fVertex3fSUN = GLEW_GET_FUN(__glewColor3fVertex3fSUN);
pub const glColor3fVertex3fvSUN = GLEW_GET_FUN(__glewColor3fVertex3fvSUN);
pub const glColor4fNormal3fVertex3fSUN = GLEW_GET_FUN(__glewColor4fNormal3fVertex3fSUN);
pub const glColor4fNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewColor4fNormal3fVertex3fvSUN);
pub const glColor4ubVertex2fSUN = GLEW_GET_FUN(__glewColor4ubVertex2fSUN);
pub const glColor4ubVertex2fvSUN = GLEW_GET_FUN(__glewColor4ubVertex2fvSUN);
pub const glColor4ubVertex3fSUN = GLEW_GET_FUN(__glewColor4ubVertex3fSUN);
pub const glColor4ubVertex3fvSUN = GLEW_GET_FUN(__glewColor4ubVertex3fvSUN);
pub const glNormal3fVertex3fSUN = GLEW_GET_FUN(__glewNormal3fVertex3fSUN);
pub const glNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewNormal3fVertex3fvSUN);
pub const glReplacementCodeuiColor3fVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fSUN);
pub const glReplacementCodeuiColor3fVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fvSUN);
pub const glReplacementCodeuiColor4fNormal3fVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fSUN);
pub const glReplacementCodeuiColor4fNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN);
pub const glReplacementCodeuiColor4ubVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fSUN);
pub const glReplacementCodeuiColor4ubVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fvSUN);
pub const glReplacementCodeuiNormal3fVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fSUN);
pub const glReplacementCodeuiNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fvSUN);
pub const glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
pub const glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
pub const glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
pub const glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
pub const glReplacementCodeuiTexCoord2fVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fSUN);
pub const glReplacementCodeuiTexCoord2fVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fvSUN);
pub const glReplacementCodeuiVertex3fSUN = GLEW_GET_FUN(__glewReplacementCodeuiVertex3fSUN);
pub const glReplacementCodeuiVertex3fvSUN = GLEW_GET_FUN(__glewReplacementCodeuiVertex3fvSUN);
pub const glTexCoord2fColor3fVertex3fSUN = GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fSUN);
pub const glTexCoord2fColor3fVertex3fvSUN = GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fvSUN);
pub const glTexCoord2fColor4fNormal3fVertex3fSUN = GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fSUN);
pub const glTexCoord2fColor4fNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fvSUN);
pub const glTexCoord2fColor4ubVertex3fSUN = GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fSUN);
pub const glTexCoord2fColor4ubVertex3fvSUN = GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fvSUN);
pub const glTexCoord2fNormal3fVertex3fSUN = GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fSUN);
pub const glTexCoord2fNormal3fVertex3fvSUN = GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fvSUN);
pub const glTexCoord2fVertex3fSUN = GLEW_GET_FUN(__glewTexCoord2fVertex3fSUN);
pub const glTexCoord2fVertex3fvSUN = GLEW_GET_FUN(__glewTexCoord2fVertex3fvSUN);
pub const glTexCoord4fColor4fNormal3fVertex4fSUN = GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fSUN);
pub const glTexCoord4fColor4fNormal3fVertex4fvSUN = GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fvSUN);
pub const glTexCoord4fVertex4fSUN = GLEW_GET_FUN(__glewTexCoord4fVertex4fSUN);
pub const glTexCoord4fVertex4fvSUN = GLEW_GET_FUN(__glewTexCoord4fVertex4fvSUN);
pub const GLEW_SUN_vertex = GLEW_GET_VAR(__GLEW_SUN_vertex);
pub const GL_VIV_shader_binary = @as(c_int, 1);
pub const GL_SHADER_BINARY_VIV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FC4, .hexadecimal);
pub const GLEW_VIV_shader_binary = GLEW_GET_VAR(__GLEW_VIV_shader_binary);
pub const GL_WIN_phong_shading = @as(c_int, 1);
pub const GL_PHONG_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EA, .hexadecimal);
pub const GL_PHONG_HINT_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EB, .hexadecimal);
pub const GLEW_WIN_phong_shading = GLEW_GET_VAR(__GLEW_WIN_phong_shading);
pub const GL_WIN_scene_markerXXX = @as(c_int, 1);
pub const GLEW_WIN_scene_markerXXX = GLEW_GET_VAR(__GLEW_WIN_scene_markerXXX);
pub const GL_WIN_specular_fog = @as(c_int, 1);
pub const GL_FOG_SPECULAR_TEXTURE_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EC, .hexadecimal);
pub const GLEW_WIN_specular_fog = GLEW_GET_VAR(__GLEW_WIN_specular_fog);
pub const GL_WIN_swap_hint = @as(c_int, 1);
pub const glAddSwapHintRectWIN = GLEW_GET_FUN(__glewAddSwapHintRectWIN);
pub const GLEW_WIN_swap_hint = GLEW_GET_VAR(__GLEW_WIN_swap_hint);
pub const GLEW_OK = @as(c_int, 0);
pub const GLEW_NO_ERROR = @as(c_int, 0);
pub const GLEW_ERROR_NO_GL_VERSION = @as(c_int, 1);
pub const GLEW_ERROR_GL_VERSION_10_ONLY = @as(c_int, 2);
pub const GLEW_ERROR_GLX_VERSION_11_ONLY = @as(c_int, 3);
pub const GLEW_ERROR_NO_GLX_DISPLAY = @as(c_int, 4);
pub const GLEW_VERSION = @as(c_int, 1);
pub const GLEW_VERSION_MAJOR = @as(c_int, 2);
pub const GLEW_VERSION_MINOR = @as(c_int, 3);
pub const GLEW_VERSION_MICRO = @as(c_int, 4);
pub inline fn glewIsExtensionSupported(x: anytype) @TypeOf(glewIsSupported(x)) {
    return glewIsSupported(x);
}
pub inline fn GLEW_GET_FUN(x: anytype) @TypeOf(x) {
    return x;
}
pub const __darwin_pthread_handler_rec = struct___darwin_pthread_handler_rec;
pub const _opaque_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const _opaque_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const _opaque_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const _opaque_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const _opaque_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const _opaque_pthread_once_t = struct__opaque_pthread_once_t;
pub const _opaque_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const _opaque_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const _opaque_pthread_t = struct__opaque_pthread_t;
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
